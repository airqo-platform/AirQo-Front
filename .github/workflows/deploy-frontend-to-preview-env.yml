name: deploy-to-preview-environment

on:
  pull_request:
    branches:
      - staging
  
jobs:
  branch-name:
    name: Format branch name string
    runs-on: ubuntu-latest
    outputs:
      lowercase: ${{ steps.string.outputs.lowercase }} # lowercase version
    steps:
      - id: string
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ github.head_ref || github.ref_name }}

  check:
    name: check for changed frontends
    outputs:
      run_platform: ${{ steps.check_files.outputs.run_platform }} # platform
      run_calibrate_app: ${{ steps.check_files.outputs.run_calibrate_app }} # calibrate app

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified frontends
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt

          echo "::set-output name=run_platform::false"
          echo "::set-output name=run_calibrate_app::false"  

          while IFS= read -r file
          do
            echo $file
            if [[ $file == netmanager/* ]]; then
              echo "::set-output name=run_platform::true"
            fi

            if [[ $file == calibrate/* ]]; then
              echo "::set-output name=run_calibrate_app::true"
            fi

          done < files.txt

  ### deploy netmanager preview ###
  netmanager:
    name: build-push-deploy-netmanager-preview
    needs: [check,branch-name]
    if: needs.check.outputs.run_platform == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write    
    outputs:
      url: ${{ steps.preview-url.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}
          
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Login to GCR
        id: docker-auth
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: NPM Setup and Build
        uses: actions/setup-node@v2
        with:
          node-version: '12'
      - run: |
          cd netmanager/

          export REACT_APP_BASE_URL=${{ secrets.REACT_APP_BASE_URL_STAGE }}
          export REACT_APP_CLOUDINARY_NAME=${{ secrets.REACT_APP_CLOUDINARY_NAME }}
          export REACT_APP_CLOUDINARY_PRESET=${{ secrets.REACT_APP_CLOUDINARY_PRESET }}
          export REACT_APP_MAPBOX_TOKEN=${{ secrets.REACT_APP_MAPBOX_TOKEN }}
          export REACT_APP_JIRA_KEY=${{ secrets.REACT_APP_JIRA_KEY }}
          export NODE_PATH=${{ secrets.NODE_PATH }}
          export PORT=${{ secrets.NODE_PORT }}

          npm install
    
          CI=false npm run build

      - name: Build and Push Image
        run: |
          cd netmanager/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/pr-previews/netmanager-pr-previews:${{ github.sha }} ./
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/pr-previews/netmanager-pr-previews:${{ github.sha }}
      
      - name: Deploy to Cloud Run
        run: |-
          gcloud run deploy ${{ needs.branch-name.outputs.lowercase }}-netmanager-preview \
            --region=${{ secrets.REGION }} \
            --max-instances=10 \
            --timeout=60 \
            --concurrency=10 \
            --image=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/pr-previews/netmanager-pr-previews:${{ github.sha }} \
            --port=80 \
            --cpu=1000m \
            --memory=256Mi \
            --update-secrets=/etc/env/.env=sta-env-netmanager:latest \
            --command="/bin/sh","-c","cat /etc/env/.env >> /etc/environment; nginx -g 'daemon off;'" \
            --allow-unauthenticated

      - name: Get preview service url
        id: preview-url
        run: |
          read service_url < <(gcloud run services describe ${{ needs.branch-name.outputs.lowercase }}-netmanager-preview \
            --format='value(status.url)' \
            --platform managed \
            --region ${{ secrets.REGION }})
          echo "::set-output name=url::${service_url}"

  netmanager-pr-comment:
    name: netmanager-preview-link-comment
    if: needs.check.outputs.run_platform == 'true'
    needs: [netmanager]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'New netmanager changes available for preview [here](${{ needs.netmanager.outputs.url }})'
            })
    
  ### deploy calibrate-app preview ###
  calibrate-app:
    name: build-push-deploy-calibrate-app-preview
    needs: [check,branch-name]
    if: needs.check.outputs.run_calibrate_app == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write    
    outputs:
      url: ${{ steps.preview-url.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}
          
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Login to GCR
        id: docker-auth
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: NPM Setup and Build
        uses: actions/setup-node@v2
        with:
          node-version: '12'
      - run: |
          cd calibrate/

          export REACT_APP_BASE_URL=${{ secrets.REACT_APP_BASE_URL_STAGE }}
          export REACT_APP_BASE_CALIBRATE_URL=${{ secrets.REACT_APP_BASE_CALIBRATE_URL }}
          export NODE_PATH=${{ secrets.NODE_PATH }}
          export PORT=${{ secrets.NODE_PORT }}

          npm install
    
          CI=false npm run build

      - name: Build and Push Image
        run: |
          cd website/
          docker build --tag ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/pr-previews/calibrate-app-pr-previews:${{ github.sha }} .
          docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/pr-previews/calibrate-app-pr-previews:${{ github.sha }}
      
      - name: Deploy to Cloud Run
        run: |-
          gcloud run deploy ${{ needs.branch-name.outputs.lowercase }}-calibrate-app-preview \
            --region=${{ secrets.REGION }} \
            --max-instances=10 \
            --timeout=60 \
            --concurrency=10 \
            --image=${{ secrets.REGISTRY_URL }}/${{ secrets.PROJECT_ID }}/pr-previews/calibrate-app-pr-previews:${{ github.sha }} \
            --port=80 \
            --cpu=1000m \
            --memory=256Mi \
            --update-secrets=/etc/env/.env=sta-env-calibrate-app:latest \
            --command="/bin/sh","-c","cat /etc/env/.env >> /etc/environment; nginx -g 'daemon off;'" \
            --allow-unauthenticated

      - name: Get preview service url
        id: preview-url
        run: |
          read service_url < <(gcloud run services describe ${{ needs.branch-name.outputs.lowercase }}-calibrate-app-preview \
            --format='value(status.url)' \
            --platform managed \
            --region ${{ secrets.REGION }})
          echo "::set-output name=url::${service_url}"

  calibrate-app-pr-comment:
    name: calibrate-app-preview-link-comment
    if: needs.check.outputs.run_calibrate_app == 'true'
    needs: [calibrate-app]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'New calibrate app changes available for preview [here](${{ needs.calibrate-app.outputs.url }})'
            })
  