{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\AirQo-frontend\\\\locate\\\\src\\\\views\\\\components\\\\LocationList\\\\LocationsTable.js\";\nimport React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nimport LoadingOverlay from 'react-loading-overlay';\nimport { CSVLink, CSVDownload } from 'react-csv';\nimport { Button } from \"@material-ui/core\"; //import './assets/css/location-registry.css';\n\nimport '../../../assets/css/location-registry.css';\nimport { SearchInput } from \"../SearchInput\";\nimport constants from '../../../config/constants.js';\nimport MaterialTable, { MTablePagination, Paper } from 'material-table';\nimport { configs } from 'eslint-plugin-prettier';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1050\n  },\n  nameContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  avatar: {\n    marginRight: theme.spacing(2)\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  },\n  link: {\n    color: '#3344FF',\n    fontFamily: 'Open Sans'\n  },\n  table: {\n    fontFamily: 'Open Sans'\n  }\n}));\n\nconst LocationsTable = props => {\n  const {\n    className,\n    users,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const [data, setData] = useState([]);\n  const [selectedLocations, setSelectedLocations] = useState([]);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [page, setPage] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [filterInput, setFilterInput] = useState('');\n\n  const handleFilterChange = filter => {\n    const value = filter.target.value || undefined;\n    setFilterInput(value);\n  };\n  /*\r\n  useEffect(() => {\r\n    const GetData = async () => {\r\n      const result = await axios.get('http://127.0.0.1:4000/api/v1/location_registry/locations');\r\n      setData(result.data);\r\n    }\r\n    \r\n    GetData();\r\n    console.log('we did it');    \r\n    console.log(data);\r\n  }, []); */\n\n\n  useEffect(() => {\n    //code to retrieve all locations data\n    setIsLoading(true);\n    axios.get('http://127.0.0.1:4000/api/v1/location_registry/locations' //constants.ALL_LOCATIONS_URI\n    ).then(res => {\n      setIsLoading(false);\n      const ref = res.data;\n      console.log(ref);\n      setData(ref);\n    }).catch(console.log);\n  }, []);\n\n  const handleSelectAll = event => {\n    const {\n      users\n    } = props;\n    let selectedLocations;\n\n    if (event.target.checked) {\n      selectedLocations = users.map(user => user.id);\n    } else {\n      selectedLocations = [];\n    }\n\n    setSelectedLocations(selectedLocations);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedLocations.indexOf(id);\n    let newSelectedLocations = [];\n\n    if (selectedIndex === -1) {\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations, id);\n    } else if (selectedIndex === 0) {\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations.slice(1));\n    } else if (selectedIndex === selectedLocations.length - 1) {\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations.slice(0, selectedIndex), selectedLocations.slice(selectedIndex + 1));\n    }\n\n    setSelectedLocations(newSelectedLocations);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  return React.createElement(LoadingOverlay, {\n    active: isLoading,\n    spinner: true,\n    text: \"Loading Locations...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(MaterialTable, {\n    className: classes.table,\n    title: \"Location Registry\",\n    columns: [{\n      title: 'Reference',\n      field: 'loc_ref',\n      render: rowData => React.createElement(Link, {\n        className: classes.link,\n        to: `/locations/${rowData.loc_ref}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, rowData.loc_ref)\n    }, {\n      title: 'Name',\n      field: 'location_name',\n      cellStyle: {\n        fontFamily: 'Open Sans'\n      }\n    }, {\n      title: 'Mobility',\n      field: 'mobility',\n      cellStyle: {\n        fontFamily: 'Open Sans'\n      }\n    }, {\n      title: 'Latitude',\n      field: 'latitude',\n      cellStyle: {\n        fontFamily: 'Open Sans'\n      }\n    }, {\n      title: 'Longitude',\n      field: 'longitude',\n      cellStyle: {\n        fontFamily: 'Open Sans'\n      }\n    }, {\n      title: 'Country',\n      field: 'country',\n      cellStyle: {\n        fontFamily: 'Open Sans'\n      }\n    }, {\n      title: 'District',\n      field: 'district',\n      cellStyle: {\n        fontFamily: 'Open Sans'\n      }\n    }, {\n      title: 'Subcounty',\n      field: 'subcounty',\n      cellStyle: {\n        fontFamily: 'Open Sans'\n      }\n    }, {\n      title: 'Parish',\n      field: 'parish',\n      cellStyle: {\n        fontFamily: 'Open Sans'\n      }\n    } //{title: 'Birth Place',mfield: 'birthCity', lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },},\n    ],\n    data: data,\n    options: {\n      search: true,\n      exportButton: true,\n      searchFieldAlignment: 'left',\n      showTitle: false,\n      searchFieldStyle: {\n        fontFamily: 'Open Sans',\n        border: '2px solid #7575FF'\n      },\n      headerStyle: {\n        fontFamily: 'Open Sans',\n        fontSize: 16,\n        fontWeight: 600\n      },\n      pageSizeOptions: [10, 25, 50, data.length],\n      pageSize: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  })))));\n};\n\nLocationsTable.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.array.isRequired\n};\nexport default LocationsTable;","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/AirQo-frontend/locate/src/views/components/LocationList/LocationsTable.js"],"names":["React","useState","useEffect","clsx","PropTypes","PerfectScrollbar","axios","Link","makeStyles","Card","CardActions","CardContent","Avatar","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","LoadingOverlay","CSVLink","CSVDownload","Button","SearchInput","constants","MaterialTable","MTablePagination","Paper","configs","useStyles","theme","root","content","padding","inner","minWidth","nameContainer","display","alignItems","avatar","marginRight","spacing","actions","justifyContent","link","color","fontFamily","table","LocationsTable","props","className","users","rest","classes","data","setData","selectedLocations","setSelectedLocations","rowsPerPage","setRowsPerPage","page","setPage","isLoading","setIsLoading","filterInput","setFilterInput","handleFilterChange","filter","value","target","undefined","get","then","res","ref","console","log","catch","handleSelectAll","event","checked","map","user","id","handleSelectOne","selectedIndex","indexOf","newSelectedLocations","concat","slice","length","handlePageChange","handleRowsPerPageChange","title","field","render","rowData","loc_ref","cellStyle","search","exportButton","searchFieldAlignment","showTitle","searchFieldStyle","border","headerStyle","fontSize","fontWeight","pageSizeOptions","pageSize","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport axios from 'axios';\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Avatar,\r\n  Checkbox,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  TablePagination\r\n} from '@material-ui/core';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport {CSVLink, CSVDownload} from 'react-csv';\r\nimport { Button } from \"@material-ui/core\";\r\n//import './assets/css/location-registry.css';\r\nimport '../../../assets/css/location-registry.css';\r\nimport { SearchInput } from \"../SearchInput\";\r\nimport constants from '../../../config/constants.js';\r\n\r\nimport MaterialTable, { MTablePagination, Paper} from 'material-table';\r\nimport { configs } from 'eslint-plugin-prettier';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {},\r\n  content: {\r\n    padding: 0,\r\n  },\r\n  inner: {\r\n    minWidth: 1050\r\n  },\r\n  nameContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  avatar: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  actions: {\r\n    justifyContent: 'flex-end'\r\n  },\r\n  link: {\r\n    color: '#3344FF',\r\n    fontFamily: 'Open Sans'\r\n    },\r\n  table: {\r\n    fontFamily:'Open Sans'\r\n  }\r\n}));\r\n\r\nconst LocationsTable = props => {\r\n  const { className, users, ...rest } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  const [data, setData] = useState([]);   \r\n\r\n  const [selectedLocations, setSelectedLocations] = useState([]);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [page, setPage] = useState(0);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [filterInput, setFilterInput] = useState('');\r\n  const handleFilterChange = filter =>{\r\n    const value = filter.target.value || undefined\r\n    setFilterInput(value);\r\n  }\r\n\r\n \r\n\r\n  /*\r\n  useEffect(() => {\r\n    const GetData = async () => {\r\n      const result = await axios.get('http://127.0.0.1:4000/api/v1/location_registry/locations');\r\n      setData(result.data);\r\n    }\r\n    \r\n    GetData();\r\n    console.log('we did it');    \r\n    console.log(data);\r\n  }, []); */\r\n\r\n  \r\n  useEffect(() => {\r\n    //code to retrieve all locations data\r\n    setIsLoading(true);\r\n    axios.get(\r\n      'http://127.0.0.1:4000/api/v1/location_registry/locations'\r\n      //constants.ALL_LOCATIONS_URI\r\n    )\r\n    .then(\r\n      res=>{\r\n        setIsLoading(false);\r\n        const ref = res.data;\r\n        console.log(ref);\r\n        setData(ref);\r\n\r\n    }).catch(\r\n      console.log\r\n    )\r\n  }, []);\r\n\r\n  const handleSelectAll = event => {\r\n    const { users } = props;\r\n\r\n    let selectedLocations;\r\n\r\n    if (event.target.checked) {\r\n      selectedLocations = users.map(user => user.id);\r\n    } else {\r\n      selectedLocations = [];\r\n    }\r\n\r\n    setSelectedLocations(selectedLocations);\r\n  };\r\n\r\n  const handleSelectOne = (event, id) => {\r\n    const selectedIndex = selectedLocations.indexOf(id);\r\n    let newSelectedLocations = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations.slice(1));\r\n    } else if (selectedIndex === selectedLocations.length - 1) {\r\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelectedLocations = newSelectedLocations.concat(\r\n        selectedLocations.slice(0, selectedIndex),\r\n        selectedLocations.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelectedLocations(newSelectedLocations);\r\n  };\r\n\r\n  const handlePageChange = (event, page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const handleRowsPerPageChange = event => {\r\n    setRowsPerPage(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <LoadingOverlay\r\n      active={isLoading}\r\n      spinner\r\n      text='Loading Locations...'\r\n    >\r\n      {/*\r\n      <div className={classes.row}>\r\n    \r\n        <SearchInput\r\n          className={classes.searchInput}\r\n          placeholder=\"Search location\"\r\n          modifier='material'\r\n          onChange={handleFilterChange}\r\n          value = {filterInput}\r\n        />\r\n      </div> */}\r\n    <Card\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <CardContent className={classes.content}>\r\n        <PerfectScrollbar>\r\n          {/*\r\n                  <TableCell className = {classes.table}><b>Location Ref</b></TableCell>\r\n                  <TableCell className = {classes.table}><b>Location Name</b></TableCell>\r\n                  <TableCell className = {classes.table}><b>Mobility</b></TableCell>\r\n                  <TableCell className = {classes.table}><b>Latitude</b></TableCell>\r\n                  <TableCell className = {classes.table}><b>Longitude</b></TableCell>\r\n                  <TableCell className = {classes.table}><b>Country</b></TableCell>\r\n                  <TableCell className = {classes.table}><b>District</b></TableCell>\r\n                  <TableCell className = {classes.table}><b>Subcounty</b></TableCell>  \r\n                  <TableCell className = {classes.table}><b>Parish</b></TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n              {data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\r\n                return (\r\n                <TableRow >\r\n                  <TableCell> \r\n                    <Link className={classes.link} to={`/locations/${row.loc_ref}`}>{row.loc_ref}</Link>\r\n                  </TableCell>\r\n                  <TableCell className = {classes.table}>{row.location_name}</TableCell>\r\n                  <TableCell className = {classes.table}>{row.mobility}</TableCell>\r\n                  <TableCell className = {classes.table}>{row.latitude}</TableCell>\r\n                  <TableCell className = {classes.table}>{row.longitude}</TableCell>\r\n                  <TableCell className = {classes.table}>{row.country}</TableCell>\r\n                  <TableCell className = {classes.table}>{row.district}</TableCell>\r\n                  <TableCell className = {classes.table}>{row.subcounty}</TableCell>\r\n                  <TableCell className = {classes.table}>{row.parish}</TableCell>\r\n                </TableRow>\r\n                 );  \r\n               })}  \r\n                 \r\n                 \r\n                \r\n                    \r\n              </TableBody>\r\n            </Table>\r\n          </div> */}\r\n          <MaterialTable\r\n            className = {classes.table}\r\n            title=\"Location Registry\"\r\n            columns={[\r\n             { title: 'Reference', \r\n               field: 'loc_ref', \r\n               render: rowData => <Link className={classes.link} to={`/locations/${rowData.loc_ref}`}>{rowData.loc_ref}</Link>\r\n             },\r\n             { title: 'Name', field: 'location_name', cellStyle:{ fontFamily: 'Open Sans'} },\r\n             { title: 'Mobility', field: 'mobility', cellStyle:{ fontFamily: 'Open Sans'} },\r\n             { title: 'Latitude', field: 'latitude', cellStyle:{ fontFamily: 'Open Sans'} },\r\n             { title: 'Longitude', field: 'longitude', cellStyle:{ fontFamily: 'Open Sans'} },\r\n             { title: 'Country', field: 'country', cellStyle:{ fontFamily: 'Open Sans'} },\r\n             { title: 'District', field: 'district', cellStyle:{ fontFamily: 'Open Sans'} },\r\n             { title: 'Subcounty', field: 'subcounty', cellStyle:{ fontFamily: 'Open Sans'} },\r\n             { title: 'Parish', field: 'parish', cellStyle:{ fontFamily: 'Open Sans'} },\r\n             //{title: 'Birth Place',mfield: 'birthCity', lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' },},\r\n      ]}   \r\n      data = {data}  \r\n      options={{\r\n        search: true,\r\n        exportButton: true,\r\n        searchFieldAlignment: 'left',\r\n        showTitle: false,\r\n        searchFieldStyle: {\r\n          fontFamily: 'Open Sans',\r\n          border: '2px solid #7575FF',\r\n        },\r\n        headerStyle: {\r\n          fontFamily: 'Open Sans',\r\n          fontSize: 16,\r\n          fontWeight: 600\r\n        },\r\n        pageSizeOptions : [10, 25, 50, data.length],\r\n        pageSize: 10\r\n      }}\r\n    />\r\n        </PerfectScrollbar> \r\n        {/*\r\n        <br/>\r\n        <CSVLink data={data} \r\n         align = \"center\">\r\n        <Button \r\n        className={classes.exportButton}\r\n        variant=\"contained\" \r\n        color=\"primary\"\r\n        align = \"centre\"\r\n        >Export as CSV\r\n        </Button>\r\n              </CSVLink>*/}\r\n      </CardContent> \r\n      {/*<CardActions className = {classes.actions}>*/}\r\n      {/*\r\n      <CardContent className={classes.content}>\r\n      <br/>\r\n      <CSVLink \r\n        data={data} \r\n        filename=\"locations_data.csv\"\r\n        align = \"center\">\r\n        <Button \r\n          className={classes.exportButton}\r\n          variant=\"contained\" \r\n          color=\"primary\"\r\n          align = \"centre\"\r\n        >Export to CSV\r\n        </Button>\r\n      </CSVLink>\r\n      </CardContent>\r\n      \r\n      {/*\r\n        <TablePagination \r\n          component=\"div\"\r\n          count={data.length}\r\n          onChangePage={handlePageChange}\r\n          onChangeRowsPerPage={handleRowsPerPageChange}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n        /> \r\n\r\n      {/*</CardActions>*/}\r\n      </Card>\r\n\r\n    </LoadingOverlay>\r\n  );\r\n};\r\n\r\nLocationsTable.propTypes = {\r\n  className: PropTypes.string,\r\n  users: PropTypes.array.isRequired\r\n};\r\n\r\nexport default LocationsTable;\r\n"]},"metadata":{},"sourceType":"module"}