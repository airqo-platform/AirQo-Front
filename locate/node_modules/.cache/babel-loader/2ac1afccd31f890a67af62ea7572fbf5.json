{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\AirQo-frontend\\\\locate\\\\src\\\\views\\\\components\\\\DataDisplay\\\\DeviceManagement.js\";\nimport React, { useState, useEffect } from \"react\"; // react plugin for creating charts\n\nimport ChartistGraph from \"react-chartist\"; // @material-ui/core\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Icon from \"@material-ui/core/Icon\"; // @material-ui/icons\n\nimport DevicesIcon from \"@material-ui/icons/Devices\";\nimport ReportProblem from \"@material-ui/icons/ReportProblem\";\nimport BatteryFullIcon from \"@material-ui/icons/BatteryFull\";\nimport AccessTime from \"@material-ui/icons/AccessTime\";\nimport BugReport from \"@material-ui/icons/BugReport\";\nimport Code from \"@material-ui/icons/Code\";\nimport Cloud from \"@material-ui/icons/Cloud\";\nimport RestoreIcon from \"@material-ui/icons/Restore\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport PowerIcon from \"@material-ui/icons/Power\";\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\nimport ScheduleIcon from \"@material-ui/icons/Schedule\";\nimport TasksWithoutEdits from \"../Tasks/TasksWithoutEdits\"; // core components\n\nimport GridItem from \"../Grid/GridItem.js\";\nimport GridContainer from \"../Grid/GridContainer.js\";\nimport Table from \"../Table/Table.js\";\nimport Tasks from \"../Tasks/Tasks.js\";\nimport CustomTabs from \"../CustomTabs/CustomTabs\";\nimport Card from \"../Card/Card.js\";\nimport CardHeader from \"../Card/CardHeader.js\";\nimport CardIcon from \"../Card/CardIcon.js\";\nimport CardBody from \"../Card/CardBody.js\";\nimport CardFooter from \"../Card/CardFooter.js\";\nimport Map from \"./Map/Map\";\nimport { bugs, website, server } from \"../../variables/general.js\";\nimport { dailySalesChart, emailsSubscriptionChart, completedTasksChart, OnlineStatusChart } from \"../../variables/charts.js\";\nimport styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\nimport constants from \"../../../config/constants\";\nimport axios from \"axios\";\nimport palette from \"../../../assets/theme/palette\";\nimport { Line, Bar, Pie } from \"react-chartjs-2\";\nconst useStyles = makeStyles(styles);\nexport default function DeviceManagement() {\n  const [inActiveDevices, setInActiveDevices] = useState([]);\n  const [inActiveDevicesCount, setInActiveDevicesCount] = useState(0);\n  useEffect(() => {\n    axios.get(constants.GET_LATEST_OFFLINE_DEVICES).then(({\n      data\n    }) => {\n      console.log(data);\n      let devices = data.map(x => [x[\"name\"], x[\"time_offline\"], x[\"mobility\"], x[\"power\"]]);\n      setInActiveDevices(devices.slice(2, 7));\n      setInActiveDevicesCount(data.length);\n    });\n  }, []);\n  const [worstPerformingDevicesInTwentyFourHours, setWorstPerformingDevicesInTwentyFourHours] = useState([]);\n  const [worstPerformingDevicesAllTime, setWorstPerformingDevicesAllTime] = useState([]);\n  const [worstPerformingDevicesInTwentyEightDays, setWorstPerformingDevicesInTwentyEightDays] = useState([]);\n  const [worstPerformingDevicesInTwelveMonths, setWorstPerformingInTwelveMonths] = useState([]);\n  const [worstPerformingDevicesInSevenDays, setWorstPerformingDevicesInSevenDays] = useState([]);\n  useEffect(() => {\n    axios.get(constants.GET_NETWORK_WORST_PERFORMING_DEVICES).then(({\n      data\n    }) => {\n      console.log(data);\n      let twenty_four_data = data[\"24 hours\"];\n      let all_time_data = data[\"all time\"];\n      let seven_days_data = data[\"7 days\"];\n      let twenty_eight_days_data = data[\"28 days\"];\n      let twelve_months_data = data[\"12 months\"];\n      let devicesSevenDays = seven_days_data.map(x => [x[\"device_channel_id\"], x[\"device_uptime_in_percentage\"], x[\"device_downtime_in_percentage\"]]);\n      setWorstPerformingDevicesInSevenDays(devicesSevenDays.slice(0, 5));\n      let devices_all_time = all_time_data.map(x => [x[\"device_channel_id\"], x[\"device_uptime_in_percentage\"], x[\"device_downtime_in_percentage\"]]);\n      setWorstPerformingDevicesAllTime(devices_all_time.slice(0, 5));\n      let devicesTwentyFourHour = twenty_four_data.map(x => [x[\"device_channel_id\"], x[\"device_uptime_in_percentage\"], x[\"device_downtime_in_percentage\"]]);\n      setWorstPerformingDevicesInTwentyFourHours(devicesTwentyFourHour.slice(0, 5));\n      let devicesTwentyEightDays = twenty_eight_days_data.map(x => [x[\"device_channel_id\"], x[\"device_uptime_in_percentage\"], x[\"device_downtime_in_percentage\"]]);\n      setWorstPerformingDevicesInTwentyEightDays(devicesTwentyEightDays.slice(0, 5));\n      let devicesTwelveMonths = twelve_months_data.map(x => [x[\"device_channel_id\"], x[\"device_uptime_in_percentage\"], x[\"device_downtime_in_percentage\"]]);\n      setWorstPerformingInTwelveMonths(devicesTwelveMonths.slice(0, 5));\n    });\n  }, []);\n  const [bestPerformingDevicesInTwentyFourHours, setBestPerformingDevicesInTwentyFourHours] = useState([]);\n  const [bestPerformingDevicesAllTime, setBestPerformingDevicesAllTime] = useState([]);\n  const [bestPerformingDevicesInTwentyEightDays, setBestPerformingDevicesInTwentyEightDays] = useState([]);\n  const [bestPerformingDevicesInTwelveMonths, setBestPerformingInTwelveMonths] = useState([]);\n  const [bestPerformingDevicesInSevenDays, setBestPerformingDevicesInSevenDays] = useState([]);\n  useEffect(() => {\n    axios.get(constants.GET_NETWORK_BEST_PERFORMING_DEVICES).then(({\n      data\n    }) => {\n      console.log(data);\n      let twenty_four_data = data[\"24 hours\"];\n      let all_time_data = data[\"all time\"];\n      let seven_days_data = data[\"7 days\"];\n      let twenty_eight_days_data = data[\"28 days\"];\n      let twelve_months_data = data[\"12 months\"];\n      let devicesSevenDays = seven_days_data.map(x => [x[\"device_channel_id\"], x[\"device_uptime_in_percentage\"], x[\"device_downtime_in_percentage\"]]);\n      setBestPerformingDevicesInSevenDays(devicesSevenDays.slice(0, 5));\n      let devices_all_time = all_time_data.map(x => [x[\"device_channel_id\"], x[\"device_uptime_in_percentage\"], x[\"device_downtime_in_percentage\"]]);\n      setBestPerformingDevicesAllTime(devices_all_time.slice(0, 5));\n      let devicesTwentyFourHour = twenty_four_data.map(x => [x[\"device_channel_id\"], x[\"device_uptime_in_percentage\"], x[\"device_downtime_in_percentage\"]]);\n      setBestPerformingDevicesInTwentyFourHours(devicesTwentyFourHour.slice(0, 5));\n      let devicesTwentyEightDays = twenty_eight_days_data.map(x => [x[\"device_channel_id\"], x[\"device_uptime_in_percentage\"], x[\"device_downtime_in_percentage\"]]);\n      setBestPerformingDevicesInTwentyEightDays(devicesTwentyEightDays.slice(0, 5));\n      let devicesTwelveMonths = twelve_months_data.map(x => [x[\"device_channel_id\"], x[\"device_uptime_in_percentage\"], x[\"device_downtime_in_percentage\"]]);\n      setBestPerformingInTwelveMonths(devicesTwelveMonths.slice(0, 5));\n    });\n  }, []);\n  const [onlineStatusUpdateTime, setOnlineStatusUpdateTime] = useState();\n  const [onlineStatusChart, setOnlineStatusChart] = useState({\n    data: {},\n    options: {}\n  });\n  const [deviceStatusValues, setDeviceStatusValues] = useState([]);\n  useEffect(() => {\n    axios.get(constants.GET_DEVICE_STATUS_FOR_PIECHART_DISPLAY).then(({\n      data\n    }) => {\n      console.log(\"data values\");\n      console.log(data);\n      console.log(\"offline:\" + data[\"data\"][\"offline_devices_percentage\"]);\n      console.log(\"online:\" + data[\"data\"][\"online_devices_percentage\"]);\n      setDeviceStatusValues([data[\"data\"][\"offline_devices_percentage\"], data[\"data\"][\"online_devices_percentage\"]]);\n      let onlineStatusChartData = {\n        data: {\n          series: [data[\"data\"][\"offline_devices_percentage\"], data[\"data\"][\"online_devices_percentage\"]] //labels: ['Offline', 'Online']\n\n        },\n        options: {\n          donut: true,\n          donutWidth: 60,\n          donutSolid: true,\n          startAngle: 270,\n          showLabel: true\n        }\n      };\n      setOnlineStatusChart(onlineStatusChartData);\n      setOnlineStatusUpdateTime(data[\"data\"][\"created_at\"]);\n      console.log(onlineStatusChartData);\n    });\n  }, []); //set states for storing device status\n\n  const [deviceStatusSummary, setStatusSummary] = useState();\n  const [noOfDevices, setNoOfDevices] = useState(0);\n  const [solarPowered, setSolarPowered] = useState(0);\n  const [batteryPowered, setBatteryPowered] = useState(0);\n  const [mainPowered, setMainPowered] = useState(0);\n  const [noDueMaintenance, setNoDueMaintenance] = useState(0);\n  const [noOverDueMaintenance, setNoOverDueMaintenance] = useState(0); //const [noOfDevicesTS, setNoOfDevicesTS] = useState(0); //TS= ThinkSpeak\n\n  const classes = useStyles();\n  useEffect(() => {\n    // get total number of devices on the network\n    axios.get(constants.GET_DEVICE_STATUS_SUMMARY).then(({\n      data\n    }) => {\n      //console.log(data[0].loc_power_suppy);\n      let no_devices = 0;\n      data.map(item => {\n        no_devices++;\n      });\n      setStatusSummary(data);\n      setNoOfDevices(no_devices);\n    }); // get total number of devices on solar power or main power\n\n    axios.get(constants.GET_DEVICE_POWER_TYPE).then(({\n      data\n    }) => {\n      //console.log(data[0].loc_power_suppy);\n      let no_solar = 0,\n          no_main = 0,\n          no_battery = 0;\n      data.map(item => {\n        if (item.power == \"Solar\") {\n          no_solar = no_solar + 1;\n        }\n\n        if (item.power == \"Mains\") {\n          no_main = no_main + 1;\n        }\n\n        if (item.power == \"Battery\") {\n          no_battery = no_battery + 1;\n        }\n      });\n      setSolarPowered(no_solar);\n      setMainPowered(no_main);\n      setBatteryPowered(no_battery);\n    }); // get number of devices due for maintenance,\n    // look for the nextMaintenance field in devices collection\n    // device is due for maintenance, 1 day, 1 week to nextMaintenance date\n\n    axios.get(constants.GET_DEVICE_STATUS_SUMMARY).then(({\n      data\n    }) => {\n      let due_maintenance = 0;\n      let overdue_maintenance = 0;\n      data.map(item => {\n        let nextMaintenance = item.nextMaintenance; // next maintenance === \"\" assume overdue for maintenance\n\n        if (nextMaintenance == \"\") {\n          overdue_maintenance = overdue_maintenance + 1;\n        } else {\n          let nextMain = new Date(nextMaintenance);\n          let current_date = new Date();\n          let difference_in_time = nextMain.getTime() - current_date.getTime();\n          let difference_in_days = difference_in_time / (1000 * 3600 * 24);\n          console.log(\"Next: \" + nextMain, \" Current: \" + current_date, \" days: \" + difference_in_days); // 1. logic for overdue maintenance goes here\n\n          if (difference_in_days <= 0) {\n            // took two months without maintenance activity\n            overdue_maintenance = overdue_maintenance + 1;\n          } // 1. logic for due maintenance goes here\n          // 2 weeks to maintenance date\n\n\n          if (difference_in_days > 0 && difference_in_days < 16) {\n            due_maintenance = due_maintenance + 1;\n          }\n        }\n      });\n      setNoDueMaintenance(due_maintenance);\n      setNoOverDueMaintenance(overdue_maintenance);\n    }); //axios.get(constants.GET_TOTAL_DEVICES).then(({ data }) => {\n    // getting total number of devices directly from thinkspeak\n    //console.log(data.count);\n    // setNoOfDevicesTS(data.count);\n    //});\n  }, []);\n  const [networkUptime, setNetworkUptime] = useState([]);\n  useEffect(() => {\n    axios.get(constants.GET_NETWORK_UPTIME).then(({\n      data\n    }) => {\n      console.log(data);\n      setNetworkUptime(data);\n    });\n  }, []);\n  const uptimeData = {\n    labels: networkUptime.uptime_labels,\n    datasets: [{\n      label: \"Network Uptime\",\n      data: networkUptime.uptime_values,\n      fill: false,\n      borderColor: palette.primary.main,\n      backgroundColor: \"#BCBD22\"\n    }]\n  };\n  const options_main = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: false,\n    legend: {\n      display: false\n    },\n    cornerRadius: 0,\n    tooltips: {\n      enabled: true,\n      mode: \"index\",\n      intersect: false,\n      borderWidth: 1,\n      borderColor: palette.divider,\n      backgroundColor: palette.white,\n      titleFontColor: palette.text.primary,\n      bodyFontColor: palette.text.secondary,\n      footerFontColor: palette.text.secondary\n    },\n    layout: {\n      padding: 0\n    },\n    scales: {\n      xAxes: [{\n        barThickness: 35,\n        //maxBarThickness: 10,\n        barPercentage: 1,\n        //categoryPercentage: 0.5,\n        ticks: {\n          fontColor: palette.text.secondary\n        },\n        gridLines: {\n          display: false,\n          drawBorder: false\n        },\n        scaleLabel: {\n          display: true,\n          labelString: \"Time Periods\"\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          fontColor: palette.text.secondary,\n          beginAtZero: true,\n          min: 0\n        },\n        gridLines: {\n          borderDash: [2],\n          borderDashOffset: [2],\n          color: palette.divider,\n          drawBorder: false,\n          zeroLineBorderDash: [2],\n          zeroLineBorderDashOffset: [2],\n          zeroLineColor: palette.divider\n        },\n        scaleLabel: {\n          display: true,\n          labelString: \"Uptime(%)\"\n        }\n      }]\n    }\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439\n    },\n    __self: this\n  }, React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    stats: true,\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444\n    },\n    __self: this\n  }, React.createElement(DevicesIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445\n    },\n    __self: this\n  })), React.createElement(\"h3\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448\n    },\n    __self: this\n  }, noOfDevices)), React.createElement(CardFooter, {\n    stats: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: classes.cardCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451\n    },\n    __self: this\n  }, \"Devices on the network\")))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    stats: true,\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 458\n    },\n    __self: this\n  }, React.createElement(RestoreIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459\n    },\n    __self: this\n  })), React.createElement(\"h3\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462\n    },\n    __self: this\n  }, noDueMaintenance)), React.createElement(CardFooter, {\n    stats: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 464\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: classes.cardCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465\n    },\n    __self: this\n  }, \"Due for maintenance\")))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    stats: true,\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472\n    },\n    __self: this\n  }, React.createElement(ReportProblem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473\n    },\n    __self: this\n  })), React.createElement(\"h3\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476\n    },\n    __self: this\n  }, noOverDueMaintenance)), React.createElement(CardFooter, {\n    stats: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478\n    },\n    __self: this\n  }, \" \", React.createElement(\"p\", {\n    className: classes.cardCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480\n    },\n    __self: this\n  }, \"Overdue for maintenance\")))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    stats: true,\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487\n    },\n    __self: this\n  }, React.createElement(WbSunnyIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488\n    },\n    __self: this\n  })), React.createElement(\"h3\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491\n    },\n    __self: this\n  }, \" \", solarPowered)), React.createElement(CardFooter, {\n    stats: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: classes.cardCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494\n    },\n    __self: this\n  }, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496\n    },\n    __self: this\n  }), \"Solar powered\")))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    stats: true,\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505\n    },\n    __self: this\n  }, React.createElement(BatteryFullIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506\n    },\n    __self: this\n  })), React.createElement(\"h3\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509\n    },\n    __self: this\n  }, \" \", batteryPowered)), React.createElement(CardFooter, {\n    stats: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511\n    },\n    __self: this\n  }, \" \", React.createElement(\"p\", {\n    className: classes.cardCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513\n    },\n    __self: this\n  }, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515\n    },\n    __self: this\n  }), \"Battery powered\")))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 2,\n    md: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    stats: true,\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524\n    },\n    __self: this\n  }, React.createElement(PowerIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525\n    },\n    __self: this\n  })), React.createElement(\"h3\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527\n    },\n    __self: this\n  }, mainPowered)), React.createElement(CardFooter, {\n    stats: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529\n    },\n    __self: this\n  }, \" \", React.createElement(\"p\", {\n    className: classes.cardCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531\n    },\n    __self: this\n  }, \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533\n    },\n    __self: this\n  }), \"Mains Powered\"))))), React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 542\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.mapContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544\n    },\n    __self: this\n  }, React.createElement(Map, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 545\n    },\n    __self: this\n  }))))), React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 554\n    },\n    __self: this\n  }, React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 558\n    },\n    __self: this\n  }, React.createElement(Map, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 559\n    },\n    __self: this\n  })))))), React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 570\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitleWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574\n    },\n    __self: this\n  }, \"Network Uptime\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 577\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.chartContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578\n    },\n    __self: this\n  }, React.createElement(Bar, {\n    height: 250,\n    data: uptimeData,\n    options: options_main,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 579\n    },\n    __self: this\n  }))), React.createElement(CardFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 583\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.stats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584\n    },\n    __self: this\n  }, React.createElement(AccessTime, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585\n    },\n    __self: this\n  }), \" Last updated \", networkUptime.created_at)))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 593\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 594\n    },\n    __self: this\n  }, \"Online Status\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596\n    },\n    __self: this\n  }, React.createElement(Pie, {\n    id: \"pie\",\n    height: 200,\n    data: {\n      labels: [\"Offline\", \"Online\"],\n      datasets: [{\n        label: \"Device Status\",\n        data: deviceStatusValues,\n        backgroundColor: [\"#BCBD22\", \"#17BECF\"]\n      }]\n    },\n    options: {\n      tooltips: {\n        callbacks: {\n          label: function (tooltipItem, data) {\n            var allData = data.datasets[tooltipItem.datasetIndex].data;\n            var tooltipLabel = data.labels[tooltipItem.index];\n            var tooltipData = allData[tooltipItem.index];\n            var total = 0;\n\n            for (var i in allData) {\n              total += allData[i];\n            }\n\n            var tooltipPercentage = Math.round(tooltipData / total * 100);\n            return tooltipLabel + \": \" + tooltipPercentage + \"%\";\n          }\n        }\n      },\n      maintainAspectRatio: true,\n      responsive: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597\n    },\n    __self: this\n  })), React.createElement(CardFooter, {\n    chart: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 635\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.stats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636\n    },\n    __self: this\n  }, React.createElement(AccessTime, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637\n    },\n    __self: this\n  }), \" Last updated on \", onlineStatusUpdateTime)))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 645\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitleWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646\n    },\n    __self: this\n  }, \"Offline Devices(\", inActiveDevicesCount, \")\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650\n    },\n    __self: this\n  }, React.createElement(Table, {\n    tableHeaderColor: \"primary\",\n    tableHead: [\"Device\", \"Time Offline\", \"Type\", \"Power Supply\"],\n    tableData: inActiveDevices,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651\n    },\n    __self: this\n  }))))), React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 661\n    },\n    __self: this\n  }, React.createElement(CustomTabs, {\n    title: \"Incident Report:\",\n    headerColor: \"primary\",\n    tabs: [{\n      tabName: \"Issues\",\n      tabIcon: BugReport,\n      tabContent: React.createElement(TasksWithoutEdits, {\n        checkedIndexes: [0],\n        tasksIndexes: [0, 1, 2, 3],\n        tasks: bugs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670\n        },\n        __self: this\n      })\n    }, {\n      tabName: \"Schedule\",\n      tabIcon: ScheduleIcon,\n      tabContent: React.createElement(TasksWithoutEdits, {\n        checkedIndexes: [0],\n        tasksIndexes: [0, 1],\n        tasks: website,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 681\n        },\n        __self: this\n      })\n    }, {\n      tabName: \"Alerts\",\n      tabIcon: NotificationsNoneIcon,\n      tabContent: React.createElement(TasksWithoutEdits, {\n        checkedIndexes: [0],\n        tasksIndexes: [0],\n        tasks: server,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 692\n        },\n        __self: this\n      })\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 662\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 3,\n    lg: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 705\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitleWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 706\n    },\n    __self: this\n  }, \"Leaderboard\"), React.createElement(\"p\", {\n    className: classes.cardCategoryWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 707\n    },\n    __self: this\n  }, \"Best performing 5 devices on network in the past 28 days\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 711\n    },\n    __self: this\n  }, React.createElement(Table, {\n    tableHeaderColor: \"primary\",\n    tableHead: [\"Device Channel\", \"Uptime(%)\", \"Downtime(%)\"],\n    tableData: bestPerformingDevicesInTwentyEightDays,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 712\n    },\n    __self: this\n  })))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 3,\n    lg: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 720\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 721\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 722\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitleWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 723\n    },\n    __self: this\n  }, \"Leaderboard\"), React.createElement(\"p\", {\n    className: classes.cardCategoryWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 724\n    },\n    __self: this\n  }, \"Worst performing 5 devices on network in the past 28 days\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 728\n    },\n    __self: this\n  }, React.createElement(Table, {\n    tableHeaderColor: \"primary\",\n    tableHead: [\"Device Channel\", \"Uptime(%)\", \"Downtime(%)\"],\n    tableData: worstPerformingDevicesInTwentyEightDays,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 729\n    },\n    __self: this\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/AirQo-frontend/locate/src/views/components/DataDisplay/DeviceManagement.js"],"names":["React","useState","useEffect","ChartistGraph","makeStyles","Icon","DevicesIcon","ReportProblem","BatteryFullIcon","AccessTime","BugReport","Code","Cloud","RestoreIcon","WbSunnyIcon","PowerIcon","NotificationsNoneIcon","ScheduleIcon","TasksWithoutEdits","GridItem","GridContainer","Table","Tasks","CustomTabs","Card","CardHeader","CardIcon","CardBody","CardFooter","Map","bugs","website","server","dailySalesChart","emailsSubscriptionChart","completedTasksChart","OnlineStatusChart","styles","constants","axios","palette","Line","Bar","Pie","useStyles","DeviceManagement","inActiveDevices","setInActiveDevices","inActiveDevicesCount","setInActiveDevicesCount","get","GET_LATEST_OFFLINE_DEVICES","then","data","console","log","devices","map","x","slice","length","worstPerformingDevicesInTwentyFourHours","setWorstPerformingDevicesInTwentyFourHours","worstPerformingDevicesAllTime","setWorstPerformingDevicesAllTime","worstPerformingDevicesInTwentyEightDays","setWorstPerformingDevicesInTwentyEightDays","worstPerformingDevicesInTwelveMonths","setWorstPerformingInTwelveMonths","worstPerformingDevicesInSevenDays","setWorstPerformingDevicesInSevenDays","GET_NETWORK_WORST_PERFORMING_DEVICES","twenty_four_data","all_time_data","seven_days_data","twenty_eight_days_data","twelve_months_data","devicesSevenDays","devices_all_time","devicesTwentyFourHour","devicesTwentyEightDays","devicesTwelveMonths","bestPerformingDevicesInTwentyFourHours","setBestPerformingDevicesInTwentyFourHours","bestPerformingDevicesAllTime","setBestPerformingDevicesAllTime","bestPerformingDevicesInTwentyEightDays","setBestPerformingDevicesInTwentyEightDays","bestPerformingDevicesInTwelveMonths","setBestPerformingInTwelveMonths","bestPerformingDevicesInSevenDays","setBestPerformingDevicesInSevenDays","GET_NETWORK_BEST_PERFORMING_DEVICES","onlineStatusUpdateTime","setOnlineStatusUpdateTime","onlineStatusChart","setOnlineStatusChart","options","deviceStatusValues","setDeviceStatusValues","GET_DEVICE_STATUS_FOR_PIECHART_DISPLAY","onlineStatusChartData","series","donut","donutWidth","donutSolid","startAngle","showLabel","deviceStatusSummary","setStatusSummary","noOfDevices","setNoOfDevices","solarPowered","setSolarPowered","batteryPowered","setBatteryPowered","mainPowered","setMainPowered","noDueMaintenance","setNoDueMaintenance","noOverDueMaintenance","setNoOverDueMaintenance","classes","GET_DEVICE_STATUS_SUMMARY","no_devices","item","GET_DEVICE_POWER_TYPE","no_solar","no_main","no_battery","power","due_maintenance","overdue_maintenance","nextMaintenance","nextMain","Date","current_date","difference_in_time","getTime","difference_in_days","networkUptime","setNetworkUptime","GET_NETWORK_UPTIME","uptimeData","labels","uptime_labels","datasets","label","uptime_values","fill","borderColor","primary","main","backgroundColor","options_main","responsive","maintainAspectRatio","animation","legend","display","cornerRadius","tooltips","enabled","mode","intersect","borderWidth","divider","white","titleFontColor","text","bodyFontColor","secondary","footerFontColor","layout","padding","scales","xAxes","barThickness","barPercentage","ticks","fontColor","gridLines","drawBorder","scaleLabel","labelString","yAxes","beginAtZero","min","borderDash","borderDashOffset","color","zeroLineBorderDash","zeroLineBorderDashOffset","zeroLineColor","cardTitle","cardCategory","mapContainer","cardTitleWhite","chartContainer","stats","created_at","callbacks","tooltipItem","allData","datasetIndex","tooltipLabel","index","tooltipData","total","i","tooltipPercentage","Math","round","tabName","tabIcon","tabContent","cardCategoryWhite"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,aAAP,MAA0B,gBAA1B,C,CACA;;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,qBAAP,MAAkC,sCAAlC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,iBAAP,MAA8B,4BAA9B,C,CACA;;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AAEA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,MAAxB,QAAsC,4BAAtC;AAEA,SACEC,eADF,EAEEC,uBAFF,EAGEC,mBAHF,EAIEC,iBAJF,QAKO,2BALP;AAOA,OAAOC,MAAP,MAAmB,6DAAnB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,QAA+B,iBAA/B;AAEA,MAAMC,SAAS,GAAGxC,UAAU,CAACiC,MAAD,CAA5B;AAEA,eAAe,SAASQ,gBAAT,GAA4B;AACzC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwC9C,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAC+C,oBAAD,EAAuBC,uBAAvB,IAAkDhD,QAAQ,CAAC,CAAD,CAAhE;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdqC,IAAAA,KAAK,CAACW,GAAN,CAAUZ,SAAS,CAACa,0BAApB,EAAgDC,IAAhD,CAAqD,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACjEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,UAAIG,OAAO,GAAGH,IAAI,CAACI,GAAL,CAAUC,CAAD,IAAO,CAC5BA,CAAC,CAAC,MAAD,CAD2B,EAE5BA,CAAC,CAAC,cAAD,CAF2B,EAG5BA,CAAC,CAAC,UAAD,CAH2B,EAI5BA,CAAC,CAAC,OAAD,CAJ2B,CAAhB,CAAd;AAMAX,MAAAA,kBAAkB,CAACS,OAAO,CAACG,KAAR,CAAc,CAAd,EAAiB,CAAjB,CAAD,CAAlB;AACAV,MAAAA,uBAAuB,CAACI,IAAI,CAACO,MAAN,CAAvB;AACD,KAXD;AAYD,GAbQ,EAaN,EAbM,CAAT;AAeA,QAAM,CACJC,uCADI,EAEJC,0CAFI,IAGF7D,QAAQ,CAAC,EAAD,CAHZ;AAIA,QAAM,CACJ8D,6BADI,EAEJC,gCAFI,IAGF/D,QAAQ,CAAC,EAAD,CAHZ;AAIA,QAAM,CACJgE,uCADI,EAEJC,0CAFI,IAGFjE,QAAQ,CAAC,EAAD,CAHZ;AAIA,QAAM,CACJkE,oCADI,EAEJC,gCAFI,IAGFnE,QAAQ,CAAC,EAAD,CAHZ;AAIA,QAAM,CACJoE,iCADI,EAEJC,oCAFI,IAGFrE,QAAQ,CAAC,EAAD,CAHZ;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACdqC,IAAAA,KAAK,CACFW,GADH,CACOZ,SAAS,CAACiC,oCADjB,EAEGnB,IAFH,CAEQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAImB,gBAAgB,GAAGnB,IAAI,CAAC,UAAD,CAA3B;AACA,UAAIoB,aAAa,GAAGpB,IAAI,CAAC,UAAD,CAAxB;AACA,UAAIqB,eAAe,GAAGrB,IAAI,CAAC,QAAD,CAA1B;AACA,UAAIsB,sBAAsB,GAAGtB,IAAI,CAAC,SAAD,CAAjC;AACA,UAAIuB,kBAAkB,GAAGvB,IAAI,CAAC,WAAD,CAA7B;AAEA,UAAIwB,gBAAgB,GAAGH,eAAe,CAACjB,GAAhB,CAAqBC,CAAD,IAAO,CAChDA,CAAC,CAAC,mBAAD,CAD+C,EAEhDA,CAAC,CAAC,6BAAD,CAF+C,EAGhDA,CAAC,CAAC,+BAAD,CAH+C,CAA3B,CAAvB;AAKAY,MAAAA,oCAAoC,CAACO,gBAAgB,CAAClB,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAD,CAApC;AAEA,UAAImB,gBAAgB,GAAGL,aAAa,CAAChB,GAAd,CAAmBC,CAAD,IAAO,CAC9CA,CAAC,CAAC,mBAAD,CAD6C,EAE9CA,CAAC,CAAC,6BAAD,CAF6C,EAG9CA,CAAC,CAAC,+BAAD,CAH6C,CAAzB,CAAvB;AAKAM,MAAAA,gCAAgC,CAACc,gBAAgB,CAACnB,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAD,CAAhC;AAEA,UAAIoB,qBAAqB,GAAGP,gBAAgB,CAACf,GAAjB,CAAsBC,CAAD,IAAO,CACtDA,CAAC,CAAC,mBAAD,CADqD,EAEtDA,CAAC,CAAC,6BAAD,CAFqD,EAGtDA,CAAC,CAAC,+BAAD,CAHqD,CAA5B,CAA5B;AAKAI,MAAAA,0CAA0C,CACxCiB,qBAAqB,CAACpB,KAAtB,CAA4B,CAA5B,EAA+B,CAA/B,CADwC,CAA1C;AAIA,UAAIqB,sBAAsB,GAAGL,sBAAsB,CAAClB,GAAvB,CAA4BC,CAAD,IAAO,CAC7DA,CAAC,CAAC,mBAAD,CAD4D,EAE7DA,CAAC,CAAC,6BAAD,CAF4D,EAG7DA,CAAC,CAAC,+BAAD,CAH4D,CAAlC,CAA7B;AAKAQ,MAAAA,0CAA0C,CACxCc,sBAAsB,CAACrB,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,CADwC,CAA1C;AAIA,UAAIsB,mBAAmB,GAAGL,kBAAkB,CAACnB,GAAnB,CAAwBC,CAAD,IAAO,CACtDA,CAAC,CAAC,mBAAD,CADqD,EAEtDA,CAAC,CAAC,6BAAD,CAFqD,EAGtDA,CAAC,CAAC,+BAAD,CAHqD,CAA9B,CAA1B;AAKAU,MAAAA,gCAAgC,CAACa,mBAAmB,CAACtB,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAD,CAAhC;AACD,KAhDH;AAiDD,GAlDQ,EAkDN,EAlDM,CAAT;AAoDA,QAAM,CACJuB,sCADI,EAEJC,yCAFI,IAGFlF,QAAQ,CAAC,EAAD,CAHZ;AAIA,QAAM,CACJmF,4BADI,EAEJC,+BAFI,IAGFpF,QAAQ,CAAC,EAAD,CAHZ;AAIA,QAAM,CACJqF,sCADI,EAEJC,yCAFI,IAGFtF,QAAQ,CAAC,EAAD,CAHZ;AAIA,QAAM,CACJuF,mCADI,EAEJC,+BAFI,IAGFxF,QAAQ,CAAC,EAAD,CAHZ;AAIA,QAAM,CACJyF,gCADI,EAEJC,mCAFI,IAGF1F,QAAQ,CAAC,EAAD,CAHZ;AAKAC,EAAAA,SAAS,CAAC,MAAM;AACdqC,IAAAA,KAAK,CACFW,GADH,CACOZ,SAAS,CAACsD,mCADjB,EAEGxC,IAFH,CAEQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAImB,gBAAgB,GAAGnB,IAAI,CAAC,UAAD,CAA3B;AACA,UAAIoB,aAAa,GAAGpB,IAAI,CAAC,UAAD,CAAxB;AACA,UAAIqB,eAAe,GAAGrB,IAAI,CAAC,QAAD,CAA1B;AACA,UAAIsB,sBAAsB,GAAGtB,IAAI,CAAC,SAAD,CAAjC;AACA,UAAIuB,kBAAkB,GAAGvB,IAAI,CAAC,WAAD,CAA7B;AAEA,UAAIwB,gBAAgB,GAAGH,eAAe,CAACjB,GAAhB,CAAqBC,CAAD,IAAO,CAChDA,CAAC,CAAC,mBAAD,CAD+C,EAEhDA,CAAC,CAAC,6BAAD,CAF+C,EAGhDA,CAAC,CAAC,+BAAD,CAH+C,CAA3B,CAAvB;AAKAiC,MAAAA,mCAAmC,CAACd,gBAAgB,CAAClB,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAD,CAAnC;AAEA,UAAImB,gBAAgB,GAAGL,aAAa,CAAChB,GAAd,CAAmBC,CAAD,IAAO,CAC9CA,CAAC,CAAC,mBAAD,CAD6C,EAE9CA,CAAC,CAAC,6BAAD,CAF6C,EAG9CA,CAAC,CAAC,+BAAD,CAH6C,CAAzB,CAAvB;AAKA2B,MAAAA,+BAA+B,CAACP,gBAAgB,CAACnB,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAD,CAA/B;AAEA,UAAIoB,qBAAqB,GAAGP,gBAAgB,CAACf,GAAjB,CAAsBC,CAAD,IAAO,CACtDA,CAAC,CAAC,mBAAD,CADqD,EAEtDA,CAAC,CAAC,6BAAD,CAFqD,EAGtDA,CAAC,CAAC,+BAAD,CAHqD,CAA5B,CAA5B;AAKAyB,MAAAA,yCAAyC,CACvCJ,qBAAqB,CAACpB,KAAtB,CAA4B,CAA5B,EAA+B,CAA/B,CADuC,CAAzC;AAIA,UAAIqB,sBAAsB,GAAGL,sBAAsB,CAAClB,GAAvB,CAA4BC,CAAD,IAAO,CAC7DA,CAAC,CAAC,mBAAD,CAD4D,EAE7DA,CAAC,CAAC,6BAAD,CAF4D,EAG7DA,CAAC,CAAC,+BAAD,CAH4D,CAAlC,CAA7B;AAKA6B,MAAAA,yCAAyC,CACvCP,sBAAsB,CAACrB,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,CADuC,CAAzC;AAIA,UAAIsB,mBAAmB,GAAGL,kBAAkB,CAACnB,GAAnB,CAAwBC,CAAD,IAAO,CACtDA,CAAC,CAAC,mBAAD,CADqD,EAEtDA,CAAC,CAAC,6BAAD,CAFqD,EAGtDA,CAAC,CAAC,+BAAD,CAHqD,CAA9B,CAA1B;AAKA+B,MAAAA,+BAA+B,CAACR,mBAAmB,CAACtB,KAApB,CAA0B,CAA1B,EAA6B,CAA7B,CAAD,CAA/B;AACD,KAhDH;AAiDD,GAlDQ,EAkDN,EAlDM,CAAT;AAoDA,QAAM,CAACkC,sBAAD,EAAyBC,yBAAzB,IAAsD7F,QAAQ,EAApE;AACA,QAAM,CAAC8F,iBAAD,EAAoBC,oBAApB,IAA4C/F,QAAQ,CAAC;AACzDoD,IAAAA,IAAI,EAAE,EADmD;AAEzD4C,IAAAA,OAAO,EAAE;AAFgD,GAAD,CAA1D;AAIA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8ClG,QAAQ,CAAC,EAAD,CAA5D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdqC,IAAAA,KAAK,CACFW,GADH,CACOZ,SAAS,CAAC8D,sCADjB,EAEGhD,IAFH,CAEQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaF,IAAI,CAAC,MAAD,CAAJ,CAAa,4BAAb,CAAzB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAYF,IAAI,CAAC,MAAD,CAAJ,CAAa,2BAAb,CAAxB;AAEA8C,MAAAA,qBAAqB,CAAC,CACpB9C,IAAI,CAAC,MAAD,CAAJ,CAAa,4BAAb,CADoB,EAEpBA,IAAI,CAAC,MAAD,CAAJ,CAAa,2BAAb,CAFoB,CAAD,CAArB;AAIA,UAAIgD,qBAAqB,GAAG;AAC1BhD,QAAAA,IAAI,EAAE;AACJiD,UAAAA,MAAM,EAAE,CACNjD,IAAI,CAAC,MAAD,CAAJ,CAAa,4BAAb,CADM,EAENA,IAAI,CAAC,MAAD,CAAJ,CAAa,2BAAb,CAFM,CADJ,CAKJ;;AALI,SADoB;AAQ1B4C,QAAAA,OAAO,EAAE;AACPM,UAAAA,KAAK,EAAE,IADA;AAEPC,UAAAA,UAAU,EAAE,EAFL;AAGPC,UAAAA,UAAU,EAAE,IAHL;AAIPC,UAAAA,UAAU,EAAE,GAJL;AAKPC,UAAAA,SAAS,EAAE;AALJ;AARiB,OAA5B;AAgBAX,MAAAA,oBAAoB,CAACK,qBAAD,CAApB;AACAP,MAAAA,yBAAyB,CAACzC,IAAI,CAAC,MAAD,CAAJ,CAAa,YAAb,CAAD,CAAzB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY8C,qBAAZ;AACD,KA/BH;AAgCD,GAjCQ,EAiCN,EAjCM,CAAT,CA3KyC,CA8MzC;;AACA,QAAM,CAACO,mBAAD,EAAsBC,gBAAtB,IAA0C5G,QAAQ,EAAxD;AACA,QAAM,CAAC6G,WAAD,EAAcC,cAAd,IAAgC9G,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAAC+G,YAAD,EAAeC,eAAf,IAAkChH,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACiH,cAAD,EAAiBC,iBAAjB,IAAsClH,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACmH,WAAD,EAAcC,cAAd,IAAgCpH,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACqH,gBAAD,EAAmBC,mBAAnB,IAA0CtH,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM,CAACuH,oBAAD,EAAuBC,uBAAvB,IAAkDxH,QAAQ,CAAC,CAAD,CAAhE,CArNyC,CAuNzC;;AAEA,QAAMyH,OAAO,GAAG9E,SAAS,EAAzB;AAEA1C,EAAAA,SAAS,CAAC,MAAM;AACd;AACAqC,IAAAA,KAAK,CAACW,GAAN,CAAUZ,SAAS,CAACqF,yBAApB,EAA+CvE,IAA/C,CAAoD,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAChE;AACA,UAAIuE,UAAU,GAAG,CAAjB;AACAvE,MAAAA,IAAI,CAACI,GAAL,CAAUoE,IAAD,IAAU;AACjBD,QAAAA,UAAU;AACX,OAFD;AAGAf,MAAAA,gBAAgB,CAACxD,IAAD,CAAhB;AACA0D,MAAAA,cAAc,CAACa,UAAD,CAAd;AACD,KARD,EAFc,CAYd;;AACArF,IAAAA,KAAK,CAACW,GAAN,CAAUZ,SAAS,CAACwF,qBAApB,EAA2C1E,IAA3C,CAAgD,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAC5D;AACA,UAAI0E,QAAQ,GAAG,CAAf;AAAA,UACEC,OAAO,GAAG,CADZ;AAAA,UAEEC,UAAU,GAAG,CAFf;AAGA5E,MAAAA,IAAI,CAACI,GAAL,CAAUoE,IAAD,IAAU;AACjB,YAAIA,IAAI,CAACK,KAAL,IAAc,OAAlB,EAA2B;AACzBH,UAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAtB;AACD;;AACD,YAAIF,IAAI,CAACK,KAAL,IAAc,OAAlB,EAA2B;AACzBF,UAAAA,OAAO,GAAGA,OAAO,GAAG,CAApB;AACD;;AACD,YAAIH,IAAI,CAACK,KAAL,IAAc,SAAlB,EAA6B;AAC3BD,UAAAA,UAAU,GAAGA,UAAU,GAAG,CAA1B;AACD;AACF,OAVD;AAYAhB,MAAAA,eAAe,CAACc,QAAD,CAAf;AACAV,MAAAA,cAAc,CAACW,OAAD,CAAd;AACAb,MAAAA,iBAAiB,CAACc,UAAD,CAAjB;AACD,KApBD,EAbc,CAmCd;AACA;AACA;;AACA1F,IAAAA,KAAK,CAACW,GAAN,CAAUZ,SAAS,CAACqF,yBAApB,EAA+CvE,IAA/C,CAAoD,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAChE,UAAI8E,eAAe,GAAG,CAAtB;AACA,UAAIC,mBAAmB,GAAG,CAA1B;AAEA/E,MAAAA,IAAI,CAACI,GAAL,CAAUoE,IAAD,IAAU;AACjB,YAAIQ,eAAe,GAAGR,IAAI,CAACQ,eAA3B,CADiB,CAEjB;;AACA,YAAIA,eAAe,IAAI,EAAvB,EAA2B;AACzBD,UAAAA,mBAAmB,GAAGA,mBAAmB,GAAG,CAA5C;AACD,SAFD,MAEO;AACL,cAAIE,QAAQ,GAAG,IAAIC,IAAJ,CAASF,eAAT,CAAf;AACA,cAAIG,YAAY,GAAG,IAAID,IAAJ,EAAnB;AACA,cAAIE,kBAAkB,GAAGH,QAAQ,CAACI,OAAT,KAAqBF,YAAY,CAACE,OAAb,EAA9C;AACA,cAAIC,kBAAkB,GAAGF,kBAAkB,IAAI,OAAO,IAAP,GAAc,EAAlB,CAA3C;AACAnF,UAAAA,OAAO,CAACC,GAAR,CACE,WAAW+E,QADb,EAEE,eAAeE,YAFjB,EAGE,YAAYG,kBAHd,EALK,CAWL;;AACA,cAAIA,kBAAkB,IAAI,CAA1B,EAA6B;AAC3B;AACAP,YAAAA,mBAAmB,GAAGA,mBAAmB,GAAG,CAA5C;AACD,WAfI,CAiBL;AACA;;;AACA,cAAIO,kBAAkB,GAAG,CAArB,IAA0BA,kBAAkB,GAAG,EAAnD,EAAuD;AACrDR,YAAAA,eAAe,GAAGA,eAAe,GAAG,CAApC;AACD;AACF;AACF,OA5BD;AA8BAZ,MAAAA,mBAAmB,CAACY,eAAD,CAAnB;AACAV,MAAAA,uBAAuB,CAACW,mBAAD,CAAvB;AACD,KApCD,EAtCc,CA4Ed;AACA;AACA;AACA;AACA;AACD,GAjFQ,EAiFN,EAjFM,CAAT;AAmFA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoC5I,QAAQ,CAAC,EAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdqC,IAAAA,KAAK,CAACW,GAAN,CAAUZ,SAAS,CAACwG,kBAApB,EAAwC1F,IAAxC,CAA6C,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AACzDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAwF,MAAAA,gBAAgB,CAACxF,IAAD,CAAhB;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAOA,QAAM0F,UAAU,GAAG;AACjBC,IAAAA,MAAM,EAAEJ,aAAa,CAACK,aADL;AAEjBC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,gBADT;AAEE9F,MAAAA,IAAI,EAAEuF,aAAa,CAACQ,aAFtB;AAGEC,MAAAA,IAAI,EAAE,KAHR;AAIEC,MAAAA,WAAW,EAAE9G,OAAO,CAAC+G,OAAR,CAAgBC,IAJ/B;AAKEC,MAAAA,eAAe,EAAE;AALnB,KADQ;AAFO,GAAnB;AAaA,QAAMC,YAAY,GAAG;AACnBC,IAAAA,UAAU,EAAE,IADO;AAEnBC,IAAAA,mBAAmB,EAAE,KAFF;AAGnBC,IAAAA,SAAS,EAAE,KAHQ;AAInBC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAJW;AAKnBC,IAAAA,YAAY,EAAE,CALK;AAMnBC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EAAE,IADD;AAERC,MAAAA,IAAI,EAAE,OAFE;AAGRC,MAAAA,SAAS,EAAE,KAHH;AAIRC,MAAAA,WAAW,EAAE,CAJL;AAKRf,MAAAA,WAAW,EAAE9G,OAAO,CAAC8H,OALb;AAMRb,MAAAA,eAAe,EAAEjH,OAAO,CAAC+H,KANjB;AAORC,MAAAA,cAAc,EAAEhI,OAAO,CAACiI,IAAR,CAAalB,OAPrB;AAQRmB,MAAAA,aAAa,EAAElI,OAAO,CAACiI,IAAR,CAAaE,SARpB;AASRC,MAAAA,eAAe,EAAEpI,OAAO,CAACiI,IAAR,CAAaE;AATtB,KANS;AAiBnBE,IAAAA,MAAM,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAjBW;AAkBnBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,YAAY,EAAE,EADhB;AAEE;AACAC,QAAAA,aAAa,EAAE,CAHjB;AAIE;AACAC,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE5I,OAAO,CAACiI,IAAR,CAAaE;AADnB,SALT;AAQEU,QAAAA,SAAS,EAAE;AACTtB,UAAAA,OAAO,EAAE,KADA;AAETuB,UAAAA,UAAU,EAAE;AAFH,SARb;AAYEC,QAAAA,UAAU,EAAE;AACVxB,UAAAA,OAAO,EAAE,IADC;AAEVyB,UAAAA,WAAW,EAAE;AAFH;AAZd,OADK,CADD;AAoBNC,MAAAA,KAAK,EAAE,CACL;AACEN,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE5I,OAAO,CAACiI,IAAR,CAAaE,SADnB;AAELe,UAAAA,WAAW,EAAE,IAFR;AAGLC,UAAAA,GAAG,EAAE;AAHA,SADT;AAMEN,QAAAA,SAAS,EAAE;AACTO,UAAAA,UAAU,EAAE,CAAC,CAAD,CADH;AAETC,UAAAA,gBAAgB,EAAE,CAAC,CAAD,CAFT;AAGTC,UAAAA,KAAK,EAAEtJ,OAAO,CAAC8H,OAHN;AAITgB,UAAAA,UAAU,EAAE,KAJH;AAKTS,UAAAA,kBAAkB,EAAE,CAAC,CAAD,CALX;AAMTC,UAAAA,wBAAwB,EAAE,CAAC,CAAD,CANjB;AAOTC,UAAAA,aAAa,EAAEzJ,OAAO,CAAC8H;AAPd,SANb;AAeEiB,QAAAA,UAAU,EAAE;AACVxB,UAAAA,OAAO,EAAE,IADC;AAEVyB,UAAAA,WAAW,EAAE;AAFH;AAfd,OADK;AApBD;AAlBW,GAArB;AA+DA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,CAAtB;AAAyB,IAAA,EAAE,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAA4B,IAAA,KAAK,MAAjC;AAAkC,IAAA,IAAI,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAKE;AAAI,IAAA,SAAS,EAAE9D,OAAO,CAACwE,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCpF,WAAnC,CALF,CADF,EAQE,oBAAC,UAAD;AAAY,IAAA,KAAK,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAEY,OAAO,CAACyE,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,CARF,CADF,CADF,EAeE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,CAAtB;AAAyB,IAAA,EAAE,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAA4B,IAAA,KAAK,MAAjC;AAAkC,IAAA,IAAI,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAKE;AAAI,IAAA,SAAS,EAAEzE,OAAO,CAACwE,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmC5E,gBAAnC,CALF,CADF,EAQE,oBAAC,UAAD;AAAY,IAAA,KAAK,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAEI,OAAO,CAACyE,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,CARF,CADF,CAfF,EA6BE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,CAAtB;AAAyB,IAAA,EAAE,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAA4B,IAAA,KAAK,MAAjC;AAAkC,IAAA,IAAI,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAKE;AAAI,IAAA,SAAS,EAAEzE,OAAO,CAACwE,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmC1E,oBAAnC,CALF,CADF,EAQE,oBAAC,UAAD;AAAY,IAAA,KAAK,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEE;AAAG,IAAA,SAAS,EAAEE,OAAO,CAACyE,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFF,CARF,CADF,CA7BF,EA4CE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,CAAtB;AAAyB,IAAA,EAAE,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAA4B,IAAA,KAAK,MAAjC;AAAkC,IAAA,IAAI,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAKE;AAAI,IAAA,SAAS,EAAEzE,OAAO,CAACwE,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAoClF,YAApC,CALF,CADF,EAQE,oBAAC,UAAD;AAAY,IAAA,KAAK,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAEU,OAAO,CAACyE,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,kBADF,CARF,CADF,CA5CF,EA8DE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,CAAtB;AAAyB,IAAA,EAAE,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAA4B,IAAA,KAAK,MAAjC;AAAkC,IAAA,IAAI,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAKE;AAAI,IAAA,SAAS,EAAEzE,OAAO,CAACwE,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAoChF,cAApC,CALF,CADF,EAQE,oBAAC,UAAD;AAAY,IAAA,KAAK,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEE;AAAG,IAAA,SAAS,EAAEQ,OAAO,CAACyE,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,oBAFF,CARF,CADF,CA9DF,EAiFE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,CAAtB;AAAyB,IAAA,EAAE,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAA4B,IAAA,KAAK,MAAjC;AAAkC,IAAA,IAAI,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE;AAAI,IAAA,SAAS,EAAEzE,OAAO,CAACwE,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmC9E,WAAnC,CAJF,CADF,EAOE,oBAAC,UAAD;AAAY,IAAA,KAAK,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEE;AAAG,IAAA,SAAS,EAAEM,OAAO,CAACyE,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,kBAFF,CAPF,CADF,CAjFF,CADF,EAsGE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAA0B,IAAA,EAAE,EAAE,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEzE,OAAO,CAAC0E,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF,CAtGF,EAiHE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAA0B,IAAA,EAAE,EAAE,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADA,CAHF,CADF,CADF,CAjHF,EAmIE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAA0B,IAAA,EAAE,EAAE,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAE1E,OAAO,CAAC2E,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,EAKE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAE3E,OAAO,CAAC4E,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,GAAb;AAAkB,IAAA,IAAI,EAAEvD,UAAxB;AAAoC,IAAA,OAAO,EAAEW,YAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CALF,EAWE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEhC,OAAO,CAAC6E,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,oBAC+B3D,aAAa,CAAC4D,UAD7C,CADF,CAXF,CADF,CADF,EAqBE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAA0B,IAAA,EAAE,EAAE,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAE9E,OAAO,CAACwE,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CADF,EAIE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AACE,IAAA,EAAE,EAAC,KADL;AAEE,IAAA,MAAM,EAAE,GAFV;AAGE,IAAA,IAAI,EAAE;AACJlD,MAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,QAAZ,CADJ;AAEJE,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,eADT;AAEE9F,QAAAA,IAAI,EAAE6C,kBAFR;AAGEuD,QAAAA,eAAe,EAAE,CAAC,SAAD,EAAY,SAAZ;AAHnB,OADQ;AAFN,KAHR;AAaE,IAAA,OAAO,EAAE;AACPQ,MAAAA,QAAQ,EAAE;AACRwC,QAAAA,SAAS,EAAE;AACTtD,UAAAA,KAAK,EAAE,UAAUuD,WAAV,EAAuBrJ,IAAvB,EAA6B;AAClC,gBAAIsJ,OAAO,GACTtJ,IAAI,CAAC6F,QAAL,CAAcwD,WAAW,CAACE,YAA1B,EAAwCvJ,IAD1C;AAEA,gBAAIwJ,YAAY,GAAGxJ,IAAI,CAAC2F,MAAL,CAAY0D,WAAW,CAACI,KAAxB,CAAnB;AACA,gBAAIC,WAAW,GAAGJ,OAAO,CAACD,WAAW,CAACI,KAAb,CAAzB;AACA,gBAAIE,KAAK,GAAG,CAAZ;;AACA,iBAAK,IAAIC,CAAT,IAAcN,OAAd,EAAuB;AACrBK,cAAAA,KAAK,IAAIL,OAAO,CAACM,CAAD,CAAhB;AACD;;AACD,gBAAIC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CACrBL,WAAW,GAAGC,KAAf,GAAwB,GADF,CAAxB;AAGA,mBAAOH,YAAY,GAAG,IAAf,GAAsBK,iBAAtB,GAA0C,GAAjD;AACD;AAdQ;AADH,OADH;AAoBPtD,MAAAA,mBAAmB,EAAE,IApBd;AAqBPD,MAAAA,UAAU,EAAE;AArBL,KAbX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,EA2CE,oBAAC,UAAD;AAAY,IAAA,KAAK,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEjC,OAAO,CAAC6E,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,uBACkC1G,sBADlC,CADF,CA3CF,CADF,CArBF,EAyEE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAA0B,IAAA,EAAE,EAAE,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAE6B,OAAO,CAAC2E,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACmBrJ,oBADnB,MADF,CADF,EAME,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,gBAAgB,EAAC,SADnB;AAEE,IAAA,SAAS,EAAE,CAAC,QAAD,EAAW,cAAX,EAA2B,MAA3B,EAAmC,cAAnC,CAFb;AAGE,IAAA,SAAS,EAAEF,eAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CANF,CADF,CAzEF,CAnIF,EA6NE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAA0B,IAAA,EAAE,EAAE,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAC,kBADR;AAEE,IAAA,WAAW,EAAC,SAFd;AAGE,IAAA,IAAI,EAAE,CACJ;AACEuK,MAAAA,OAAO,EAAE,QADX;AAEEC,MAAAA,OAAO,EAAE5M,SAFX;AAGE6M,MAAAA,UAAU,EACR,oBAAC,iBAAD;AACE,QAAA,cAAc,EAAE,CAAC,CAAD,CADlB;AAEE,QAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFhB;AAGE,QAAA,KAAK,EAAEzL,IAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ,KADI,EAYJ;AACEuL,MAAAA,OAAO,EAAE,UADX;AAEEC,MAAAA,OAAO,EAAErM,YAFX;AAGEsM,MAAAA,UAAU,EACR,oBAAC,iBAAD;AACE,QAAA,cAAc,EAAE,CAAC,CAAD,CADlB;AAEE,QAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFhB;AAGE,QAAA,KAAK,EAAExL,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ,KAZI,EAuBJ;AACEsL,MAAAA,OAAO,EAAE,QADX;AAEEC,MAAAA,OAAO,EAAEtM,qBAFX;AAGEuM,MAAAA,UAAU,EACR,oBAAC,iBAAD;AACE,QAAA,cAAc,EAAE,CAAC,CAAD,CADlB;AAEE,QAAA,YAAY,EAAE,CAAC,CAAD,CAFhB;AAGE,QAAA,KAAK,EAAEvL,MAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ,KAvBI,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EA2CE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAA0B,IAAA,EAAE,EAAE,CAA9B;AAAiC,IAAA,EAAE,EAAE,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAE0F,OAAO,CAAC2E,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAG,IAAA,SAAS,EAAE3E,OAAO,CAAC8F,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAFF,CADF,EAOE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,gBAAgB,EAAC,SADnB;AAEE,IAAA,SAAS,EAAE,CAAC,gBAAD,EAAmB,WAAnB,EAAgC,aAAhC,CAFb;AAGE,IAAA,SAAS,EAAElI,sCAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,CADF,CA3CF,EA4DE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAE,EAAd;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAA0B,IAAA,EAAE,EAAE,CAA9B;AAAiC,IAAA,EAAE,EAAE,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAEoC,OAAO,CAAC2E,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAG,IAAA,SAAS,EAAE3E,OAAO,CAAC8F,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAFF,CADF,EAOE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,gBAAgB,EAAC,SADnB;AAEE,IAAA,SAAS,EAAE,CAAC,gBAAD,EAAmB,WAAnB,EAAgC,aAAhC,CAFb;AAGE,IAAA,SAAS,EAAEvJ,uCAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPF,CADF,CA5DF,CA7NF,CADF;AA8SD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// react plugin for creating charts\r\nimport ChartistGraph from \"react-chartist\";\r\n// @material-ui/core\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n// @material-ui/icons\r\nimport DevicesIcon from \"@material-ui/icons/Devices\";\r\nimport ReportProblem from \"@material-ui/icons/ReportProblem\";\r\nimport BatteryFullIcon from \"@material-ui/icons/BatteryFull\";\r\nimport AccessTime from \"@material-ui/icons/AccessTime\";\r\nimport BugReport from \"@material-ui/icons/BugReport\";\r\nimport Code from \"@material-ui/icons/Code\";\r\nimport Cloud from \"@material-ui/icons/Cloud\";\r\nimport RestoreIcon from \"@material-ui/icons/Restore\";\r\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\r\nimport PowerIcon from \"@material-ui/icons/Power\";\r\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\r\nimport ScheduleIcon from \"@material-ui/icons/Schedule\";\r\nimport TasksWithoutEdits from \"../Tasks/TasksWithoutEdits\";\r\n// core components\r\nimport GridItem from \"../Grid/GridItem.js\";\r\nimport GridContainer from \"../Grid/GridContainer.js\";\r\nimport Table from \"../Table/Table.js\";\r\nimport Tasks from \"../Tasks/Tasks.js\";\r\nimport CustomTabs from \"../CustomTabs/CustomTabs\";\r\nimport Card from \"../Card/Card.js\";\r\nimport CardHeader from \"../Card/CardHeader.js\";\r\nimport CardIcon from \"../Card/CardIcon.js\";\r\nimport CardBody from \"../Card/CardBody.js\";\r\nimport CardFooter from \"../Card/CardFooter.js\";\r\nimport Map from \"./Map/Map\";\r\n\r\nimport { bugs, website, server } from \"../../variables/general.js\";\r\n\r\nimport {\r\n  dailySalesChart,\r\n  emailsSubscriptionChart,\r\n  completedTasksChart,\r\n  OnlineStatusChart,\r\n} from \"../../variables/charts.js\";\r\n\r\nimport styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\r\nimport constants from \"../../../config/constants\";\r\nimport axios from \"axios\";\r\nimport palette from \"../../../assets/theme/palette\";\r\nimport { Line, Bar, Pie } from \"react-chartjs-2\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function DeviceManagement() {\r\n  const [inActiveDevices, setInActiveDevices] = useState([]);\r\n  const [inActiveDevicesCount, setInActiveDevicesCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    axios.get(constants.GET_LATEST_OFFLINE_DEVICES).then(({ data }) => {\r\n      console.log(data);\r\n\r\n      let devices = data.map((x) => [\r\n        x[\"name\"],\r\n        x[\"time_offline\"],\r\n        x[\"mobility\"],\r\n        x[\"power\"],\r\n      ]);\r\n      setInActiveDevices(devices.slice(2, 7));\r\n      setInActiveDevicesCount(data.length);\r\n    });\r\n  }, []);\r\n\r\n  const [\r\n    worstPerformingDevicesInTwentyFourHours,\r\n    setWorstPerformingDevicesInTwentyFourHours,\r\n  ] = useState([]);\r\n  const [\r\n    worstPerformingDevicesAllTime,\r\n    setWorstPerformingDevicesAllTime,\r\n  ] = useState([]);\r\n  const [\r\n    worstPerformingDevicesInTwentyEightDays,\r\n    setWorstPerformingDevicesInTwentyEightDays,\r\n  ] = useState([]);\r\n  const [\r\n    worstPerformingDevicesInTwelveMonths,\r\n    setWorstPerformingInTwelveMonths,\r\n  ] = useState([]);\r\n  const [\r\n    worstPerformingDevicesInSevenDays,\r\n    setWorstPerformingDevicesInSevenDays,\r\n  ] = useState([]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(constants.GET_NETWORK_WORST_PERFORMING_DEVICES)\r\n      .then(({ data }) => {\r\n        console.log(data);\r\n        let twenty_four_data = data[\"24 hours\"];\r\n        let all_time_data = data[\"all time\"];\r\n        let seven_days_data = data[\"7 days\"];\r\n        let twenty_eight_days_data = data[\"28 days\"];\r\n        let twelve_months_data = data[\"12 months\"];\r\n\r\n        let devicesSevenDays = seven_days_data.map((x) => [\r\n          x[\"device_channel_id\"],\r\n          x[\"device_uptime_in_percentage\"],\r\n          x[\"device_downtime_in_percentage\"],\r\n        ]);\r\n        setWorstPerformingDevicesInSevenDays(devicesSevenDays.slice(0, 5));\r\n\r\n        let devices_all_time = all_time_data.map((x) => [\r\n          x[\"device_channel_id\"],\r\n          x[\"device_uptime_in_percentage\"],\r\n          x[\"device_downtime_in_percentage\"],\r\n        ]);\r\n        setWorstPerformingDevicesAllTime(devices_all_time.slice(0, 5));\r\n\r\n        let devicesTwentyFourHour = twenty_four_data.map((x) => [\r\n          x[\"device_channel_id\"],\r\n          x[\"device_uptime_in_percentage\"],\r\n          x[\"device_downtime_in_percentage\"],\r\n        ]);\r\n        setWorstPerformingDevicesInTwentyFourHours(\r\n          devicesTwentyFourHour.slice(0, 5)\r\n        );\r\n\r\n        let devicesTwentyEightDays = twenty_eight_days_data.map((x) => [\r\n          x[\"device_channel_id\"],\r\n          x[\"device_uptime_in_percentage\"],\r\n          x[\"device_downtime_in_percentage\"],\r\n        ]);\r\n        setWorstPerformingDevicesInTwentyEightDays(\r\n          devicesTwentyEightDays.slice(0, 5)\r\n        );\r\n\r\n        let devicesTwelveMonths = twelve_months_data.map((x) => [\r\n          x[\"device_channel_id\"],\r\n          x[\"device_uptime_in_percentage\"],\r\n          x[\"device_downtime_in_percentage\"],\r\n        ]);\r\n        setWorstPerformingInTwelveMonths(devicesTwelveMonths.slice(0, 5));\r\n      });\r\n  }, []);\r\n\r\n  const [\r\n    bestPerformingDevicesInTwentyFourHours,\r\n    setBestPerformingDevicesInTwentyFourHours,\r\n  ] = useState([]);\r\n  const [\r\n    bestPerformingDevicesAllTime,\r\n    setBestPerformingDevicesAllTime,\r\n  ] = useState([]);\r\n  const [\r\n    bestPerformingDevicesInTwentyEightDays,\r\n    setBestPerformingDevicesInTwentyEightDays,\r\n  ] = useState([]);\r\n  const [\r\n    bestPerformingDevicesInTwelveMonths,\r\n    setBestPerformingInTwelveMonths,\r\n  ] = useState([]);\r\n  const [\r\n    bestPerformingDevicesInSevenDays,\r\n    setBestPerformingDevicesInSevenDays,\r\n  ] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(constants.GET_NETWORK_BEST_PERFORMING_DEVICES)\r\n      .then(({ data }) => {\r\n        console.log(data);\r\n        let twenty_four_data = data[\"24 hours\"];\r\n        let all_time_data = data[\"all time\"];\r\n        let seven_days_data = data[\"7 days\"];\r\n        let twenty_eight_days_data = data[\"28 days\"];\r\n        let twelve_months_data = data[\"12 months\"];\r\n\r\n        let devicesSevenDays = seven_days_data.map((x) => [\r\n          x[\"device_channel_id\"],\r\n          x[\"device_uptime_in_percentage\"],\r\n          x[\"device_downtime_in_percentage\"],\r\n        ]);\r\n        setBestPerformingDevicesInSevenDays(devicesSevenDays.slice(0, 5));\r\n\r\n        let devices_all_time = all_time_data.map((x) => [\r\n          x[\"device_channel_id\"],\r\n          x[\"device_uptime_in_percentage\"],\r\n          x[\"device_downtime_in_percentage\"],\r\n        ]);\r\n        setBestPerformingDevicesAllTime(devices_all_time.slice(0, 5));\r\n\r\n        let devicesTwentyFourHour = twenty_four_data.map((x) => [\r\n          x[\"device_channel_id\"],\r\n          x[\"device_uptime_in_percentage\"],\r\n          x[\"device_downtime_in_percentage\"],\r\n        ]);\r\n        setBestPerformingDevicesInTwentyFourHours(\r\n          devicesTwentyFourHour.slice(0, 5)\r\n        );\r\n\r\n        let devicesTwentyEightDays = twenty_eight_days_data.map((x) => [\r\n          x[\"device_channel_id\"],\r\n          x[\"device_uptime_in_percentage\"],\r\n          x[\"device_downtime_in_percentage\"],\r\n        ]);\r\n        setBestPerformingDevicesInTwentyEightDays(\r\n          devicesTwentyEightDays.slice(0, 5)\r\n        );\r\n\r\n        let devicesTwelveMonths = twelve_months_data.map((x) => [\r\n          x[\"device_channel_id\"],\r\n          x[\"device_uptime_in_percentage\"],\r\n          x[\"device_downtime_in_percentage\"],\r\n        ]);\r\n        setBestPerformingInTwelveMonths(devicesTwelveMonths.slice(0, 5));\r\n      });\r\n  }, []);\r\n\r\n  const [onlineStatusUpdateTime, setOnlineStatusUpdateTime] = useState();\r\n  const [onlineStatusChart, setOnlineStatusChart] = useState({\r\n    data: {},\r\n    options: {},\r\n  });\r\n  const [deviceStatusValues, setDeviceStatusValues] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(constants.GET_DEVICE_STATUS_FOR_PIECHART_DISPLAY)\r\n      .then(({ data }) => {\r\n        console.log(\"data values\");\r\n        console.log(data);\r\n        console.log(\"offline:\" + data[\"data\"][\"offline_devices_percentage\"]);\r\n        console.log(\"online:\" + data[\"data\"][\"online_devices_percentage\"]);\r\n\r\n        setDeviceStatusValues([\r\n          data[\"data\"][\"offline_devices_percentage\"],\r\n          data[\"data\"][\"online_devices_percentage\"],\r\n        ]);\r\n        let onlineStatusChartData = {\r\n          data: {\r\n            series: [\r\n              data[\"data\"][\"offline_devices_percentage\"],\r\n              data[\"data\"][\"online_devices_percentage\"],\r\n            ],\r\n            //labels: ['Offline', 'Online']\r\n          },\r\n          options: {\r\n            donut: true,\r\n            donutWidth: 60,\r\n            donutSolid: true,\r\n            startAngle: 270,\r\n            showLabel: true,\r\n          },\r\n        };\r\n        setOnlineStatusChart(onlineStatusChartData);\r\n        setOnlineStatusUpdateTime(data[\"data\"][\"created_at\"]);\r\n        console.log(onlineStatusChartData);\r\n      });\r\n  }, []);\r\n\r\n  //set states for storing device status\r\n  const [deviceStatusSummary, setStatusSummary] = useState();\r\n  const [noOfDevices, setNoOfDevices] = useState(0);\r\n  const [solarPowered, setSolarPowered] = useState(0);\r\n  const [batteryPowered, setBatteryPowered] = useState(0);\r\n  const [mainPowered, setMainPowered] = useState(0);\r\n  const [noDueMaintenance, setNoDueMaintenance] = useState(0);\r\n  const [noOverDueMaintenance, setNoOverDueMaintenance] = useState(0);\r\n\r\n  //const [noOfDevicesTS, setNoOfDevicesTS] = useState(0); //TS= ThinkSpeak\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    // get total number of devices on the network\r\n    axios.get(constants.GET_DEVICE_STATUS_SUMMARY).then(({ data }) => {\r\n      //console.log(data[0].loc_power_suppy);\r\n      let no_devices = 0;\r\n      data.map((item) => {\r\n        no_devices++;\r\n      });\r\n      setStatusSummary(data);\r\n      setNoOfDevices(no_devices);\r\n    });\r\n\r\n    // get total number of devices on solar power or main power\r\n    axios.get(constants.GET_DEVICE_POWER_TYPE).then(({ data }) => {\r\n      //console.log(data[0].loc_power_suppy);\r\n      let no_solar = 0,\r\n        no_main = 0,\r\n        no_battery = 0;\r\n      data.map((item) => {\r\n        if (item.power == \"Solar\") {\r\n          no_solar = no_solar + 1;\r\n        }\r\n        if (item.power == \"Mains\") {\r\n          no_main = no_main + 1;\r\n        }\r\n        if (item.power == \"Battery\") {\r\n          no_battery = no_battery + 1;\r\n        }\r\n      });\r\n\r\n      setSolarPowered(no_solar);\r\n      setMainPowered(no_main);\r\n      setBatteryPowered(no_battery);\r\n    });\r\n\r\n    // get number of devices due for maintenance,\r\n    // look for the nextMaintenance field in devices collection\r\n    // device is due for maintenance, 1 day, 1 week to nextMaintenance date\r\n    axios.get(constants.GET_DEVICE_STATUS_SUMMARY).then(({ data }) => {\r\n      let due_maintenance = 0;\r\n      let overdue_maintenance = 0;\r\n\r\n      data.map((item) => {\r\n        let nextMaintenance = item.nextMaintenance;\r\n        // next maintenance === \"\" assume overdue for maintenance\r\n        if (nextMaintenance == \"\") {\r\n          overdue_maintenance = overdue_maintenance + 1;\r\n        } else {\r\n          let nextMain = new Date(nextMaintenance);\r\n          let current_date = new Date();\r\n          let difference_in_time = nextMain.getTime() - current_date.getTime();\r\n          let difference_in_days = difference_in_time / (1000 * 3600 * 24);\r\n          console.log(\r\n            \"Next: \" + nextMain,\r\n            \" Current: \" + current_date,\r\n            \" days: \" + difference_in_days\r\n          );\r\n\r\n          // 1. logic for overdue maintenance goes here\r\n          if (difference_in_days <= 0) {\r\n            // took two months without maintenance activity\r\n            overdue_maintenance = overdue_maintenance + 1;\r\n          }\r\n\r\n          // 1. logic for due maintenance goes here\r\n          // 2 weeks to maintenance date\r\n          if (difference_in_days > 0 && difference_in_days < 16) {\r\n            due_maintenance = due_maintenance + 1;\r\n          }\r\n        }\r\n      });\r\n\r\n      setNoDueMaintenance(due_maintenance);\r\n      setNoOverDueMaintenance(overdue_maintenance);\r\n    });\r\n\r\n    //axios.get(constants.GET_TOTAL_DEVICES).then(({ data }) => {\r\n    // getting total number of devices directly from thinkspeak\r\n    //console.log(data.count);\r\n    // setNoOfDevicesTS(data.count);\r\n    //});\r\n  }, []);\r\n\r\n  const [networkUptime, setNetworkUptime] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(constants.GET_NETWORK_UPTIME).then(({ data }) => {\r\n      console.log(data);\r\n      setNetworkUptime(data);\r\n    });\r\n  }, []);\r\n\r\n  const uptimeData = {\r\n    labels: networkUptime.uptime_labels,\r\n    datasets: [\r\n      {\r\n        label: \"Network Uptime\",\r\n        data: networkUptime.uptime_values,\r\n        fill: false,\r\n        borderColor: palette.primary.main,\r\n        backgroundColor: \"#BCBD22\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options_main = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    animation: false,\r\n    legend: { display: false },\r\n    cornerRadius: 0,\r\n    tooltips: {\r\n      enabled: true,\r\n      mode: \"index\",\r\n      intersect: false,\r\n      borderWidth: 1,\r\n      borderColor: palette.divider,\r\n      backgroundColor: palette.white,\r\n      titleFontColor: palette.text.primary,\r\n      bodyFontColor: palette.text.secondary,\r\n      footerFontColor: palette.text.secondary,\r\n    },\r\n    layout: { padding: 0 },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          barThickness: 35,\r\n          //maxBarThickness: 10,\r\n          barPercentage: 1,\r\n          //categoryPercentage: 0.5,\r\n          ticks: {\r\n            fontColor: palette.text.secondary,\r\n          },\r\n          gridLines: {\r\n            display: false,\r\n            drawBorder: false,\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: \"Time Periods\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            fontColor: palette.text.secondary,\r\n            beginAtZero: true,\r\n            min: 0,\r\n          },\r\n          gridLines: {\r\n            borderDash: [2],\r\n            borderDashOffset: [2],\r\n            color: palette.divider,\r\n            drawBorder: false,\r\n            zeroLineBorderDash: [2],\r\n            zeroLineBorderDashOffset: [2],\r\n            zeroLineColor: palette.divider,\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: \"Uptime(%)\",\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GridContainer>\r\n        <GridItem xs={12} sm={2} md={2}>\r\n          <Card>\r\n            <CardHeader color=\"primary\" stats icon>\r\n              <CardIcon color=\"primary\">\r\n                <DevicesIcon />\r\n              </CardIcon>\r\n              {/* <p className={classes.cardCategory}>Devices on the network</p> */}\r\n              <h3 className={classes.cardTitle}>{noOfDevices}</h3>\r\n            </CardHeader>\r\n            <CardFooter stats>\r\n              <p className={classes.cardCategory}>Devices on the network</p>\r\n            </CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={2} md={2}>\r\n          <Card>\r\n            <CardHeader color=\"primary\" stats icon>\r\n              <CardIcon color=\"primary\">\r\n                <RestoreIcon />\r\n              </CardIcon>\r\n              {/* <p className={classes.cardCategory}>Due for maintenance</p> */}\r\n              <h3 className={classes.cardTitle}>{noDueMaintenance}</h3>\r\n            </CardHeader>\r\n            <CardFooter stats>\r\n              <p className={classes.cardCategory}>Due for maintenance</p>\r\n            </CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={2} md={2}>\r\n          <Card>\r\n            <CardHeader color=\"primary\" stats icon>\r\n              <CardIcon color=\"primary\">\r\n                <ReportProblem />\r\n              </CardIcon>\r\n              {/* <p className={classes.cardCategory}>Overdue for maintenance</p> */}\r\n              <h3 className={classes.cardTitle}>{noOverDueMaintenance}</h3>\r\n            </CardHeader>\r\n            <CardFooter stats>\r\n              {\" \"}\r\n              <p className={classes.cardCategory}>Overdue for maintenance</p>\r\n            </CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={2} md={2}>\r\n          <Card>\r\n            <CardHeader color=\"primary\" stats icon>\r\n              <CardIcon color=\"primary\">\r\n                <WbSunnyIcon />\r\n              </CardIcon>\r\n              {/* <p className={classes.cardCategory}>Solar powered</p> */}\r\n              <h3 className={classes.cardTitle}> {solarPowered}</h3>\r\n            </CardHeader>\r\n            <CardFooter stats>\r\n              <p className={classes.cardCategory}>\r\n                {\" \"}\r\n                <br />\r\n                Solar powered\r\n              </p>\r\n            </CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={2} md={2}>\r\n          <Card>\r\n            <CardHeader color=\"primary\" stats icon>\r\n              <CardIcon color=\"primary\">\r\n                <BatteryFullIcon />\r\n              </CardIcon>\r\n              {/* <p className={classes.cardCategory}>Battery powered</p> */}\r\n              <h3 className={classes.cardTitle}> {batteryPowered}</h3>\r\n            </CardHeader>\r\n            <CardFooter stats>\r\n              {\" \"}\r\n              <p className={classes.cardCategory}>\r\n                {\" \"}\r\n                <br />\r\n                Battery powered\r\n              </p>\r\n            </CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={2} md={2}>\r\n          <Card>\r\n            <CardHeader color=\"primary\" stats icon>\r\n              <CardIcon color=\"primary\">\r\n                <PowerIcon />\r\n              </CardIcon>\r\n              <h3 className={classes.cardTitle}>{mainPowered}</h3>\r\n            </CardHeader>\r\n            <CardFooter stats>\r\n              {\" \"}\r\n              <p className={classes.cardCategory}>\r\n                {\" \"}\r\n                <br />\r\n                Mains Powered\r\n              </p>\r\n            </CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n      </GridContainer>\r\n\r\n      <GridContainer>\r\n        <GridItem xs={12} sm={12} md={12}>\r\n          <Card>\r\n            <div className={classes.mapContainer}>\r\n              <Map />\r\n            </div>\r\n          </Card>\r\n        </GridItem>\r\n      </GridContainer>\r\n\r\n\r\n      <GridContainer>\r\n        <GridItem xs={12} sm={12} md={12}>\r\n          <Card>\r\n            \r\n\r\n            <CardBody>\r\n            <div >\r\n              <Map />\r\n            </div>\r\n            </CardBody>\r\n\r\n           \r\n          </Card>\r\n        </GridItem>\r\n       \r\n      </GridContainer>\r\n\r\n\r\n      <GridContainer>\r\n        <GridItem xs={12} sm={12} md={4}>\r\n          <Card>\r\n            <CardHeader color=\"primary\">\r\n              <h4 className={classes.cardTitleWhite}>Network Uptime</h4>\r\n            </CardHeader>\r\n\r\n            <CardBody>\r\n              <div className={classes.chartContainer}>\r\n                <Bar height={250} data={uptimeData} options={options_main} />\r\n              </div>\r\n            </CardBody>\r\n\r\n            <CardFooter>\r\n              <div className={classes.stats}>\r\n                <AccessTime /> Last updated {networkUptime.created_at}\r\n              </div>\r\n            </CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n\r\n        <GridItem xs={12} sm={12} md={4}>\r\n          <Card>\r\n            <CardHeader color=\"info\">\r\n              <h4 className={classes.cardTitle}>Online Status</h4>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Pie\r\n                id=\"pie\"\r\n                height={200}\r\n                data={{\r\n                  labels: [\"Offline\", \"Online\"],\r\n                  datasets: [\r\n                    {\r\n                      label: \"Device Status\",\r\n                      data: deviceStatusValues,\r\n                      backgroundColor: [\"#BCBD22\", \"#17BECF\"],\r\n                    },\r\n                  ],\r\n                }}\r\n                options={{\r\n                  tooltips: {\r\n                    callbacks: {\r\n                      label: function (tooltipItem, data) {\r\n                        var allData =\r\n                          data.datasets[tooltipItem.datasetIndex].data;\r\n                        var tooltipLabel = data.labels[tooltipItem.index];\r\n                        var tooltipData = allData[tooltipItem.index];\r\n                        var total = 0;\r\n                        for (var i in allData) {\r\n                          total += allData[i];\r\n                        }\r\n                        var tooltipPercentage = Math.round(\r\n                          (tooltipData / total) * 100\r\n                        );\r\n                        return tooltipLabel + \": \" + tooltipPercentage + \"%\";\r\n                      },\r\n                    },\r\n                  },\r\n\r\n                  maintainAspectRatio: true,\r\n                  responsive: true,\r\n                }}\r\n              />\r\n            </CardBody>\r\n            <CardFooter chart>\r\n              <div className={classes.stats}>\r\n                <AccessTime /> Last updated on {onlineStatusUpdateTime}\r\n              </div>\r\n            </CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n\r\n        <GridItem xs={12} sm={12} md={4}>\r\n          <Card>\r\n            <CardHeader color=\"primary\">\r\n              <h4 className={classes.cardTitleWhite}>\r\n                Offline Devices({inActiveDevicesCount})\r\n              </h4>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Table\r\n                tableHeaderColor=\"primary\"\r\n                tableHead={[\"Device\", \"Time Offline\", \"Type\", \"Power Supply\"]}\r\n                tableData={inActiveDevices}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </GridItem>\r\n      </GridContainer>\r\n      <GridContainer>\r\n        <GridItem xs={12} sm={12} md={6}>\r\n          <CustomTabs\r\n            title=\"Incident Report:\"\r\n            headerColor=\"primary\"\r\n            tabs={[\r\n              {\r\n                tabName: \"Issues\",\r\n                tabIcon: BugReport,\r\n                tabContent: (\r\n                  <TasksWithoutEdits\r\n                    checkedIndexes={[0]}\r\n                    tasksIndexes={[0, 1, 2, 3]}\r\n                    tasks={bugs}\r\n                  />\r\n                ),\r\n              },\r\n              {\r\n                tabName: \"Schedule\",\r\n                tabIcon: ScheduleIcon,\r\n                tabContent: (\r\n                  <TasksWithoutEdits\r\n                    checkedIndexes={[0]}\r\n                    tasksIndexes={[0, 1]}\r\n                    tasks={website}\r\n                  />\r\n                ),\r\n              },\r\n              {\r\n                tabName: \"Alerts\",\r\n                tabIcon: NotificationsNoneIcon,\r\n                tabContent: (\r\n                  <TasksWithoutEdits\r\n                    checkedIndexes={[0]}\r\n                    tasksIndexes={[0]}\r\n                    tasks={server}\r\n                  />\r\n                ),\r\n              },\r\n            ]}\r\n          />\r\n        </GridItem>\r\n\r\n        <GridItem xs={12} sm={12} md={3} lg={3}>\r\n          <Card>\r\n            <CardHeader color=\"primary\">\r\n              <h4 className={classes.cardTitleWhite}>Leaderboard</h4>\r\n              <p className={classes.cardCategoryWhite}>\r\n                Best performing 5 devices on network in the past 28 days\r\n              </p>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Table\r\n                tableHeaderColor=\"primary\"\r\n                tableHead={[\"Device Channel\", \"Uptime(%)\", \"Downtime(%)\"]}\r\n                tableData={bestPerformingDevicesInTwentyEightDays}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={12} md={3} lg={3}>\r\n          <Card>\r\n            <CardHeader color=\"primary\">\r\n              <h4 className={classes.cardTitleWhite}>Leaderboard</h4>\r\n              <p className={classes.cardCategoryWhite}>\r\n                Worst performing 5 devices on network in the past 28 days\r\n              </p>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Table\r\n                tableHeaderColor=\"primary\"\r\n                tableHead={[\"Device Channel\", \"Uptime(%)\", \"Downtime(%)\"]}\r\n                tableData={worstPerformingDevicesInTwentyEightDays}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </GridItem>\r\n      </GridContainer>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}