{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\AirQo-frontend\\\\locate\\\\src\\\\views\\\\components\\\\Map\\\\Map.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { mapRenderDefaults } from \"../../../redux/Maps/actions\";\nimport PropTypes from \"prop-types\";\nimport constants from \"../../../config/constants.js\";\nimport Select from 'react-select';\nimport { Map, FeatureGroup, LayerGroup, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport axios from \"axios\";\nimport L, { marker } from \"leaflet\";\nimport { ElementClass } from \"enzyme\";\nimport FullscreenControl from \"react-leaflet-fullscreen\";\nimport \"react-leaflet-fullscreen/dist/styles.css\"; // import MapMenu from \"./MapMenu\";\n// From locate MAP\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardActions, Divider } from \"@material-ui/core\";\nimport Card from \"../Card/Card.js\";\nimport CardBody from \"../Card/CardBody.js\"; //--End--\n// From Locate Save\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport UpdateIcon from \"@material-ui/icons/Update\"; //import Select from '@material-ui/core/Select';\n//download csv and pdf\n\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport jsonexport from 'jsonexport'; // -- End --\n\nlet geoJsonPolygon;\nconst typeOptions = [{\n  value: '',\n  label: 'choose download option'\n}, {\n  value: 'CSV',\n  label: 'CSV'\n}, {\n  value: 'PDF',\n  label: 'PDF'\n}];\nconst initialState = {\n  api_data: {},\n  polygons: [],\n  markers: [[0.32, 32.598]],\n  // gets the shapefile format to save (polygon drawn within the planning space)\n  plan: {},\n  // State: locate form\n  numberOfDevices: 0,\n  mustHaveCoord: \"\",\n  // activates/deactivates locate submit button accordingly\n  btnSubmit: false,\n  // activates/deactivates clear planning space button accordingly\n  btnClear: false,\n  //for conditional rendering of clear button\n  clear: true,\n  //newly added - passed to the model endpoint\n  geoJSONDATA: \"\",\n  // added from locateSave -- helps with saving data and dialog boxes\n  open: false,\n  openSave: false,\n  confirmDialog: false,\n  savedPlan: [],\n  // stores previously saved data\n  space_name: \"\",\n  // states for opening and updating previously saved data\n  selected_name: \"\",\n  selected_plan: {},\n  isPlanSelected: false,\n  isUpdateCancel: false,\n  isAlreadyOpened: 0,\n  // prevents the map from loading more than once on every state change\n  // handle all the popup msg\n  confirmDialogMsg: \"\",\n  selectedOption: {\n    value: ' ',\n    label: ''\n  }\n};\n\nclass Maps extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onOpenClicked = () => {\n      axios.get(constants.GET_LOCATE_MAP + this.props.auth.user._id).then(res => {\n        this.setState({\n          savedPlan: res.data\n        });\n        console.log(res.data); //console.log(this.state, \"current user: \", this.props.auth.user._id);\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.savePlanningSpace = () => {\n      // open the save planning space dialog\n      this.setState(prevState => ({\n        openSave: !prevState.openSave\n      })); // make api call\n      // console.log(\"plan: \", this.state.plan);\n\n      axios.post(constants.SAVE_LOCATE_MAP, {\n        user_id: this.props.auth.user._id,\n        space_name: this.state.space_name,\n        plan: this.state.plan\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        console.log(res);\n        this.setState({\n          confirmDialogMsg: res.data.message\n        });\n        this.setState(prevState => ({\n          confirmDialog: !prevState.confirmDialog\n        })); //\n      }).catch(e => console.log(e));\n    };\n\n    this.onSaveClicked = () => {\n      this.setState(prevState => ({\n        openSave: !prevState.openSave\n      }));\n    };\n\n    this.handleSaveClose = () => {\n      this.setState(prevState => ({\n        openSave: !prevState.openSave\n      })); //console.log(this.state, this.props.plan, this.props.user_id);\n    };\n\n    this.changeHandler = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleDownloadChange = selected => {\n      this.setState({\n        selectedOption: selected\n      }); //console.log(`Option selected:`, selected)\n    };\n\n    this.handleClear = () => {\n      this.setState(initialState);\n      let leafletFG = this._editableFG.leafletElement;\n      leafletFG.eachLayer(function (layer) {\n        layer.remove();\n      });\n    };\n\n    this.handleConfirmClose = () => {\n      this.setState(prevState => ({\n        confirmDialog: !prevState.confirmDialog\n      }));\n    };\n\n    this.handleClick = () => {\n      this.setState(prevState => ({\n        open: !prevState.open\n      }));\n    };\n\n    this.onSelectPrevSpace = (name, shape) => {\n      // we update some states\n      this.setState({\n        isPlanSelected: true\n      });\n      this.setState({\n        isUpdateCancel: false\n      });\n      this.setState({\n        selected_name: name\n      });\n      this.setState({\n        selected_plan: shape\n      });\n    };\n\n    this.onUpdatePlanSpace = () => {\n      console.log(\"onUpdate: \", this.state.selected_name);\n      axios.post(constants.UPDATE_LOCATE_MAP + this.state.selected_name, {\n        plan: this.state.selected_plan\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        console.log(res.data);\n        this.setState({\n          confirmDialogMsg: res.data.message\n        });\n        this.setState(prevState => ({\n          confirmDialog: !prevState.confirmDialog\n        })); //\n      }).catch(e => console.log(e));\n    };\n\n    this.onCancelUpdatePlanSpace = () => {\n      // monitor cancel button:\n      this.setState({\n        isUpdateCancel: true\n      });\n      this.setState({\n        isPlanSelected: false\n      });\n      this.setState({\n        isAlreadyOpened: 0\n      }); // this.setState({ selected_name: \"\" });\n      // this.setState({ selected_plan: {} });\n    };\n\n    this.onDeletePlanSpace = name => {\n      console.log(\"onDelete :\", name);\n      axios.delete(constants.DELETE_LOCATE_MAP + name).then(res => {\n        console.log(res.data);\n        this.setState({\n          confirmDialogMsg: res.data.message\n        });\n        this.setState(prevState => ({\n          confirmDialog: !prevState.confirmDialog\n        })); //\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.changeHandler = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      }); // toggle submit button ON and OFF\n\n      if (e.target.name == \"numberOfDevices\") {\n        if (e.target.value != 0 && /^\\d+$/.test(e.target.value)) {\n          this.setState({\n            btnSubmit: true\n          });\n        } else {\n          this.setState({\n            btnSubmit: false\n          });\n        }\n      }\n    };\n\n    this.submitHandler = e => {\n      e.preventDefault();\n      let api_data = {\n        sensor_number: this.state.numberOfDevices,\n        must_have_coordinates: this.state.mustHaveCoord,\n        // checking if the user selected a previously saved plan\n        // if true, use its geoGjson data, otherwise use the selected plan\n        polygon: this.state.isPlanSelected == true ? this.state.selected_plan : this.state.plan\n      };\n      console.log(api_data);\n      axios.post(constants.RUN_LOCATE_MODEL, api_data, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        const myData = res.data;\n        console.log(myData);\n        let myPolygons = [];\n\n        try {\n          myData.forEach(element => {\n            if (element[\"properties.district\"]) {\n              myPolygons.push({\n                type: \"Feature\",\n                properties: {\n                  district: element[\"properties.district\"],\n                  subcounty: element[\"properties.subcounty\"],\n                  parish: element[\"properties.parish\"],\n                  lat: element[\"properties.lat\"],\n                  long: element[\"properties.long\"],\n                  color: element[\"color\"],\n                  fill_color: element[\"fill_color\"],\n                  type: element.type\n                },\n                geometry: {\n                  type: \"Polygon\",\n                  coordinates: element[\"geometry.coordinates\"]\n                }\n              });\n            } else {\n              myPolygons.push({\n                type: \"Feature\",\n                properties: {\n                  district: element.properties.district,\n                  subcounty: element.properties.subcounty,\n                  parish: element.properties.parish,\n                  lat: element.properties.lat,\n                  long: element.properties.long,\n                  color: element.color,\n                  fill_color: element.fill_color,\n                  type: element.type\n                },\n                geometry: {\n                  type: \"Polygon\",\n                  coordinates: element.geometry.coordinates\n                }\n              });\n            }\n          });\n          this.setState({\n            polygons: myPolygons,\n            btnClear: true\n          });\n          {\n            /*download files*/\n          }\n          let toCsv = [];\n\n          if (this.state.selectedOption.value === \"CSV\") {\n            myData.forEach(element => {\n              toCsv.push({\n                type: \"Feature\",\n                properties: {\n                  district: element[\"properties.district\"],\n                  subcounty: element[\"properties.subcounty\"],\n                  parish: element[\"properties.parish\"],\n                  lat: element[\"properties.lat\"],\n                  long: element[\"properties.long\"]\n                }\n              });\n            });\n            jsonexport(toCsv, function (err, csv) {\n              if (err) return console.log(err);\n              var filename = \"parish_recommendations.csv\";\n              var link = document.createElement('a');\n              link.setAttribute('href', 'data:text/csv;charset=utf-8,%EF%BB%BF' + encodeURIComponent(csv));\n              link.setAttribute('download', filename);\n              link.style.visibility = 'hidden';\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            });\n          } else {\n            var doc = new jsPDF('p', 'pt', 'a4');\n            var rows = [];\n\n            var header = function (data) {\n              doc.setFontSize(18);\n              doc.setTextColor(40);\n              doc.setFontStyle('normal'); //doc.addImage(headerImgData, 'JPEG', data.settings.margin.left, 20, 50, 50);\n\n              doc.text(\"RECOMMENDED PARISHES\", data.settings.margin.left, 50);\n            };\n\n            var col = ['type', 'District', 'Subcounty', 'Parish', 'lat', 'long'];\n            myPolygons.forEach(element => {\n              var temp = [element.type, element.properties.district, element.properties.subcounty, element.properties.parish, element.properties.lat, element.properties.long];\n              rows.push(temp);\n            });\n            doc.autoTable(col, rows, {\n              margin: {\n                top: 80\n              },\n              beforePageContent: header\n            });\n            doc.save('parish_recommendations.pdf');\n          }\n        } catch (error) {\n          console.log(\"An error occured. Please try again\");\n        }\n      });\n    };\n\n    this._onEdited = e => {\n      //let type = e.layerType;\n      let layer = e.layers;\n\n      if (this.state.isPlanSelected == true) {\n        // when we are working with previously saved plan\n        this.setState({\n          plan: layer.toGeoJSON()\n        });\n        this.setState({\n          selected_plan: layer.toGeoJSON()\n        });\n        this.setState({\n          geoJSONDATA: JSON.stringify(layer.toGeoJSON())\n        });\n        console.log(\"edit saved plan: \", JSON.stringify(layer.toGeoJSON()));\n      } else {\n        // otherwise\n        this.setState({\n          plan: layer.toGeoJSON()\n        });\n        this.setState({\n          geoJSONDATA: JSON.stringify(layer.toGeoJSON())\n        });\n        console.log(\"edit new plan: \", JSON.stringify(layer.toGeoJSON()));\n      } //console.log(\"_onEdited\", type, JSON.stringify(layer.toGeoJSON()));\n\n    };\n\n    this._onCreated = e => {\n      let type = e.layerType;\n      let layer = e.layer;\n\n      if (type === \"marker\") {\n        // Do marker specific actions\n        console.log(\"_onCreated: marker created\", e);\n      }\n\n      if (type === \"polygon\") {\n        // here you got the polygon points\n        ///const points = layer._latlngs;\n        console.log(JSON.stringify(layer.toGeoJSON())); //console.log(JSON.stringify(layer.toGeoJSON()));\n\n        this.setState({\n          plan: layer.toGeoJSON()\n        }); //newly added\n\n        this.setState({\n          geoJSONDATA: JSON.stringify(layer.toGeoJSON())\n        });\n\n        if (this.state.clear) {\n          this.setState({\n            geoJSONDATA: \"\"\n          });\n        }\n      }\n\n      if (this.state.clear) {\n        this.setState({\n          geoJSONDATA: \"\"\n        });\n      }\n    };\n\n    this._onFeatureGroupReady = ref => {\n      if (ref === null) {\n        return;\n      }\n\n      this._editableFG = ref;\n\n      if (this.state.polygons) {\n        for (var i = 0; i < this.state.polygons.length; i++) {\n          //let leafletGeoJSON = new L.GeoJSON(this.state.polygons[i]);console.log(leafletGeoJSON);\n          try {\n            let leafletGeoJSON = new L.GeoJSON(this.state.polygons[i], {\n              onEachFeature: function (feature, layer) {\n                let popup_string = \"<b>DISTRICT: </b>\" + feature[\"properties\"][\"district\"] + \"<br/><b>SUBCOUNTY: </b>\" + feature[\"properties\"][\"subcounty\"] + \"<br/><b>PARISH: </b>\" + feature[\"properties\"][\"parish\"] + \"<br/><b>TYPE: </b>\" + feature[\"properties\"][\"type\"];\n                layer.bindPopup(popup_string);\n                layer.on(\"mouseover\", function (e) {\n                  this.openPopup();\n                });\n                layer.on(\"mouseout\", function (e) {\n                  this.closePopup();\n                });\n              },\n              style: {\n                fillColor: this.state.polygons[i][\"properties\"][\"fill_color\"],\n                color: this.state.polygons[i][\"properties\"][\"color\"],\n                opacity: 100\n              }\n            });\n            let leafletFG = this._editableFG.leafletElement;\n            leafletGeoJSON.eachLayer(layer => leafletFG.addLayer(layer));\n          } catch (error) {\n            console.log(\"An error occured and some polygons may not have been shown!\");\n          }\n        } //console.log(toString(count)+' invalid polygons in results')\n\n      } else {\n        console.log(\"No polygons\");\n      } //Opening previously saved data\n\n\n      if (this.state.isPlanSelected && this.state.isAlreadyOpened == 0) {\n        // populate the leaflet FeatureGroup with the geoJson layers\n        var savedLeafletGeoJSON = new L.GeoJSON(this.state.selected_plan);\n        var savedLeafletFG = ref.leafletElement;\n        savedLeafletGeoJSON.eachLayer(layer => {\n          savedLeafletFG.addLayer(layer);\n        }); // prevent the map from opening twice on every state change\n\n        this.setState({\n          isAlreadyOpened: 1\n        });\n      }\n\n      if (this.state.isUpdateCancel) {\n        var savedLeafletFG = ref.leafletElement;\n        savedLeafletFG.eachLayer(function (layer) {\n          layer.remove(); //marker.remove();\n        }); // L.Map.eachLayer((layer) => {\n        //   savedLeafletFG.removeLayer(layer);\n        // });\n        //draw.deleteAll().getAll();\n\n        this.setState({\n          isPlanSelected: false\n        });\n        this.setState({\n          selected_name: \"\"\n        });\n        this.setState({\n          selected_plan: {}\n        });\n        this.setState({\n          isUpdateCancel: false\n        });\n      }\n    };\n\n    this.state = initialState; //from locate save\n\n    this.changeHandler = this.changeHandler.bind(this);\n    this.submitHandler = this.submitHandler.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.onSaveClicked = this.onSaveClicked.bind(this);\n    this.onOpenClicked = this.onOpenClicked.bind(this);\n    this.handleSaveClose = this.handleSaveClose.bind(this);\n    this.handleConfirmClose = this.handleConfirmClose.bind(this);\n    this.handleDownloadChange = this.handleDownloadChange.bind(this);\n    this.handleClear = this.handleClear.bind(this); // select previously saved data, update, delete\n\n    this.onSelectPrevSpace = this.onSelectPrevSpace.bind(this);\n    this.onUpdatePlanSpace = this.onUpdatePlanSpace.bind(this);\n    this.onDeletePlanSpace = this.onDeletePlanSpace.bind(this);\n    this.onCancelUpdatePlanSpace = this.onCancelUpdatePlanSpace.bind(this);\n  } // Retrieve previously saved planning space by this current user\n  // added from locateSave\n\n\n  render() {\n    //from locate form\n    const {\n      numberOfDevices,\n      mustHaveCoord\n    } = this.state;\n    const styles = {\n      backgroundColor: \"#FFF\",\n      zIndex: 999,\n      position: \"absolute\",\n      height: \"auto\",\n      width: 250,\n      opacity: 0.8 //marginTop: \"7em\"\n\n    }; // Save planning styles\n\n    const nested = {\n      paddingLeft: \"2em\"\n    }; // styling the save planning space menu\n\n    const savePlan = {\n      backgroundColor: \"#FFF\",\n      zIndex: 999,\n      position: \"absolute\",\n      height: \"auto\",\n      width: 250,\n      opacity: 0.8,\n      top: \"30em\"\n    }; // styling the delete planning space buttons\n\n    const btnStyles = {\n      color: \"red\",\n      fontWeight: \".3em\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: styles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      type: \"number\",\n      name: \"numberOfDevices\",\n      label: \"Number of Devices\",\n      keyboardType: \"numeric\",\n      placeholder: \"No. of devices\",\n      required: true,\n      value: numberOfDevices,\n      onChange: this.changeHandler,\n      fullWidth: true,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      name: \"mustHaveCoord\",\n      label: \"'Must Have' Locations\",\n      placeholder: \"[[Lng, Lat],...,[Lng, Lat]]\",\n      onChange: this.changeHandler,\n      value: mustHaveCoord,\n      fullWidth: true,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }), React.createElement(Select, {\n      options: typeOptions,\n      value: this.state.selectedOption,\n      onChange: this.handleDownloadChange,\n      placeholder: \"choose download option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), React.createElement(CardActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"submit\",\n      name: \"submit\",\n      disabled: this.state.btnSubmit === false ? \"true\" : \"\",\n      color: \"secondary\",\n      variant: \"contained\",\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(Button, {\n      type: \"button\",\n      name: \"clear\",\n      disabled: this.state.btnClear === false ? \"true\" : \"\",\n      onClick: this.handleClear,\n      color: \"secondary\",\n      variant: \"contained\",\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"Clear Space\")))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, this.state.isPlanSelected == true ? React.createElement(List, {\n      component: \"nav\",\n      \"aria-labelledby\": \"nested-list-subheader\",\n      style: savePlan,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      button: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }, React.createElement(UpdateIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    })), React.createElement(ListItemText, {\n      primary: \"Update\",\n      onClick: this.onUpdatePlanSpace,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    })), React.createElement(ListItem, {\n      button: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      style: btnStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    })), React.createElement(ListItemText, {\n      primary: \"Cancel\",\n      onClick: this.onCancelUpdatePlanSpace,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }))) : //save new placing space , list saved planning space\n    React.createElement(List, {\n      component: \"nav\",\n      \"aria-labelledby\": \"nested-list-subheader\",\n      style: savePlan,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      button: true,\n      disabled: Object.keys(this.state.plan).length === 0 ? \"true\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(SaveIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    })), React.createElement(ListItemText, {\n      primary: \"Save\",\n      onClick: this.onSaveClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    })), React.createElement(ListItem, {\n      button: true,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, React.createElement(InboxIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592\n      },\n      __self: this\n    })), React.createElement(ListItemText, {\n      primary: \"Open\",\n      onClick: this.onOpenClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }), this.state.open ? React.createElement(ExpandLess, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }) : React.createElement(ExpandMore, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    })), React.createElement(Collapse, {\n      in: this.state.open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, React.createElement(List, {\n      component: \"div\",\n      disablePadding: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, this.state.savedPlan != null ? this.state.savedPlan.map(s => React.createElement(ListItem, {\n      key: s._id,\n      button: true,\n      style: nested,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: s.space_name,\n      onClick: this.onSelectPrevSpace.bind(this, s.space_name, s.plan),\n      z: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      size: \"small\",\n      onClick: this.onDeletePlanSpace.bind(this, s.space_name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      style: btnStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    })))) : \"\"))), React.createElement(Dialog, {\n      open: this.state.openSave,\n      onClose: this.handleSaveClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637\n      },\n      __self: this\n    }, \"To save this planning space, please enter the name in the text field below. Thank you for using AirQo Locate service.\"), React.createElement(TextField, {\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"name\",\n      name: \"space_name\",\n      value: this.state.space_name,\n      onChange: this.changeHandler,\n      label: \"Save As\",\n      type: \"text\",\n      placeholder: \"airqo_locate_plan_001\",\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleSaveClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.savePlanningSpace,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(Dialog, {\n      open: this.state.confirmDialog,\n      onClose: this.handleConfirmClose,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      id: \"alert-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675\n      },\n      __self: this\n    }, this.state.confirmDialogMsg)), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleConfirmClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, \"OK\")))), React.createElement(Map, {\n      center: [this.props.mapDefaults.lat, this.props.mapDefaults.lng],\n      zoom: this.props.mapDefaults.zoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }), React.createElement(FullscreenControl, {\n      position: \"topright\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698\n      },\n      __self: this\n    }), React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, this.state.polygons.map(location => React.createElement(Marker, {\n      key: location.parish,\n      position: {\n        lat: location.properties.lat,\n        lng: location.properties.long\n      },\n      icon: new L.Icon({\n        iconUrl: \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-\" + location.properties.color + \".png\",\n        shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [1, -34],\n        shadowSize: [41, 41]\n      }),\n      onMouseOver: e => {\n        e.target.openPopup();\n      },\n      onMouseOut: e => {\n        e.target.closePopup();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 733\n      },\n      __self: this\n    }, \"DISTRICT: \"), location.properties.district, \", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, \"SUBCOUNTY: \"), location.properties.subcounty, \", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }, \"PARISH: \"), location.properties.parish, \", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }, \"TYPE: \"), location.properties.type)))))), React.createElement(FeatureGroup, {\n      ref: reactFGref => {\n        this._onFeatureGroupReady(reactFGref);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748\n      },\n      __self: this\n    }, React.createElement(EditControl, {\n      ref: \"edit\",\n      position: \"topright\",\n      onEdited: this._onEdited,\n      onCreated: this._onCreated,\n      onDeleted: this._onDeleted,\n      onMounted: this._onMounted,\n      onEditStart: this._onEditStart,\n      onEditStop: this._onEditStop,\n      onDeleteStart: this._onDeleteStart,\n      onDeleteStop: this._onDeleteStop,\n      draw: {\n        rectangle: false,\n        circle: false,\n        circlemarker: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    })))); // --- End of render function ---\n  }\n\n}\n\nMaps.propTypes = {\n  mapRenderDefaults: PropTypes.func.isRequired,\n  mapDefaults: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  mapDefaults: state.mapDefaults.initMap,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  mapRenderDefaults\n})(Maps);","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/AirQo-frontend/locate/src/views/components/Map/Map.js"],"names":["React","connect","mapRenderDefaults","PropTypes","constants","Select","Map","FeatureGroup","LayerGroup","TileLayer","Marker","Popup","EditControl","axios","L","marker","ElementClass","FullscreenControl","Button","TextField","CardActions","Divider","Card","CardBody","List","ListItem","ListItemIcon","ListItemText","Collapse","InboxIcon","SaveIcon","ExpandLess","ExpandMore","Dialog","DialogActions","DialogContent","DialogContentText","CloseIcon","UpdateIcon","jsPDF","jsonexport","geoJsonPolygon","typeOptions","value","label","initialState","api_data","polygons","markers","plan","numberOfDevices","mustHaveCoord","btnSubmit","btnClear","clear","geoJSONDATA","open","openSave","confirmDialog","savedPlan","space_name","selected_name","selected_plan","isPlanSelected","isUpdateCancel","isAlreadyOpened","confirmDialogMsg","selectedOption","Maps","Component","constructor","props","onOpenClicked","get","GET_LOCATE_MAP","auth","user","_id","then","res","setState","data","console","log","catch","e","savePlanningSpace","prevState","post","SAVE_LOCATE_MAP","user_id","state","headers","message","onSaveClicked","handleSaveClose","changeHandler","target","name","handleDownloadChange","selected","handleClear","leafletFG","_editableFG","leafletElement","eachLayer","layer","remove","handleConfirmClose","handleClick","onSelectPrevSpace","shape","onUpdatePlanSpace","UPDATE_LOCATE_MAP","onCancelUpdatePlanSpace","onDeletePlanSpace","delete","DELETE_LOCATE_MAP","test","submitHandler","preventDefault","sensor_number","must_have_coordinates","polygon","RUN_LOCATE_MODEL","myData","myPolygons","forEach","element","push","type","properties","district","subcounty","parish","lat","long","color","fill_color","geometry","coordinates","toCsv","err","csv","filename","link","document","createElement","setAttribute","encodeURIComponent","style","visibility","body","appendChild","click","removeChild","doc","rows","header","setFontSize","setTextColor","setFontStyle","text","settings","margin","left","col","temp","autoTable","top","beforePageContent","save","error","_onEdited","layers","toGeoJSON","JSON","stringify","_onCreated","layerType","_onFeatureGroupReady","ref","i","length","leafletGeoJSON","GeoJSON","onEachFeature","feature","popup_string","bindPopup","on","openPopup","closePopup","fillColor","opacity","addLayer","savedLeafletGeoJSON","savedLeafletFG","bind","render","styles","backgroundColor","zIndex","position","height","width","nested","paddingLeft","savePlan","btnStyles","fontWeight","Object","keys","map","s","mapDefaults","lng","zoom","location","Icon","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","reactFGref","_onDeleted","_onMounted","_onEditStart","_onEditStop","_onDeleteStart","_onDeleteStop","rectangle","circle","circlemarker","propTypes","func","isRequired","object","mapStateToProps","initMap"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { mapRenderDefaults } from \"../../../redux/Maps/actions\";\r\nimport PropTypes from \"prop-types\";\r\nimport constants from \"../../../config/constants.js\";\r\nimport Select from 'react-select';\r\n\r\nimport {\r\n  Map,\r\n  FeatureGroup,\r\n  LayerGroup,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n} from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\";\r\nimport axios from \"axios\";\r\nimport L, { marker } from \"leaflet\";\r\nimport { ElementClass } from \"enzyme\";\r\nimport FullscreenControl from \"react-leaflet-fullscreen\";\r\nimport \"react-leaflet-fullscreen/dist/styles.css\";\r\n// import MapMenu from \"./MapMenu\";\r\n// From locate MAP\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { CardActions, Divider } from \"@material-ui/core\";\r\nimport Card from \"../Card/Card.js\";\r\nimport CardBody from \"../Card/CardBody.js\";\r\n//--End--\r\n\r\n// From Locate Save\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport UpdateIcon from \"@material-ui/icons/Update\";\r\n//import Select from '@material-ui/core/Select';\r\n\r\n//download csv and pdf\r\nimport jsPDF from 'jspdf'\r\nimport 'jspdf-autotable'\r\nimport jsonexport from 'jsonexport'\r\n\r\n\r\n// -- End --\r\n\r\nlet geoJsonPolygon;\r\n\r\nconst typeOptions = [\r\n  {value: '', label:'choose download option'},\r\n  { value: 'CSV', label: 'CSV'},\r\n  { value: 'PDF', label: 'PDF'},\r\n];\r\n\r\nconst initialState = {\r\n  api_data: {},\r\n  polygons: [],\r\n  markers: [[0.32, 32.598]],\r\n  // gets the shapefile format to save (polygon drawn within the planning space)\r\n  plan: {},\r\n  // State: locate form\r\n  numberOfDevices: 0,\r\n  mustHaveCoord: \"\",\r\n  // activates/deactivates locate submit button accordingly\r\n  btnSubmit: false,\r\n  // activates/deactivates clear planning space button accordingly\r\n  btnClear:false,\r\n\r\n  //for conditional rendering of clear button\r\n  clear:true,      \r\n\r\n  //newly added - passed to the model endpoint\r\n  geoJSONDATA: \"\",\r\n  // added from locateSave -- helps with saving data and dialog boxes\r\n  open: false,\r\n  openSave: false,\r\n  confirmDialog: false,\r\n  savedPlan: [], // stores previously saved data\r\n  space_name: \"\",\r\n\r\n  // states for opening and updating previously saved data\r\n  selected_name: \"\",\r\n  selected_plan: {},\r\n  isPlanSelected: false,\r\n  isUpdateCancel: false,\r\n  isAlreadyOpened: 0, // prevents the map from loading more than once on every state change\r\n\r\n  // handle all the popup msg\r\n  confirmDialogMsg: \"\",\r\n  selectedOption: {value:' ',label:''},\r\n}\r\n\r\nclass Maps extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initialState;\r\n\r\n    //from locate save\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n    this.submitHandler = this.submitHandler.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.onSaveClicked = this.onSaveClicked.bind(this);\r\n    this.onOpenClicked = this.onOpenClicked.bind(this);\r\n    this.handleSaveClose = this.handleSaveClose.bind(this);\r\n    this.handleConfirmClose = this.handleConfirmClose.bind(this);\r\n    this.handleDownloadChange = this.handleDownloadChange.bind(this);\r\n    this.handleClear = this.handleClear.bind(this);\r\n\r\n    // select previously saved data, update, delete\r\n    this.onSelectPrevSpace = this.onSelectPrevSpace.bind(this);\r\n    this.onUpdatePlanSpace = this.onUpdatePlanSpace.bind(this);\r\n    this.onDeletePlanSpace = this.onDeletePlanSpace.bind(this);\r\n    this.onCancelUpdatePlanSpace = this.onCancelUpdatePlanSpace.bind(this);\r\n  }\r\n  // Retrieve previously saved planning space by this current user\r\n  // added from locateSave\r\n  onOpenClicked = () => {\r\n    axios\r\n      .get(constants.GET_LOCATE_MAP + this.props.auth.user._id)\r\n      .then((res) => {\r\n        this.setState({ savedPlan: res.data });\r\n        console.log(res.data);\r\n        //console.log(this.state, \"current user: \", this.props.auth.user._id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  // save planning space\r\n  savePlanningSpace = () => {\r\n    // open the save planning space dialog\r\n    this.setState((prevState) => ({ openSave: !prevState.openSave }));\r\n    // make api call\r\n    // console.log(\"plan: \", this.state.plan);\r\n    axios\r\n      .post(\r\n        constants.SAVE_LOCATE_MAP,\r\n        {\r\n          user_id: this.props.auth.user._id,\r\n          space_name: this.state.space_name,\r\n          plan: this.state.plan,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.setState({ confirmDialogMsg: res.data.message });\r\n        this.setState((prevState) => ({\r\n          confirmDialog: !prevState.confirmDialog,\r\n        })); //\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  // This deals with save planing space dialog box\r\n  onSaveClicked = () => {\r\n    this.setState((prevState) => ({ openSave: !prevState.openSave }));\r\n  };\r\n  handleSaveClose = () => {\r\n    this.setState((prevState) => ({ openSave: !prevState.openSave }));\r\n    //console.log(this.state, this.props.plan, this.props.user_id);\r\n  };\r\n  // hooks the planning space textfield input\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  //handles download input\r\n  handleDownloadChange = (selected) => {\r\n    this.setState( {selectedOption:selected});\r\n    //console.log(`Option selected:`, selected)\r\n  }\r\n\r\n  handleClear=()=>{\r\n    this.setState(initialState);\r\n    let leafletFG = this._editableFG.leafletElement;\r\n    leafletFG.eachLayer(function (layer) { layer.remove(); \r\n    })\r\n\r\n  }\r\n\r\n  // Handles saved space confirmation feedback\r\n  handleConfirmClose = () => {\r\n    this.setState((prevState) => ({ confirmDialog: !prevState.confirmDialog }));\r\n  };\r\n\r\n  // load previously saved space\r\n  handleClick = () => {\r\n    this.setState((prevState) => ({ open: !prevState.open }));\r\n  };\r\n  //--End-----------------------------------------------------------\r\n\r\n  // ---------selected previously saved space\r\n  onSelectPrevSpace = (name, shape) => {\r\n    // we update some states\r\n    this.setState({ isPlanSelected: true });\r\n    this.setState({ isUpdateCancel: false });\r\n    this.setState({ selected_name: name });\r\n    this.setState({ selected_plan: shape });\r\n  };\r\n  // update saved space\r\n  onUpdatePlanSpace = () => {\r\n    console.log(\"onUpdate: \", this.state.selected_name);\r\n    axios\r\n      .post(\r\n        constants.UPDATE_LOCATE_MAP + this.state.selected_name,\r\n        {\r\n          plan: this.state.selected_plan,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        this.setState({ confirmDialogMsg: res.data.message });\r\n        this.setState((prevState) => ({\r\n          confirmDialog: !prevState.confirmDialog,\r\n        })); //\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  onCancelUpdatePlanSpace = () => {\r\n    // monitor cancel button:\r\n    this.setState({ isUpdateCancel: true });\r\n    this.setState({ isPlanSelected: false });\r\n    this.setState({ isAlreadyOpened: 0 });\r\n    // this.setState({ selected_name: \"\" });\r\n    // this.setState({ selected_plan: {} });\r\n  };\r\n\r\n  // Delete previously saved space\r\n  onDeletePlanSpace = (name) => {\r\n    console.log(\"onDelete :\", name);\r\n    axios\r\n      .delete(constants.DELETE_LOCATE_MAP + name)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        this.setState({ confirmDialogMsg: res.data.message });\r\n        this.setState((prevState) => ({\r\n          confirmDialog: !prevState.confirmDialog,\r\n        })); //\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //----end-----------------------\r\n\r\n  // From LocateForm\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n    // toggle submit button ON and OFF\r\n    if (e.target.name == \"numberOfDevices\") {\r\n      if (e.target.value != 0 && /^\\d+$/.test(e.target.value)) {\r\n        this.setState({ btnSubmit: true });\r\n      } else {\r\n        this.setState({ btnSubmit: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    let api_data = {\r\n      sensor_number: this.state.numberOfDevices,\r\n      must_have_coordinates: this.state.mustHaveCoord,\r\n      // checking if the user selected a previously saved plan\r\n      // if true, use its geoGjson data, otherwise use the selected plan\r\n      polygon:\r\n        this.state.isPlanSelected == true\r\n          ? this.state.selected_plan\r\n          : this.state.plan,\r\n    };\r\n    console.log(api_data);\r\n    axios\r\n      .post(constants.RUN_LOCATE_MODEL, api_data, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      })\r\n      .then((res) => {\r\n        const myData = res.data;\r\n        console.log(myData);\r\n\r\n        let myPolygons = [];\r\n\r\n        try {\r\n          myData.forEach((element) => {\r\n            if (element[\"properties.district\"]) {\r\n              myPolygons.push({\r\n                type: \"Feature\",\r\n                properties: {\r\n                  district: element[\"properties.district\"],\r\n                  subcounty: element[\"properties.subcounty\"],\r\n                  parish: element[\"properties.parish\"],\r\n                  lat: element[\"properties.lat\"],\r\n                  long: element[\"properties.long\"],\r\n                  color: element[\"color\"],\r\n                  fill_color: element[\"fill_color\"],\r\n                  type: element.type,\r\n                },\r\n                geometry: {\r\n                  type: \"Polygon\",\r\n                  coordinates: element[\"geometry.coordinates\"],\r\n                },\r\n              });\r\n            } else {\r\n              myPolygons.push({\r\n                type: \"Feature\",\r\n                properties: {\r\n                  district: element.properties.district,\r\n                  subcounty: element.properties.subcounty,\r\n                  parish: element.properties.parish,\r\n                  lat: element.properties.lat,\r\n                  long: element.properties.long,\r\n                  color: element.color,\r\n                  fill_color: element.fill_color,\r\n                  type: element.type,\r\n                },\r\n                geometry: {\r\n                  type: \"Polygon\",\r\n                  coordinates: element.geometry.coordinates,\r\n                },\r\n              });\r\n            }\r\n          });\r\n\r\n          this.setState({\r\n            polygons: myPolygons,\r\n            btnClear:true,\r\n          });\r\n        {/*download files*/}\r\n         let toCsv =[]\r\n         if(this.state.selectedOption.value ===\"CSV\"){\r\n         \r\n          myData.forEach(element => {\r\n              toCsv.push({\r\n              type: \"Feature\",\r\n              properties: {\r\n            district: element[\"properties.district\"],\r\n                subcounty: element[\"properties.subcounty\"],\r\n                parish: element[\"properties.parish\"],\r\n                lat: element[\"properties.lat\"],\r\n                long: element[\"properties.long\"],\r\n              }\r\n            });\r\n          });\r\n          jsonexport(toCsv,function(err, csv){\r\n            if(err) return console.log(err);\r\n            var filename =\"parish_recommendations.csv\"\r\n            var link = document.createElement('a');\r\n          link.setAttribute('href', 'data:text/csv;charset=utf-8,%EF%BB%BF' + encodeURIComponent(csv));\r\n          link.setAttribute('download', filename);\r\n          link.style.visibility = 'hidden';\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          document.body.removeChild(link); \r\n      });\r\n    }\r\n    else{\r\n    var doc = new jsPDF('p', 'pt','a4');\r\n     var rows = [];  \r\n      var header = function (data) {\r\n                        doc.setFontSize(18);\r\n                        doc.setTextColor(40);\r\n                        doc.setFontStyle('normal');\r\n    //doc.addImage(headerImgData, 'JPEG', data.settings.margin.left, 20, 50, 50);\r\n                        doc.text(\"RECOMMENDED PARISHES\", data.settings.margin.left, 50);\r\n                    }; \r\n    var col =['type','District','Subcounty','Parish','lat','long']\r\n      myPolygons.forEach(element => {      \r\n            var temp = [element.type,element.properties.district,element.properties.subcounty,element.properties.parish,element.properties.lat,element.properties.long];\r\n            rows.push(temp);\r\n     });     \r\n    doc.autoTable(col, rows, {margin: {top: 80}, beforePageContent: header});\r\n    doc.save('parish_recommendations.pdf');\r\n    }\r\n       \r\n       \r\n       \r\n        } catch (error) {\r\n          console.log(\"An error occured. Please try again\");\r\n        }\r\n      });\r\n  };\r\n  //--End----------------------------------------------------------\r\n\r\n  _onEdited = (e) => {\r\n    //let type = e.layerType;\r\n    let layer = e.layers;\r\n\r\n    if (this.state.isPlanSelected == true) {\r\n      // when we are working with previously saved plan\r\n      this.setState({ plan: layer.toGeoJSON() });\r\n      this.setState({ selected_plan: layer.toGeoJSON() });\r\n      this.setState({ geoJSONDATA: JSON.stringify(layer.toGeoJSON()) });\r\n      console.log(\"edit saved plan: \", JSON.stringify(layer.toGeoJSON()));\r\n    } else {\r\n      // otherwise\r\n      this.setState({ plan: layer.toGeoJSON() });\r\n      this.setState({ geoJSONDATA: JSON.stringify(layer.toGeoJSON()) });\r\n      console.log(\"edit new plan: \", JSON.stringify(layer.toGeoJSON()));\r\n    }\r\n\r\n    //console.log(\"_onEdited\", type, JSON.stringify(layer.toGeoJSON()));\r\n  };\r\n\r\n  _onCreated = (e) => {\r\n    let type = e.layerType;\r\n    let layer = e.layer;\r\n    if (type === \"marker\") {\r\n      // Do marker specific actions\r\n      console.log(\"_onCreated: marker created\", e);\r\n    }\r\n    if (type === \"polygon\") {\r\n          // here you got the polygon points\r\n          ///const points = layer._latlngs;\r\n          console.log(JSON.stringify(layer.toGeoJSON()));\r\n          //console.log(JSON.stringify(layer.toGeoJSON()));\r\n          this.setState({ plan: layer.toGeoJSON() });\r\n          //newly added\r\n          this.setState({ geoJSONDATA: JSON.stringify(layer.toGeoJSON()) });\r\n          if (this.state.clear){\r\n            this.setState({ geoJSONDATA: \"\" }); \r\n          }\r\n      }\r\n      if (this.state.clear){\r\n        this.setState({ geoJSONDATA: \"\" }); \r\n      }\r\n\r\n  };\r\n\r\n  render() {\r\n    //from locate form\r\n    const { numberOfDevices, mustHaveCoord } = this.state;\r\n\r\n    const styles = {\r\n      backgroundColor: \"#FFF\",\r\n      zIndex: 999,\r\n      position: \"absolute\",\r\n      height: \"auto\",\r\n      width: 250,\r\n      opacity: 0.8,\r\n      //marginTop: \"7em\"\r\n    };\r\n\r\n    // Save planning styles\r\n    const nested = {\r\n      paddingLeft: \"2em\",\r\n    };\r\n    // styling the save planning space menu\r\n    const savePlan = {\r\n      backgroundColor: \"#FFF\",\r\n      zIndex: 999,\r\n      position: \"absolute\",\r\n      height: \"auto\",\r\n      width: 250,\r\n      opacity: 0.8,\r\n      top: \"30em\",\r\n    };\r\n    // styling the delete planning space buttons\r\n    const btnStyles = {\r\n      color: \"red\",\r\n      fontWeight: \".3em\",\r\n    };\r\n    return (\r\n      <div>\r\n        {/* Adding MapMenu */}\r\n        {/* <MapMenu geojson={this.state.plan} /> */}\r\n        {/* Adding Locate Form */}\r\n        <div style={styles}>\r\n          <form noValidate autoComplete=\"off\" onSubmit={this.submitHandler}>\r\n            <Divider />\r\n            <TextField\r\n              type=\"number\"\r\n              name=\"numberOfDevices\"\r\n              label=\"Number of Devices\"\r\n              keyboardType=\"numeric\"\r\n              placeholder=\"No. of devices\"\r\n              required\r\n              value={numberOfDevices}\r\n              onChange={this.changeHandler}\r\n              fullWidth\r\n              margin=\"normal\"\r\n            />\r\n            <TextField\r\n              name=\"mustHaveCoord\"\r\n              label=\"'Must Have' Locations\"\r\n              placeholder=\"[[Lng, Lat],...,[Lng, Lat]]\"\r\n              onChange={this.changeHandler}\r\n              value={mustHaveCoord}\r\n              fullWidth\r\n              margin=\"normal\"\r\n            />\r\n             <Select \r\n             options = {typeOptions} \r\n             value ={this.state.selectedOption}\r\n             onChange ={this.handleDownloadChange} \r\n             placeholder= {\"choose download option\"}\r\n             />\r\n            <CardActions>\r\n              <Button\r\n                type=\"submit\"\r\n                name=\"submit\"\r\n                disabled={this.state.btnSubmit === false ? \"true\" : \"\"}\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n              >\r\n                Submit\r\n              </Button>\r\n              <Button\r\n                type=\"button\"\r\n                name=\"clear\"\r\n                disabled={this.state.btnClear === false ? \"true\" : \"\"}\r\n                onClick={this.handleClear}\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n              >\r\n                Clear Space\r\n              </Button>\r\n            </CardActions>\r\n          </form>\r\n        </div>\r\n        {/* End of Locate Form Menu - Number of Devices and 'Must have locations */}\r\n\r\n        {/* Locate Save Menu */}\r\n        <div>\r\n          {/* Update planning space controls */}\r\n          {this.state.isPlanSelected == true ? (\r\n            <List\r\n              component=\"nav\"\r\n              aria-labelledby=\"nested-list-subheader\"\r\n              style={savePlan}\r\n            >\r\n              <ListItem button>\r\n                <ListItemIcon>\r\n                  <UpdateIcon />\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary=\"Update\"\r\n                  onClick={this.onUpdatePlanSpace}\r\n                />\r\n              </ListItem>\r\n              <ListItem button>\r\n                <ListItemIcon>\r\n                  <CloseIcon style={btnStyles} />\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary=\"Cancel\"\r\n                  onClick={this.onCancelUpdatePlanSpace}\r\n                />\r\n              </ListItem>\r\n            </List>\r\n          ) : (\r\n            //save new placing space , list saved planning space\r\n            <List\r\n              component=\"nav\"\r\n              aria-labelledby=\"nested-list-subheader\"\r\n              style={savePlan}\r\n            >\r\n              <ListItem\r\n                button\r\n                disabled={\r\n                  Object.keys(this.state.plan).length === 0 ? \"true\" : \"\"\r\n                }\r\n              >\r\n                <ListItemIcon>\r\n                  <SaveIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Save\" onClick={this.onSaveClicked} />\r\n              </ListItem>\r\n              <ListItem button onClick={this.handleClick}>\r\n                <ListItemIcon>\r\n                  <InboxIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Open\" onClick={this.onOpenClicked} />\r\n                {this.state.open ? <ExpandLess /> : <ExpandMore />}\r\n              </ListItem>\r\n              <Collapse in={this.state.open} timeout=\"auto\" unmountOnExit>\r\n                <List component=\"div\" disablePadding>\r\n                  {/* check of previously saved plan was successfully returned from the db */}\r\n                  {this.state.savedPlan != null\r\n                    ? this.state.savedPlan.map((s) => (\r\n                        <ListItem key={s._id} button style={nested}>\r\n                          <ListItemText\r\n                            primary={s.space_name}\r\n                            onClick={this.onSelectPrevSpace.bind(\r\n                              this,\r\n                              s.space_name,\r\n                              s.plan\r\n                            )}\r\nz                          />\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            onClick={this.onDeletePlanSpace.bind(\r\n                              this,\r\n                              s.space_name\r\n                            )}\r\n                          >\r\n                            <CloseIcon style={btnStyles} />\r\n                          </Button>\r\n                        </ListItem>\r\n                      ))\r\n                    : \"\"}\r\n                </List>\r\n              </Collapse>\r\n            </List>\r\n          )}\r\n\r\n          {/* Dialog for save locate data */}\r\n          <Dialog\r\n            open={this.state.openSave}\r\n            onClose={this.handleSaveClose}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            {/* <DialogTitle id=\"form-dialog-title\">Save Planning Space</DialogTitle> */}\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                To save this planning space, please enter the name in the text\r\n                field below. Thank you for using AirQo Locate service.\r\n              </DialogContentText>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                name=\"space_name\"\r\n                value={this.state.space_name}\r\n                onChange={this.changeHandler}\r\n                label=\"Save As\"\r\n                type=\"text\"\r\n                placeholder=\"airqo_locate_plan_001\"\r\n                fullWidth\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.handleSaveClose} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={this.savePlanningSpace} color=\"primary\">\r\n                Save\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          {/* Dialog for confirming saved location data  */}\r\n          <Dialog\r\n            open={this.state.confirmDialog}\r\n            onClose={this.handleConfirmClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            {/* <DialogTitle id=\"alert-dialog-title\">\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle> */}\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-description\">\r\n                {this.state.confirmDialogMsg}\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.handleConfirmClose} color=\"primary\">\r\n                OK\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n        {/* End of Locate Save Menu */}\r\n\r\n        {/* Map component starts here */}\r\n        <Map\r\n          center={[this.props.mapDefaults.lat, this.props.mapDefaults.lng]}\r\n          zoom={this.props.mapDefaults.zoom}\r\n        >\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n          />\r\n\r\n          <FullscreenControl position=\"topright\" />\r\n\r\n          <LayerGroup>\r\n            \r\n            {this.state.polygons.map((location) => (\r\n              <Marker\r\n                key={location.parish}\r\n                position={{\r\n                  lat: location.properties.lat,\r\n                  lng: location.properties.long,\r\n                }}\r\n                icon={\r\n                  new L.Icon({\r\n                    iconUrl:\r\n                      \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-\" +\r\n                      location.properties.color +\r\n                      \".png\",\r\n                    shadowUrl:\r\n                      \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\r\n                    iconSize: [25, 41],\r\n                    iconAnchor: [12, 41],\r\n                    popupAnchor: [1, -34],\r\n                    shadowSize: [41, 41],\r\n                  })\r\n                }\r\n                onMouseOver={(e) => {\r\n                  e.target.openPopup();\r\n                }}\r\n                onMouseOut={(e) => {\r\n                  e.target.closePopup();\r\n                }}\r\n              >\r\n                <Popup>\r\n                  <span>\r\n                    <span>\r\n                      <b>DISTRICT: </b>\r\n                      {location.properties.district}, <br />\r\n                      <b>SUBCOUNTY: </b>\r\n                      {location.properties.subcounty}, <br />\r\n                      <b>PARISH: </b>\r\n                      {location.properties.parish}, <br />\r\n                      <b>TYPE: </b>\r\n                      {location.properties.type}\r\n                    </span>\r\n                  </span>\r\n                </Popup>\r\n              </Marker>\r\n            ))}\r\n          </LayerGroup>\r\n\r\n          <FeatureGroup\r\n            ref={(reactFGref) => {\r\n              this._onFeatureGroupReady(reactFGref);\r\n            }}\r\n          >\r\n            <EditControl \r\n              ref=\"edit\"\r\n              position=\"topright\"\r\n              onEdited={this._onEdited}\r\n              onCreated={this._onCreated}\r\n              onDeleted={this._onDeleted}\r\n              onMounted={this._onMounted}\r\n              onEditStart={this._onEditStart}\r\n              onEditStop={this._onEditStop}\r\n              onDeleteStart={this._onDeleteStart}\r\n              onDeleteStop={this._onDeleteStop}\r\n              draw={{\r\n                rectangle: false,\r\n                circle: false,\r\n                circlemarker: false,\r\n              }}\r\n            />\r\n          </FeatureGroup>\r\n        </Map>\r\n      </div>\r\n    );\r\n    // --- End of render function ---\r\n  }\r\n\r\n  _onFeatureGroupReady = (ref) => {\r\n    if (ref === null) {\r\n      return;\r\n    }\r\n    this._editableFG = ref;\r\n    if (this.state.polygons) {\r\n      for (var i = 0; i < this.state.polygons.length; i++) {\r\n        //let leafletGeoJSON = new L.GeoJSON(this.state.polygons[i]);console.log(leafletGeoJSON);\r\n\r\n        try {\r\n          let leafletGeoJSON = new L.GeoJSON(this.state.polygons[i], {\r\n            onEachFeature: function (feature, layer) {\r\n              let popup_string =\r\n                \"<b>DISTRICT: </b>\" +\r\n                feature[\"properties\"][\"district\"] +\r\n                \"<br/><b>SUBCOUNTY: </b>\" +\r\n                feature[\"properties\"][\"subcounty\"] +\r\n                \"<br/><b>PARISH: </b>\" +\r\n                feature[\"properties\"][\"parish\"] +\r\n                \"<br/><b>TYPE: </b>\" +\r\n                feature[\"properties\"][\"type\"];\r\n              layer.bindPopup(popup_string);\r\n              layer.on(\"mouseover\", function (e) {\r\n                this.openPopup();\r\n              });\r\n              layer.on(\"mouseout\", function (e) {\r\n                this.closePopup();\r\n              });\r\n            },\r\n            style: {\r\n              fillColor: this.state.polygons[i][\"properties\"][\"fill_color\"],\r\n              color: this.state.polygons[i][\"properties\"][\"color\"],\r\n              opacity: 100,\r\n            },\r\n          });\r\n          let leafletFG = this._editableFG.leafletElement;\r\n          leafletGeoJSON.eachLayer((layer) => leafletFG.addLayer(layer));\r\n\r\n\r\n        } catch (error) {\r\n          console.log(\r\n            \"An error occured and some polygons may not have been shown!\"\r\n          );\r\n        }\r\n      }\r\n      //console.log(toString(count)+' invalid polygons in results')\r\n    } else {\r\n      console.log(\"No polygons\");\r\n    }\r\n    //Opening previously saved data\r\n    if (this.state.isPlanSelected && this.state.isAlreadyOpened == 0) {\r\n      // populate the leaflet FeatureGroup with the geoJson layers\r\n\r\n      var savedLeafletGeoJSON = new L.GeoJSON(this.state.selected_plan);\r\n      var savedLeafletFG = ref.leafletElement;\r\n      savedLeafletGeoJSON.eachLayer((layer) => {\r\n        savedLeafletFG.addLayer(layer);\r\n      });\r\n      // prevent the map from opening twice on every state change\r\n      this.setState({ isAlreadyOpened: 1 });\r\n    }\r\n\r\n    if (this.state.isUpdateCancel) {\r\n      var savedLeafletFG = ref.leafletElement;\r\n      savedLeafletFG.eachLayer(function (layer) {\r\n        layer.remove();\r\n        //marker.remove();\r\n      });\r\n      // L.Map.eachLayer((layer) => {\r\n      //   savedLeafletFG.removeLayer(layer);\r\n      // });\r\n      //draw.deleteAll().getAll();\r\n      this.setState({ isPlanSelected: false });\r\n      this.setState({ selected_name: \"\" });\r\n      this.setState({ selected_plan: {} });\r\n      this.setState({ isUpdateCancel: false });\r\n    }\r\n  };\r\n}\r\n\r\nMaps.propTypes = {\r\n  mapRenderDefaults: PropTypes.func.isRequired,\r\n  mapDefaults: PropTypes.object.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  mapDefaults: state.mapDefaults.initMap,\r\n  auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { mapRenderDefaults })(Maps);\r\n"]},"metadata":{},"sourceType":"module"}