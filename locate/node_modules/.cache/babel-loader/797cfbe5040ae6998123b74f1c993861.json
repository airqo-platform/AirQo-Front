{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\AirQo-frontend\\\\locate\\\\src\\\\views\\\\components\\\\DataDisplay\\\\DeviceManagement.js\";\nimport React, { useState, useEffect } from \"react\"; // react plugin for creating charts\n\nimport ChartistGraph from \"react-chartist\"; // @material-ui/core\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Icon from \"@material-ui/core/Icon\"; // @material-ui/icons\n\nimport DevicesIcon from \"@material-ui/icons/Devices\";\nimport AccessTime from \"@material-ui/icons/AccessTime\";\nimport BugReport from \"@material-ui/icons/BugReport\";\nimport Code from \"@material-ui/icons/Code\";\nimport Cloud from \"@material-ui/icons/Cloud\";\nimport RestoreIcon from \"@material-ui/icons/Restore\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport PowerIcon from \"@material-ui/icons/Power\";\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\nimport ScheduleIcon from \"@material-ui/icons/Schedule\";\nimport TasksWithoutEdits from \"../Tasks/TasksWithoutEdits\"; // core components\n\nimport GridItem from \"../Grid/GridItem.js\";\nimport GridContainer from \"../Grid/GridContainer.js\";\nimport Table from \"../Table/Table.js\";\nimport Tasks from \"../Tasks/Tasks.js\";\nimport CustomTabs from \"../CustomTabs/CustomTabs\";\nimport Card from \"../Card/Card.js\";\nimport CardHeader from \"../Card/CardHeader.js\";\nimport CardIcon from \"../Card/CardIcon.js\";\nimport CardBody from \"../Card/CardBody.js\";\nimport CardFooter from \"../Card/CardFooter.js\";\nimport { bugs, website, server } from \"../../variables/general.js\";\nimport { dailySalesChart, emailsSubscriptionChart, completedTasksChart, OnlineStatusChart } from \"../../variables/charts.js\";\nimport styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\nimport constants from \"../../../config/constants\";\nimport axios from \"axios\";\nconst useStyles = makeStyles(styles);\nexport default function DeviceManagement() {\n  //set states for storing device status\n  const [deviceStatusSummary, setStatusSummary] = useState();\n  const [noOfDevices, setNoOfDevices] = useState(0);\n  const [solarPowered, setSolarPowered] = useState(0);\n  const [batteryPowered, setBatteryPowered] = useState(0);\n  const [mainPowered, setMainPowered] = useState(0);\n  const [noDueMaintenance, setNoDueMaintenance] = useState(0); //const [noOfDevicesTS, setNoOfDevicesTS] = useState(0); //TS= ThinkSpeak\n\n  const classes = useStyles();\n  useEffect(() => {\n    // get total number of devices on the network\n    axios.get(constants.GET_DEVICE_STATUS_SUMMARY).then(({\n      data\n    }) => {\n      //console.log(data[0].loc_power_suppy);\n      let no_devices = 0;\n      data.map(item => {\n        no_devices++;\n      });\n      setStatusSummary(data);\n      setNoOfDevices(no_devices);\n    }); // get total number of devices on solar power or main power\n\n    axios.get(constants.GET_DEVICE_POWER_TYPE).then(({\n      data\n    }) => {\n      //console.log(data[0].loc_power_suppy);\n      let no_solar = 0,\n          no_main = 0,\n          no_battery = 0;\n      data.map(item => {\n        if (item.power == \"Solar\") {\n          no_solar = no_solar + 1;\n        }\n\n        if (item.power == \"Mains\") {\n          no_main = no_main + 1;\n        }\n\n        if (item.power == \"Battery\") {\n          no_battery = no_battery + 1;\n        }\n      });\n      setSolarPowered(no_solar);\n      setMainPowered(no_main);\n      setBatteryPowered(no_battery);\n    }); // get number of devices due for maintenance\n\n    axios.get(constants.GET_DEVICE_MAINTENANCE_LOG).then(({\n      data\n    }) => {\n      //console.log(data[0].loc_power_suppy);\n      let due_maintenance = new Array();\n      data.map(item => {\n        console.log(\"next maintained\", item.nextMaintenance);\n        let lst_maintained = item.nextMaintenance;\n        let past_date = new Date(lst_maintained);\n        let current_date = new Date();\n        let month_difference = past_date.getFullYear() * 12 + past_date.getMonth() - (current_date.getFullYear() * 12 + current_date.getMonth());\n        console.log(month_difference);\n\n        if (month_difference <= 0) {\n          // took two months without maintenance activity\n          due_maintenance.push(month_difference);\n        }\n      });\n      setNoDueMaintenance(due_maintenance.length);\n    }); //axios.get(constants.GET_TOTAL_DEVICES).then(({ data }) => {\n    // getting total number of devices directly from thinkspeak\n    //console.log(data.count);\n    // setNoOfDevicesTS(data.count);\n    //});\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 6,\n    md: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    stats: true,\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(DevicesIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    className: classes.cardCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Devices on the network\"), React.createElement(\"h3\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, noOfDevices)), React.createElement(CardFooter, {\n    stats: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 6,\n    md: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    stats: true,\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(RestoreIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    className: classes.cardCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Due for maintenance\"), React.createElement(\"h3\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \" \", noDueMaintenance)), React.createElement(CardFooter, {\n    stats: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 6,\n    md: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    stats: true,\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(WbSunnyIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    className: classes.cardCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"Solar powered\"), React.createElement(\"h3\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \" \", solarPowered)), React.createElement(CardFooter, {\n    stats: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 6,\n    md: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    stats: true,\n    icon: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(CardIcon, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(PowerIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    className: classes.cardCategory,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"Mains Powered\"), React.createElement(\"h3\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, mainPowered)), React.createElement(CardFooter, {\n    stats: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  })))), React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(Card, {\n    chart: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(ChartistGraph, {\n    className: \"ct-chart\",\n    data: dailySalesChart.data,\n    type: \"Line\",\n    options: dailySalesChart.options,\n    listener: dailySalesChart.animation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  })), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Average network uptime analysis\")), React.createElement(CardFooter, {\n    chart: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.stats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, React.createElement(AccessTime, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }), \" updated 4 minutes ago\")))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitleWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"Inactive Devices\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(Table, {\n    tableHeaderColor: \"primary\",\n    tableHead: [\"Device\", \"Location\", \"Type\", \"Carrier\"],\n    tableData: [[\"Bwaise-2020-01-15T13:16:43.218Z\", \"Bwaise\", \"static\", \"MTN\"], [\"Kamwokya-2020-01-15T13:16:43.218Z\", \"Kamwokya\", \"Static\", \"Airtel\"], [\"Lugazi-2020-01-15T13:16:43.218Z\", \"Lugazi\", \"Static\", \"MTN\"]],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  })))), React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, React.createElement(Card, {\n    chart: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, React.createElement(ChartistGraph, {\n    className: \"ct-chart\",\n    data: OnlineStatusChart.data,\n    type: \"Pie\",\n    options: OnlineStatusChart.options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  })), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, \"Online Status\")), React.createElement(CardFooter, {\n    chart: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.stats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, React.createElement(AccessTime, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }), \" updated 2 minutes ago\"))))), React.createElement(GridContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, React.createElement(CustomTabs, {\n    title: \"Incident Report:\",\n    headerColor: \"primary\",\n    tabs: [{\n      tabName: \"Issues\",\n      tabIcon: BugReport,\n      tabContent: React.createElement(TasksWithoutEdits, {\n        checkedIndexes: [0],\n        tasksIndexes: [0, 1, 2, 3],\n        tasks: bugs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      })\n    }, {\n      tabName: \"Schedule\",\n      tabIcon: ScheduleIcon,\n      tabContent: React.createElement(TasksWithoutEdits, {\n        checkedIndexes: [0],\n        tasksIndexes: [0, 1],\n        tasks: website,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      })\n    }, {\n      tabName: \"Alerts\",\n      tabIcon: NotificationsNoneIcon,\n      tabContent: React.createElement(TasksWithoutEdits, {\n        checkedIndexes: [0],\n        tasksIndexes: [0],\n        tasks: server,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      })\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  })), React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: classes.cardTitleWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }, \"Leaderboard\"), React.createElement(\"p\", {\n    className: classes.cardCategoryWhite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }, \"Best and worst performing devices\")), React.createElement(CardBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307\n    },\n    __self: this\n  }, React.createElement(Table, {\n    tableHeaderColor: \"primary\",\n    tableHead: [\"Device\", \"Location\", \"Type\", \"Days Active\"],\n    tableData: [[\"1\", \"Bwaise-2020-01-15T13:16:43.218Z\", \"Bwaise\", \"Static\"], [\"2\", \"Kamwokya-2020-01-15T13:16:43.218Z\", \"Kamwokya\", \"Static\"], [\"3\", \"Lugazi-2020-01-15T13:16:43.218Z\", \"Lugazi\", \"Static\"], [\"4\", \"Lugazi-2020-01-15T13:16:43.218Z\", \"Lugazi\", \"Static\"]],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/AirQo-frontend/locate/src/views/components/DataDisplay/DeviceManagement.js"],"names":["React","useState","useEffect","ChartistGraph","makeStyles","Icon","DevicesIcon","AccessTime","BugReport","Code","Cloud","RestoreIcon","WbSunnyIcon","PowerIcon","NotificationsNoneIcon","ScheduleIcon","TasksWithoutEdits","GridItem","GridContainer","Table","Tasks","CustomTabs","Card","CardHeader","CardIcon","CardBody","CardFooter","bugs","website","server","dailySalesChart","emailsSubscriptionChart","completedTasksChart","OnlineStatusChart","styles","constants","axios","useStyles","DeviceManagement","deviceStatusSummary","setStatusSummary","noOfDevices","setNoOfDevices","solarPowered","setSolarPowered","batteryPowered","setBatteryPowered","mainPowered","setMainPowered","noDueMaintenance","setNoDueMaintenance","classes","get","GET_DEVICE_STATUS_SUMMARY","then","data","no_devices","map","item","GET_DEVICE_POWER_TYPE","no_solar","no_main","no_battery","power","GET_DEVICE_MAINTENANCE_LOG","due_maintenance","Array","console","log","nextMaintenance","lst_maintained","past_date","Date","current_date","month_difference","getFullYear","getMonth","push","length","cardCategory","cardTitle","options","animation","stats","cardTitleWhite","tabName","tabIcon","tabContent","cardCategoryWhite"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// react plugin for creating charts\r\nimport ChartistGraph from \"react-chartist\";\r\n// @material-ui/core\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n// @material-ui/icons\r\nimport DevicesIcon from \"@material-ui/icons/Devices\";\r\nimport AccessTime from \"@material-ui/icons/AccessTime\";\r\nimport BugReport from \"@material-ui/icons/BugReport\";\r\nimport Code from \"@material-ui/icons/Code\";\r\nimport Cloud from \"@material-ui/icons/Cloud\";\r\nimport RestoreIcon from \"@material-ui/icons/Restore\";\r\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\r\nimport PowerIcon from \"@material-ui/icons/Power\";\r\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\r\nimport ScheduleIcon from \"@material-ui/icons/Schedule\";\r\nimport TasksWithoutEdits from \"../Tasks/TasksWithoutEdits\";\r\n// core components\r\nimport GridItem from \"../Grid/GridItem.js\";\r\nimport GridContainer from \"../Grid/GridContainer.js\";\r\nimport Table from \"../Table/Table.js\";\r\nimport Tasks from \"../Tasks/Tasks.js\";\r\nimport CustomTabs from \"../CustomTabs/CustomTabs\";\r\nimport Card from \"../Card/Card.js\";\r\nimport CardHeader from \"../Card/CardHeader.js\";\r\nimport CardIcon from \"../Card/CardIcon.js\";\r\nimport CardBody from \"../Card/CardBody.js\";\r\nimport CardFooter from \"../Card/CardFooter.js\";\r\n\r\nimport { bugs, website, server } from \"../../variables/general.js\";\r\n\r\nimport {\r\n  dailySalesChart,\r\n  emailsSubscriptionChart,\r\n  completedTasksChart,\r\n  OnlineStatusChart,\r\n} from \"../../variables/charts.js\";\r\n\r\nimport styles from \"assets/jss/material-dashboard-react/views/dashboardStyle.js\";\r\nimport constants from \"../../../config/constants\";\r\nimport axios from \"axios\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function DeviceManagement() {\r\n  //set states for storing device status\r\n  const [deviceStatusSummary, setStatusSummary] = useState();\r\n  const [noOfDevices, setNoOfDevices] = useState(0);\r\n  const [solarPowered, setSolarPowered] = useState(0);\r\n  const [batteryPowered, setBatteryPowered] = useState(0);\r\n  const [mainPowered, setMainPowered] = useState(0);\r\n  const [noDueMaintenance, setNoDueMaintenance] = useState(0);\r\n\r\n  //const [noOfDevicesTS, setNoOfDevicesTS] = useState(0); //TS= ThinkSpeak\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    // get total number of devices on the network\r\n    axios.get(constants.GET_DEVICE_STATUS_SUMMARY).then(({ data }) => {\r\n      //console.log(data[0].loc_power_suppy);\r\n      let no_devices = 0;\r\n      data.map((item) => {\r\n        no_devices++;\r\n      });\r\n      setStatusSummary(data);\r\n      setNoOfDevices(no_devices);\r\n    });\r\n\r\n    // get total number of devices on solar power or main power\r\n    axios.get(constants.GET_DEVICE_POWER_TYPE).then(({ data }) => {\r\n      //console.log(data[0].loc_power_suppy);\r\n      let no_solar = 0,\r\n        no_main = 0,\r\n        no_battery = 0;\r\n      data.map((item) => {\r\n        if (item.power == \"Solar\") {\r\n          no_solar = no_solar + 1;\r\n        }\r\n        if (item.power == \"Mains\") {\r\n          no_main = no_main + 1;\r\n        }\r\n        if (item.power == \"Battery\") {\r\n          no_battery = no_battery + 1;\r\n        }\r\n      });\r\n\r\n      setSolarPowered(no_solar);\r\n      setMainPowered(no_main);\r\n      setBatteryPowered(no_battery);\r\n    });\r\n\r\n    // get number of devices due for maintenance\r\n    axios.get(constants.GET_DEVICE_MAINTENANCE_LOG).then(({ data }) => {\r\n      //console.log(data[0].loc_power_suppy);\r\n      let due_maintenance = new Array();\r\n\r\n      data.map((item) => {\r\n        console.log(\"next maintained\", item.nextMaintenance);\r\n        let lst_maintained = item.nextMaintenance;\r\n        let past_date = new Date(lst_maintained);\r\n        let current_date = new Date();\r\n\r\n        let month_difference =\r\n          past_date.getFullYear() * 12 +\r\n          past_date.getMonth() -\r\n          (current_date.getFullYear() * 12 + current_date.getMonth());\r\n        console.log(month_difference);\r\n        if (month_difference <= 0) {\r\n          // took two months without maintenance activity\r\n          due_maintenance.push(month_difference);\r\n        }\r\n      });\r\n      setNoDueMaintenance(due_maintenance.length);\r\n    });\r\n\r\n    //axios.get(constants.GET_TOTAL_DEVICES).then(({ data }) => {\r\n    // getting total number of devices directly from thinkspeak\r\n    //console.log(data.count);\r\n    // setNoOfDevicesTS(data.count);\r\n    //});\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <GridContainer>\r\n        <GridItem xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardHeader color=\"primary\" stats icon>\r\n              <CardIcon color=\"primary\">\r\n                <DevicesIcon />\r\n              </CardIcon>\r\n              <p className={classes.cardCategory}>Devices on the network</p>\r\n              <h3 className={classes.cardTitle}>{noOfDevices}</h3>\r\n            </CardHeader>\r\n            <CardFooter stats></CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardHeader color=\"primary\" stats icon>\r\n              <CardIcon color=\"primary\">\r\n                <RestoreIcon />\r\n              </CardIcon>\r\n              <p className={classes.cardCategory}>Due for maintenance</p>\r\n              <h3 className={classes.cardTitle}> {noDueMaintenance}</h3>\r\n            </CardHeader>\r\n            <CardFooter stats></CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardHeader color=\"primary\" stats icon>\r\n              <CardIcon color=\"primary\">\r\n                <WbSunnyIcon />\r\n              </CardIcon>\r\n              <p className={classes.cardCategory}>Solar powered</p>\r\n              <h3 className={classes.cardTitle}> {solarPowered}</h3>\r\n              {/* <p className={classes.cardCategory}>Battery powered</p>\r\n              <h3 className={classes.cardTitle}> {batteryPowered}</h3> */}\r\n            </CardHeader>\r\n            <CardFooter stats></CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={6} md={3}>\r\n          <Card>\r\n            <CardHeader color=\"primary\" stats icon>\r\n              <CardIcon color=\"primary\">\r\n                <PowerIcon />\r\n              </CardIcon>\r\n              <p className={classes.cardCategory}>Mains Powered</p>\r\n              <h3 className={classes.cardTitle}>{mainPowered}</h3>\r\n            </CardHeader>\r\n            <CardFooter stats></CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n      </GridContainer>\r\n      <GridContainer>\r\n        <GridItem xs={12} sm={12} md={4}>\r\n          <Card chart>\r\n            <CardHeader color=\"info\">\r\n              <ChartistGraph\r\n                className=\"ct-chart\"\r\n                data={dailySalesChart.data}\r\n                type=\"Line\"\r\n                options={dailySalesChart.options}\r\n                listener={dailySalesChart.animation}\r\n              />\r\n            </CardHeader>\r\n            <CardBody>\r\n              <h4 className={classes.cardTitle}>\r\n                Average network uptime analysis\r\n              </h4>\r\n            </CardBody>\r\n            <CardFooter chart>\r\n              <div className={classes.stats}>\r\n                <AccessTime /> updated 4 minutes ago\r\n              </div>\r\n            </CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={12} md={4}>\r\n          <Card>\r\n            <CardHeader color=\"primary\">\r\n              <h4 className={classes.cardTitleWhite}>Inactive Devices</h4>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Table\r\n                tableHeaderColor=\"primary\"\r\n                tableHead={[\"Device\", \"Location\", \"Type\", \"Carrier\"]}\r\n                tableData={[\r\n                  [\r\n                    \"Bwaise-2020-01-15T13:16:43.218Z\",\r\n                    \"Bwaise\",\r\n                    \"static\",\r\n                    \"MTN\",\r\n                  ],\r\n                  [\r\n                    \"Kamwokya-2020-01-15T13:16:43.218Z\",\r\n                    \"Kamwokya\",\r\n                    \"Static\",\r\n                    \"Airtel\",\r\n                  ],\r\n                  [\r\n                    \"Lugazi-2020-01-15T13:16:43.218Z\",\r\n                    \"Lugazi\",\r\n                    \"Static\",\r\n                    \"MTN\",\r\n                  ],\r\n                ]}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem xs={12} sm={12} md={4}>\r\n          <Card chart>\r\n            <CardHeader color=\"info\">\r\n              <ChartistGraph\r\n                className=\"ct-chart\"\r\n                data={OnlineStatusChart.data}\r\n                type=\"Pie\"\r\n                options={OnlineStatusChart.options}\r\n              />\r\n            </CardHeader>\r\n            <CardBody>\r\n              <h4 className={classes.cardTitle}>Online Status</h4>\r\n            </CardBody>\r\n            <CardFooter chart>\r\n              <div className={classes.stats}>\r\n                <AccessTime /> updated 2 minutes ago\r\n              </div>\r\n            </CardFooter>\r\n          </Card>\r\n        </GridItem>\r\n      </GridContainer>\r\n      <GridContainer>\r\n        <GridItem xs={12} sm={12} md={6}>\r\n          <CustomTabs\r\n            title=\"Incident Report:\"\r\n            headerColor=\"primary\"\r\n            tabs={[\r\n              {\r\n                tabName: \"Issues\",\r\n                tabIcon: BugReport,\r\n                tabContent: (\r\n                  <TasksWithoutEdits\r\n                    checkedIndexes={[0]}\r\n                    tasksIndexes={[0, 1, 2, 3]}\r\n                    tasks={bugs}\r\n                  />\r\n                ),\r\n              },\r\n              {\r\n                tabName: \"Schedule\",\r\n                tabIcon: ScheduleIcon,\r\n                tabContent: (\r\n                  <TasksWithoutEdits\r\n                    checkedIndexes={[0]}\r\n                    tasksIndexes={[0, 1]}\r\n                    tasks={website}\r\n                  />\r\n                ),\r\n              },\r\n              {\r\n                tabName: \"Alerts\",\r\n                tabIcon: NotificationsNoneIcon,\r\n                tabContent: (\r\n                  <TasksWithoutEdits\r\n                    checkedIndexes={[0]}\r\n                    tasksIndexes={[0]}\r\n                    tasks={server}\r\n                  />\r\n                ),\r\n              },\r\n            ]}\r\n          />\r\n        </GridItem>\r\n        <GridItem xs={12} sm={12} md={6}>\r\n          <Card>\r\n            <CardHeader color=\"primary\">\r\n              <h4 className={classes.cardTitleWhite}>Leaderboard</h4>\r\n              <p className={classes.cardCategoryWhite}>\r\n                Best and worst performing devices\r\n              </p>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Table\r\n                tableHeaderColor=\"primary\"\r\n                tableHead={[\"Device\", \"Location\", \"Type\", \"Days Active\"]}\r\n                tableData={[\r\n                  [\"1\", \"Bwaise-2020-01-15T13:16:43.218Z\", \"Bwaise\", \"Static\"],\r\n                  [\r\n                    \"2\",\r\n                    \"Kamwokya-2020-01-15T13:16:43.218Z\",\r\n                    \"Kamwokya\",\r\n                    \"Static\",\r\n                  ],\r\n                  [\"3\", \"Lugazi-2020-01-15T13:16:43.218Z\", \"Lugazi\", \"Static\"],\r\n                  [\"4\", \"Lugazi-2020-01-15T13:16:43.218Z\", \"Lugazi\", \"Static\"],\r\n                ]}\r\n              />\r\n            </CardBody>\r\n          </Card>\r\n        </GridItem>\r\n      </GridContainer>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}