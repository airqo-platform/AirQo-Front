{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING, RESET_PWD_SUCCESS, RECOVERY_EMAIL_REQUEST } from \"./types\";\nimport constants from \"../../config/constants\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(constants.REGISTER_USER_URI, userData).then(res => {\n    try {\n      history.push(\"/login\");\n    } catch (e) {\n      console.log(e);\n    }\n  }) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Register User\n\nexport const registerCandidate = (userData, history) => dispatch => {\n  axios.post(constants.REGISTER_CANDIDATE_URI, userData).then(res => {\n    try {\n      history.push(\"/login\");\n    } catch (e) {\n      console.log(e);\n    }\n  }) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(constants.LOGIN_USER_URI, userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - forgot password\n\nexport const forgotPassword = userData => async dispatch => {\n  console.dir(userData);\n  await axios.post(constants.FORGOT_PWD_URI, userData).then(response => {\n    console.log(response.data);\n    dispatch({\n      type: RECOVERY_EMAIL_REQUEST,\n      payload: response.data\n    });\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const verifyToken = token => async dispatch => {\n  await axios.get(constants.VERIFY_TOKEN_URI, token).then(response => {\n    dispatch({\n      type: RESET_PWD_SUCCESS,\n      payload: response.data\n    });\n  }).catch(error => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response\n    });\n  });\n}; //update password\n\nexport const updatePassword = userData => {\n  axios.put(constants.UPDATE_PWD_URI, userData).then(response => {\n    console.log(response.data);\n\n    if (response.data.message === \"password updated\") {\n      this.setState({\n        updated: true,\n        error: false\n      });\n    } else {\n      this.setState({\n        updated: false,\n        error: true\n      });\n    }\n  }).catch(error => {\n    console.log(error.data);\n  });\n}; //deactivate join request\n\nexport const rejectUser = data => dispatch => {\n  axios.post(constants.REJECT_USER_URI, data).then(response => {\n    //just console log\n    console.log(\"the reject response\" + response);\n  }).catch(error => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response\n    });\n  });\n}; //activate join request\n\nexport const acceptUser = data => dispatch => {\n  axios.post(constants.ACCEPT_USER_URI, data).then(response => {\n    //just console log\n    console.log(\"the accept user response\" + response);\n  }).catch(error => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response\n    });\n  });\n}; //get all users\n\nexport const getUsers = data => dispatch => {\n  axios.get(constants.GET_USERS_URI, data).then(response => {\n    //just console log\n    console.log(\"the accept user response\" + response);\n  }).catch(error => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response\n    });\n  });\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/AirQo-frontend/locate/src/redux/Join/actions.js"],"names":["axios","setAuthToken","jwt_decode","Route","Redirect","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","RESET_PWD_SUCCESS","RECOVERY_EMAIL_REQUEST","constants","registerUser","userData","history","dispatch","post","REGISTER_USER_URI","then","res","push","e","console","log","catch","err","type","payload","response","data","registerCandidate","REGISTER_CANDIDATE_URI","loginUser","LOGIN_USER_URI","token","localStorage","setItem","decoded","setCurrentUser","forgotPassword","dir","FORGOT_PWD_URI","verifyToken","get","VERIFY_TOKEN_URI","error","updatePassword","put","UPDATE_PWD_URI","message","setState","updated","rejectUser","REJECT_USER_URI","acceptUser","ACCEPT_USER_URI","getUsers","GET_USERS_URI","setUserLoading","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport setAuthToken from \"../../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  USER_LOADING,\r\n  RESET_PWD_SUCCESS,\r\n  RECOVERY_EMAIL_REQUEST,\r\n} from \"./types\";\r\nimport constants from \"../../config/constants\";\r\n// Register User\r\nexport const registerUser = (userData, history) => (dispatch) => {\r\n  axios\r\n    .post(constants.REGISTER_USER_URI, userData)\r\n    .then((res) => {\r\n      try {\r\n        history.push(\"/login\");\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }) // re-direct to login on successful register\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Register User\r\nexport const registerCandidate = (userData, history) => (dispatch) => {\r\n  axios\r\n    .post(constants.REGISTER_CANDIDATE_URI, userData)\r\n    .then((res) => {\r\n      try {\r\n        history.push(\"/login\");\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }) // re-direct to login on successful register\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Login - get user token\r\nexport const loginUser = (userData) => (dispatch) => {\r\n  axios\r\n    .post(constants.LOGIN_USER_URI, userData)\r\n    .then((res) => {\r\n      // Save to localStorage\r\n      // Set token to localStorage\r\n      const { token } = res.data;\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      // Set token to Auth header\r\n      setAuthToken(token);\r\n      // Decode token to get user data\r\n      const decoded = jwt_decode(token);\r\n      // Set current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\n// Login - forgot password\r\nexport const forgotPassword = (userData) => async (dispatch) => {\r\n  console.dir(userData);\r\n  await axios\r\n    .post(constants.FORGOT_PWD_URI, userData)\r\n    .then((response) => {\r\n      console.log(response.data);\r\n      dispatch({\r\n        type: RECOVERY_EMAIL_REQUEST,\r\n        payload: response.data,\r\n      });\r\n    })\r\n    .catch((err) =>\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: err.response.data,\r\n      })\r\n    );\r\n};\r\n\r\nexport const verifyToken = (token) => async (dispatch) => {\r\n  await axios\r\n    .get(constants.VERIFY_TOKEN_URI, token)\r\n    .then((response) => {\r\n      dispatch({\r\n        type: RESET_PWD_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: error.response,\r\n      });\r\n    });\r\n};\r\n\r\n//update password\r\nexport const updatePassword = (userData) => {\r\n  axios\r\n    .put(constants.UPDATE_PWD_URI, userData)\r\n    .then((response) => {\r\n      console.log(response.data);\r\n      if (response.data.message === \"password updated\") {\r\n        this.setState({\r\n          updated: true,\r\n          error: false,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          updated: false,\r\n          error: true,\r\n        });\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.log(error.data);\r\n    });\r\n};\r\n\r\n//deactivate join request\r\nexport const rejectUser = (data) => (dispatch) => {\r\n  axios\r\n    .post(constants.REJECT_USER_URI, data)\r\n    .then((response) => {\r\n      //just console log\r\n      console.log(\"the reject response\" + response);\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: error.response,\r\n      });\r\n    });\r\n};\r\n\r\n//activate join request\r\nexport const acceptUser = (data) => (dispatch) => {\r\n  axios\r\n    .post(constants.ACCEPT_USER_URI, data)\r\n    .then((response) => {\r\n      //just console log\r\n      console.log(\"the accept user response\" + response);\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: error.response,\r\n      });\r\n    });\r\n};\r\n\r\n//get all users\r\nexport const getUsers = (data) => (dispatch) => {\r\n  axios\r\n    .get(constants.GET_USERS_URI, data)\r\n    .then((response) => {\r\n      //just console log\r\n      console.log(\"the accept user response\" + response);\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: GET_ERRORS,\r\n        payload: error.response,\r\n      });\r\n    });\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = (decoded) => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded,\r\n  };\r\n};\r\n// User loading\r\nexport const setUserLoading = () => {\r\n  return {\r\n    type: USER_LOADING,\r\n  };\r\n};\r\n// Log user out\r\nexport const logoutUser = () => (dispatch) => {\r\n  // Remove token from local storage\r\n  localStorage.removeItem(\"jwtToken\");\r\n  // Remove auth header for future requests\r\n  setAuthToken(false);\r\n  // Set current user to empty object {} which will set isAuthenticated to false\r\n  dispatch(setCurrentUser({}));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}