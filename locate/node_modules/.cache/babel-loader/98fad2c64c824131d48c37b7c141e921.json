{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\AirQo-frontend\\\\locate\\\\src\\\\views\\\\components\\\\DataDisplay\\\\Map\\\\Map.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Map as LeafletMap, TileLayer, Popup, Marker } from 'react-leaflet';\nimport { Link } from 'react-router-dom';\nimport { Card, CardContent, CardHeader, Divider } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport FullscreenControl from 'react-leaflet-fullscreen';\nimport 'react-leaflet-fullscreen/dist/styles.css';\nimport L, { control } from 'leaflet';\nimport Filter from './FilterPowerSource.jsx';\nimport axios from \"axios\";\nimport ReactDOM from 'react-dom'; // import '../../../../assets/scss/index.scss';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // height: '100%',\n    padding: '0',\n    margin: 0,\n    border: 0\n  },\n  content: {\n    alignItems: 'center',\n    display: 'flex'\n  },\n  title: {\n    fontWeight: 700\n  },\n  avatar: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    height: 56,\n    width: 56\n  },\n  icon: {\n    height: 32,\n    width: 32\n  },\n  progress: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nconst Map = props => {\n  const {\n    className,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const [contacts, setContacts] = useState([]);\n  useEffect(() => {\n    fetch('http://127.0.0.1:4001/api/v1/monitor/devices/online_offline').then(res => res.json()).then(contactData => {\n      let devices = contactData[\"online_offline_devices\"];\n      console.log(devices);\n      setContacts(devices);\n      console.log(contacts);\n    }).catch(console.log);\n  }, []);\n\n  let CategoryColorClass = (isOnline, isdue) => {\n    return isOnline && isdue == true ? 'deviceOnline' : isOnline && isdue == false ? 'deviceOffline' : 'UnCategorise';\n  };\n\n  return React.createElement(LeafletMap, {\n    animate: true,\n    attributionControl: true,\n    center: [0.3341424, 32.5600613],\n    doubleClickZoom: true,\n    dragging: true,\n    easeLinearity: 0.35,\n    scrollWheelZoom: true,\n    zoom: 7,\n    zoomControl: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(TileLayer, {\n    url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), contacts.map(contact => React.createElement(Marker, {\n    position: [contact.latitude, contact.longitude],\n    fill: \"true\",\n    key: contact.channelId,\n    clickable: \"true\",\n    icon: L.divIcon({\n      //html:`${contact.isOnline}`,\n      iconSize: 40,\n      className: `leafletMarkerIcon ${CategoryColorClass(contact.isOverDueMaintenance)}`\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Popup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))), React.createElement(FullscreenControl, {\n    position: \"topleft\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n};\n\nMap.propTypes = {\n  className: PropTypes.string\n};\nexport default Map;","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/AirQo-frontend/locate/src/views/components/DataDisplay/Map/Map.js"],"names":["React","clsx","PropTypes","makeStyles","Map","LeafletMap","TileLayer","Popup","Marker","Link","Card","CardContent","CardHeader","Divider","useEffect","useState","FullscreenControl","L","control","Filter","axios","ReactDOM","useStyles","theme","root","padding","margin","border","content","alignItems","display","title","fontWeight","avatar","backgroundColor","palette","primary","main","color","contrastText","height","width","icon","progress","marginTop","spacing","props","className","rest","classes","contacts","setContacts","fetch","then","res","json","contactData","devices","console","log","catch","CategoryColorClass","isOnline","isdue","map","contact","latitude","longitude","channelId","divIcon","iconSize","isOverDueMaintenance","propTypes","string"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Map as LeafletMap, TileLayer, Popup, Marker} from 'react-leaflet';\r\nimport {Link } from 'react-router-dom';\r\nimport {Card, CardContent, CardHeader, Divider} from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport FullscreenControl from 'react-leaflet-fullscreen';\r\nimport 'react-leaflet-fullscreen/dist/styles.css';\r\nimport L, { control } from 'leaflet';\r\nimport Filter from './FilterPowerSource.jsx';\r\nimport axios from \"axios\";\r\nimport ReactDOM from 'react-dom';\r\n// import '../../../../assets/scss/index.scss';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    // height: '100%',\r\n    padding: '0',\r\n\t  margin: 0,\r\n\t  border: 0,  \r\n  },\r\n  content: {\r\n    alignItems: 'center',\r\n    display: 'flex'\r\n  },\r\n  title: {\r\n    fontWeight: 700\r\n  },\r\n  avatar: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.primary.contrastText,\r\n    height: 56,\r\n    width: 56\r\n  },\r\n  icon: {\r\n    height: 32,\r\n    width: 32\r\n  },\r\n  progress: {\r\n    marginTop: theme.spacing(3)\r\n  },\r\n}));\r\n\r\nconst Map = props => {\r\n  const { className, ...rest } = props;\r\n\r\n  const classes = useStyles();\r\n  const [contacts,setContacts ] = useState([]);\r\n\r\n  useEffect(() => {\r\n   fetch('http://127.0.0.1:4001/api/v1/monitor/devices/online_offline')\r\n      .then(res => res.json())\r\n      .then((contactData) => {\r\n        let devices = contactData[\"online_offline_devices\"]\r\n        console.log(devices)\r\n        setContacts(devices)\r\n        console.log(contacts)\r\n      })\r\n      .catch(console.log)\r\n  },[]);\r\n\r\n  let CategoryColorClass = (isOnline, isdue) =>{\r\n    return isOnline && isdue == true ? 'deviceOnline' :\r\n      isOnline && isdue == false  ? 'deviceOffline' :\r\n                'UnCategorise';\r\n  }\r\n\r\n \r\n  return (\r\n        <LeafletMap\r\n          animate\r\n          attributionControl\r\n          center={[0.3341424,32.5600613]}\r\n          doubleClickZoom\r\n          dragging\r\n          easeLinearity={0.35}\r\n          scrollWheelZoom\r\n          zoom={7}\r\n          zoomControl        \r\n        >\r\n          <TileLayer\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n          />           \r\n          {contacts.map((contact) => (\r\n            <Marker \r\n              position={[contact.latitude,contact.longitude]}\r\n              fill=\"true\"\r\n              key={contact.channelId} \r\n              clickable=\"true\"  \r\n              icon={\r\n                L.divIcon({\r\n                //html:`${contact.isOnline}`,\r\n                iconSize: 40,\r\n                className:`leafletMarkerIcon ${CategoryColorClass(contact.isOverDueMaintenance)}`\r\n                 })}\r\n              >\r\n              <Popup> \r\n              </Popup>\r\n            </Marker>   \r\n          ))}  \r\n          <FullscreenControl position=\"topleft\" />\r\n        </LeafletMap>\r\n \r\n  );\r\n};\r\nMap.propTypes = {\r\n  className: PropTypes.string\r\n};\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}