{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\AirQo-frontend\\\\locate\\\\src\\\\views\\\\components\\\\Map\\\\Map.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { mapRenderDefaults } from \"../../../redux/Maps/actions\";\nimport PropTypes from \"prop-types\";\nimport constants from \"../../../config/constants.js\";\nimport { Map, FeatureGroup, LayerGroup, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { EditControl } from \"react-leaflet-draw\";\nimport axios from \"axios\";\nimport L, { marker } from \"leaflet\";\nimport { ElementClass } from \"enzyme\";\nimport FullscreenControl from \"react-leaflet-fullscreen\";\nimport \"react-leaflet-fullscreen/dist/styles.css\"; // import MapMenu from \"./MapMenu\";\n// From locate MAP\n\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { CardActions, Divider } from \"@material-ui/core\";\nimport Card from \"../Card/Card.js\";\nimport CardBody from \"../Card/CardBody.js\"; //--End--\n// From Locate Save\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport UpdateIcon from \"@material-ui/icons/Update\"; // -- End --\n\nlet geoJsonPolygon;\n\nclass Maps extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onOpenClicked = () => {\n      axios.get(constants.GET_LOCATE_MAP + this.props.auth.user._id).then(res => {\n        this.setState({\n          savedPlan: res.data\n        });\n        console.log(res.data); //console.log(this.state, \"current user: \", this.props.auth.user._id);\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.savePlanningSpace = () => {\n      // open the save planning space dialog\n      this.setState(prevState => ({\n        openSave: !prevState.openSave\n      })); // make api call\n      // console.log(\"plan: \", this.state.plan);\n\n      axios.post(constants.SAVE_LOCATE_MAP, {\n        user_id: this.props.auth.user._id,\n        space_name: this.state.space_name,\n        plan: this.state.plan\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        console.log(res);\n        this.setState({\n          confirmDialogMsg: res.data.message\n        });\n        this.setState(prevState => ({\n          confirmDialog: !prevState.confirmDialog\n        })); //\n      }).catch(e => console.log(e));\n    };\n\n    this.onSaveClicked = () => {\n      this.setState(prevState => ({\n        openSave: !prevState.openSave\n      }));\n    };\n\n    this.handleSaveClose = () => {\n      this.setState(prevState => ({\n        openSave: !prevState.openSave\n      })); //console.log(this.state, this.props.plan, this.props.user_id);\n    };\n\n    this.changeHandler = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleConfirmClose = () => {\n      this.setState(prevState => ({\n        confirmDialog: !prevState.confirmDialog\n      }));\n    };\n\n    this.handleClick = () => {\n      this.setState(prevState => ({\n        open: !prevState.open\n      }));\n    };\n\n    this.onSelectPrevSpace = (name, shape) => {\n      // we update some states\n      this.setState({\n        isPlanSelected: true\n      });\n      this.setState({\n        isUpdateCancel: false\n      });\n      this.setState({\n        selected_name: name\n      });\n      this.setState({\n        selected_plan: shape\n      });\n    };\n\n    this.onUpdatePlanSpace = () => {\n      console.log(\"onUpdate: \", this.state.selected_name);\n      axios.post(constants.UPDATE_LOCATE_MAP + this.state.selected_name, {\n        plan: this.state.selected_plan\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        console.log(res.data);\n        this.setState({\n          confirmDialogMsg: res.data.message\n        });\n        this.setState(prevState => ({\n          confirmDialog: !prevState.confirmDialog\n        })); //\n      }).catch(e => console.log(e));\n    };\n\n    this.onCancelUpdatePlanSpace = () => {\n      // monitor cancel button:\n      this.setState({\n        isUpdateCancel: true\n      });\n      this.setState({\n        isPlanSelected: false\n      });\n      this.setState({\n        isAlreadyOpened: 0\n      }); // this.setState({ selected_name: \"\" });\n      // this.setState({ selected_plan: {} });\n    };\n\n    this.onDeletePlanSpace = name => {\n      console.log(\"onDelete :\", name);\n      axios.delete(constants.DELETE_LOCATE_MAP + name).then(res => {\n        console.log(res.data);\n        this.setState({\n          confirmDialogMsg: res.data.message\n        });\n        this.setState(prevState => ({\n          confirmDialog: !prevState.confirmDialog\n        })); //\n      }).catch(e => {\n        console.log(e);\n      });\n    };\n\n    this.changeHandler = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      }); // toggle submit button ON and OFF\n\n      if (e.target.name == \"numberOfDevices\") {\n        if (e.target.value != 0 && /^\\d+$/.test(e.target.value)) {\n          this.setState({\n            btnSubmit: true\n          });\n        } else {\n          this.setState({\n            btnSubmit: false\n          });\n        }\n      }\n    };\n\n    this.submitHandler = e => {\n      e.preventDefault();\n      let api_data = {\n        sensor_number: this.state.numberOfDevices,\n        must_have_coordinates: this.state.mustHaveCoord,\n        // checking if the user selected a previously saved plan\n        // if true, use its geoGjson data, otherwise use the selected plan\n        polygon: this.state.isPlanSelected == true ? this.state.selected_plan : this.state.plan\n      };\n      console.log(api_data);\n      axios.post(constants.RUN_LOCATE_MODEL, api_data, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(res => {\n        const myData = res.data;\n        console.log(myData);\n        let myPolygons = [];\n\n        try {\n          myData.forEach(element => {\n            if (element[\"properties.district\"]) {\n              myPolygons.push({\n                type: \"Feature\",\n                properties: {\n                  district: element[\"properties.district\"],\n                  subcounty: element[\"properties.subcounty\"],\n                  parish: element[\"properties.parish\"],\n                  lat: element[\"properties.lat\"],\n                  long: element[\"properties.long\"],\n                  color: element[\"color\"],\n                  fill_color: element[\"fill_color\"],\n                  type: element.type\n                },\n                geometry: {\n                  type: \"Polygon\",\n                  coordinates: element[\"geometry.coordinates\"]\n                }\n              });\n            } else {\n              myPolygons.push({\n                type: \"Feature\",\n                properties: {\n                  district: element.properties.district,\n                  subcounty: element.properties.subcounty,\n                  parish: element.properties.parish,\n                  lat: element.properties.lat,\n                  long: element.properties.long,\n                  color: element.color,\n                  fill_color: element.fill_color,\n                  type: element.type\n                },\n                geometry: {\n                  type: \"Polygon\",\n                  coordinates: element.geometry.coordinates\n                }\n              });\n            }\n          });\n          this.setState({\n            polygons: myPolygons\n          });\n        } catch (error) {\n          console.log(\"An error occured. Please try again\");\n        }\n      });\n    };\n\n    this._onEdited = e => {\n      //let type = e.layerType;\n      let layer = e.layers;\n\n      if (this.state.isPlanSelected == true) {\n        // when we are working with previously saved plan\n        this.setState({\n          plan: layer.toGeoJSON()\n        });\n        this.setState({\n          selected_plan: layer.toGeoJSON()\n        });\n        this.setState({\n          geoJSONDATA: JSON.stringify(layer.toGeoJSON())\n        });\n        console.log(\"edit saved plan: \", JSON.stringify(layer.toGeoJSON()));\n      } else {\n        // otherwise\n        this.setState({\n          plan: layer.toGeoJSON()\n        });\n        this.setState({\n          geoJSONDATA: JSON.stringify(layer.toGeoJSON())\n        });\n        console.log(\"edit new plan: \", JSON.stringify(layer.toGeoJSON()));\n      } //console.log(\"_onEdited\", type, JSON.stringify(layer.toGeoJSON()));\n\n    };\n\n    this._onCreated = e => {\n      let type = e.layerType;\n      let layer = e.layer;\n\n      if (type === \"marker\") {\n        // Do marker specific actions\n        console.log(\"_onCreated: marker created\", e);\n      }\n\n      if (type === \"polygon\") {\n        // here you got the polygon points\n        ///const points = layer._latlngs;\n        console.log(JSON.stringify(layer.toGeoJSON())); //console.log(JSON.stringify(layer.toGeoJSON()));\n\n        this.setState({\n          plan: layer.toGeoJSON()\n        }); //newly added\n\n        this.setState({\n          geoJSONDATA: JSON.stringify(layer.toGeoJSON())\n        }); //the code here has been moved to submitHandler\n      }\n    };\n\n    this._onFeatureGroupReady = ref => {\n      if (ref === null) {\n        return;\n      }\n\n      this._editableFG = ref;\n\n      if (this.state.polygons) {\n        for (var i = 0; i < this.state.polygons.length; i++) {\n          //let leafletGeoJSON = new L.GeoJSON(this.state.polygons[i]);console.log(leafletGeoJSON);\n          try {\n            let leafletGeoJSON = new L.GeoJSON(this.state.polygons[i], {\n              onEachFeature: function (feature, layer) {\n                let popup_string = \"<b>DISTRICT: </b>\" + feature[\"properties\"][\"district\"] + \"<br/><b>SUBCOUNTY: </b>\" + feature[\"properties\"][\"subcounty\"] + \"<br/><b>PARISH: </b>\" + feature[\"properties\"][\"parish\"] + \"<br/><b>TYPE: </b>\" + feature[\"properties\"][\"type\"];\n                layer.bindPopup(popup_string);\n                layer.on(\"mouseover\", function (e) {\n                  this.openPopup();\n                });\n                layer.on(\"mouseout\", function (e) {\n                  this.closePopup();\n                });\n              },\n              style: {\n                fillColor: this.state.polygons[i][\"properties\"][\"fill_color\"],\n                color: this.state.polygons[i][\"properties\"][\"color\"],\n                opacity: 100\n              }\n            });\n            let leafletFG = this._editableFG.leafletElement;\n            leafletGeoJSON.eachLayer(layer => leafletFG.addLayer(layer));\n          } catch (error) {\n            console.log(\"An error occured and some polygons may not have been shown!\");\n          }\n        } //console.log(toString(count)+' invalid polygons in results')\n\n      } else {\n        console.log(\"No polygons\");\n      } //Opening previously saved data\n\n\n      if (this.state.isPlanSelected && this.state.isAlreadyOpened == 0) {\n        // populate the leaflet FeatureGroup with the geoJson layers\n        var savedLeafletGeoJSON = new L.GeoJSON(this.state.selected_plan);\n        var savedLeafletFG = ref.leafletElement;\n        savedLeafletGeoJSON.eachLayer(layer => {\n          savedLeafletFG.addLayer(layer);\n        }); // prevent the map from opening twice on every state change\n\n        this.setState({\n          isAlreadyOpened: 1\n        });\n      }\n\n      if (this.state.isUpdateCancel) {\n        var savedLeafletFG = ref.leafletElement;\n        savedLeafletFG.eachLayer(function (layer) {\n          layer.remove(); //marker.remove();\n        }); // L.Map.eachLayer((layer) => {\n        //   savedLeafletFG.removeLayer(layer);\n        // });\n        //draw.deleteAll().getAll();\n\n        this.setState({\n          isPlanSelected: false\n        });\n        this.setState({\n          selected_name: \"\"\n        });\n        this.setState({\n          selected_plan: {}\n        });\n        this.setState({\n          isUpdateCancel: false\n        });\n      }\n    };\n\n    this.state = {\n      api_data: {},\n      polygons: [],\n      markers: [[0.32, 32.598]],\n      // gets the shapefile format to save (polygon drawn within the planning space)\n      plan: {},\n      // State: locate form\n      numberOfDevices: 0,\n      mustHaveCoord: \"\",\n      // activates/deactivates locate submit button accordingly\n      btnSubmit: false,\n      //newly added - passed to the model endpoint\n      geoJSONDATA: \"\",\n      // added from locateSave -- helps with saving data and dialog boxes\n      open: false,\n      openSave: false,\n      confirmDialog: false,\n      savedPlan: [],\n      // stores previously saved data\n      space_name: \"\",\n      // states for opening and updating previously saved data\n      selected_name: \"\",\n      selected_plan: {},\n      isPlanSelected: false,\n      isUpdateCancel: false,\n      isAlreadyOpened: 0,\n      // prevents the map from loading more than once on every state change\n      // handle all the popup msg\n      confirmDialogMsg: \"\"\n    }; //from locate save\n\n    this.changeHandler = this.changeHandler.bind(this);\n    this.submitHandler = this.submitHandler.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.onSaveClicked = this.onSaveClicked.bind(this);\n    this.onOpenClicked = this.onOpenClicked.bind(this);\n    this.handleSaveClose = this.handleSaveClose.bind(this);\n    this.handleConfirmClose = this.handleConfirmClose.bind(this); // select previously saved data, update, delete\n\n    this.onSelectPrevSpace = this.onSelectPrevSpace.bind(this);\n    this.onUpdatePlanSpace = this.onUpdatePlanSpace.bind(this);\n    this.onDeletePlanSpace = this.onDeletePlanSpace.bind(this);\n    this.onCancelUpdatePlanSpace = this.onCancelUpdatePlanSpace.bind(this);\n  } // Retrieve previously saved planning space by this current user\n  // added from locateSave\n\n\n  render() {\n    //from locate form\n    const {\n      numberOfDevices,\n      mustHaveCoord\n    } = this.state;\n    const styles = {\n      backgroundColor: \"#FFF\",\n      zIndex: 999,\n      position: \"absolute\",\n      height: \"auto\",\n      width: 250,\n      opacity: 0.8 //marginTop: \"7em\"\n\n    }; // Save planning styles\n\n    const nested = {\n      paddingLeft: \"2em\"\n    }; // styling the save planning space menu\n\n    const savePlan = {\n      backgroundColor: \"#FFF\",\n      zIndex: 999,\n      position: \"absolute\",\n      height: \"auto\",\n      width: 250,\n      opacity: 0.8,\n      top: \"21em\"\n    }; // styling the delete planning space buttons\n\n    const btnStyles = {\n      color: \"red\",\n      fontWeight: \".3em\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: styles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      type: \"number\",\n      name: \"numberOfDevices\",\n      label: \"Number of Devices\",\n      keyboardType: \"numeric\",\n      placeholder: \"No. of devices\",\n      required: true,\n      value: numberOfDevices,\n      onChange: this.changeHandler,\n      fullWidth: true,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      name: \"mustHaveCoord\",\n      label: \"'Must Have' Locations\",\n      placeholder: \"[[Lng, Lat],...,[Lng, Lat]]\",\n      onChange: this.changeHandler,\n      value: mustHaveCoord,\n      fullWidth: true,\n      margin: \"normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }), React.createElement(CardActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"submit\",\n      name: \"submit\",\n      disabled: this.state.btnSubmit === false ? \"true\" : \"\",\n      color: \"secondary\",\n      variant: \"contained\",\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"Submit\")))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, this.state.isPlanSelected == true ? React.createElement(List, {\n      component: \"nav\",\n      \"aria-labelledby\": \"nested-list-subheader\",\n      style: savePlan,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      button: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, React.createElement(UpdateIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    })), React.createElement(ListItemText, {\n      primary: \"Update\",\n      onClick: this.onUpdatePlanSpace,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    })), React.createElement(ListItem, {\n      button: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      style: btnStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    })), React.createElement(ListItemText, {\n      primary: \"Cancel\",\n      onClick: this.onCancelUpdatePlanSpace,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }))) : //save new placing space , list saved planning space\n    React.createElement(List, {\n      component: \"nav\",\n      \"aria-labelledby\": \"nested-list-subheader\",\n      style: savePlan,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      button: true,\n      disabled: Object.keys(this.state.plan).length === 0 ? \"true\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, React.createElement(SaveIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    })), React.createElement(ListItemText, {\n      primary: \"Save\",\n      onClick: this.onSaveClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    })), React.createElement(ListItem, {\n      button: true,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, React.createElement(ListItemIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, React.createElement(InboxIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    })), React.createElement(ListItemText, {\n      primary: \"Open\",\n      onClick: this.onOpenClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }), this.state.open ? React.createElement(ExpandLess, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }) : React.createElement(ExpandMore, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    })), React.createElement(Collapse, {\n      in: this.state.open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, React.createElement(List, {\n      component: \"div\",\n      disablePadding: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, this.state.savedPlan != null ? this.state.savedPlan.map(s => React.createElement(ListItem, {\n      key: s._id,\n      button: true,\n      style: nested,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: s.space_name,\n      onClick: this.onSelectPrevSpace.bind(this, s.space_name, s.plan),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      size: \"small\",\n      onClick: this.onDeletePlanSpace.bind(this, s.space_name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      style: btnStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    })))) : \"\"))), React.createElement(Dialog, {\n      open: this.state.openSave,\n      onClose: this.handleSaveClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528\n      },\n      __self: this\n    }, \"To save this planning space, please enter the name in the text field below. Thank you for using AirQo Locate service.\"), React.createElement(TextField, {\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"name\",\n      name: \"space_name\",\n      value: this.state.space_name,\n      onChange: this.changeHandler,\n      label: \"Save As\",\n      type: \"text\",\n      placeholder: \"airqo_locate_plan_001\",\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleSaveClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.savePlanningSpace,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(Dialog, {\n      open: this.state.confirmDialog,\n      onClose: this.handleConfirmClose,\n      \"aria-labelledby\": \"alert-dialog-title\",\n      \"aria-describedby\": \"alert-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, React.createElement(DialogContentText, {\n      id: \"alert-dialog-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566\n      },\n      __self: this\n    }, this.state.confirmDialogMsg)), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleConfirmClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, \"OK\")))), React.createElement(Map, {\n      center: [this.props.mapDefaults.lat, this.props.mapDefaults.lng],\n      zoom: this.props.mapDefaults.zoom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, React.createElement(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }), React.createElement(FullscreenControl, {\n      position: \"topright\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }), React.createElement(LayerGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, \"}\", this.state.polygons.map(location => React.createElement(Marker, {\n      key: location.parish,\n      position: {\n        lat: location.properties.lat,\n        lng: location.properties.long\n      },\n      icon: new L.Icon({\n        iconUrl: \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-\" + location.properties.color + \".png\",\n        shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\n        iconSize: [25, 41],\n        iconAnchor: [12, 41],\n        popupAnchor: [1, -34],\n        shadowSize: [41, 41]\n      }),\n      onMouseOver: e => {\n        e.target.openPopup();\n      },\n      onMouseOut: e => {\n        e.target.closePopup();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624\n      },\n      __self: this\n    }, \"DISTRICT: \"), location.properties.district, \", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, \"SUBCOUNTY: \"), location.properties.subcounty, \", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628\n      },\n      __self: this\n    }, \"PARISH: \"), location.properties.parish, \", \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, \"TYPE: \"), location.properties.type)))))), React.createElement(FeatureGroup, {\n      ref: reactFGref => {\n        this._onFeatureGroupReady(reactFGref);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639\n      },\n      __self: this\n    }, React.createElement(EditControl, {\n      position: \"topright\",\n      onEdited: this._onEdited,\n      onCreated: this._onCreated,\n      onDeleted: this._onDeleted,\n      onMounted: this._onMounted,\n      onEditStart: this._onEditStart,\n      onEditStop: this._onEditStop,\n      onDeleteStart: this._onDeleteStart,\n      onDeleteStop: this._onDeleteStop,\n      draw: {\n        rectangle: false,\n        circle: false,\n        circlemarker: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    })))); // --- End of render function ---\n  }\n\n}\n\nMaps.propTypes = {\n  mapRenderDefaults: PropTypes.func.isRequired,\n  mapDefaults: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  mapDefaults: state.mapDefaults.initMap,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  mapRenderDefaults\n})(Maps);","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/AirQo-frontend/locate/src/views/components/Map/Map.js"],"names":["React","connect","mapRenderDefaults","PropTypes","constants","Map","FeatureGroup","LayerGroup","TileLayer","Marker","Popup","EditControl","axios","L","marker","ElementClass","FullscreenControl","Button","TextField","CardActions","Divider","Card","CardBody","List","ListItem","ListItemIcon","ListItemText","Collapse","InboxIcon","SaveIcon","ExpandLess","ExpandMore","Dialog","DialogActions","DialogContent","DialogContentText","CloseIcon","UpdateIcon","geoJsonPolygon","Maps","Component","constructor","props","onOpenClicked","get","GET_LOCATE_MAP","auth","user","_id","then","res","setState","savedPlan","data","console","log","catch","e","savePlanningSpace","prevState","openSave","post","SAVE_LOCATE_MAP","user_id","space_name","state","plan","headers","confirmDialogMsg","message","confirmDialog","onSaveClicked","handleSaveClose","changeHandler","target","name","value","handleConfirmClose","handleClick","open","onSelectPrevSpace","shape","isPlanSelected","isUpdateCancel","selected_name","selected_plan","onUpdatePlanSpace","UPDATE_LOCATE_MAP","onCancelUpdatePlanSpace","isAlreadyOpened","onDeletePlanSpace","delete","DELETE_LOCATE_MAP","test","btnSubmit","submitHandler","preventDefault","api_data","sensor_number","numberOfDevices","must_have_coordinates","mustHaveCoord","polygon","RUN_LOCATE_MODEL","myData","myPolygons","forEach","element","push","type","properties","district","subcounty","parish","lat","long","color","fill_color","geometry","coordinates","polygons","error","_onEdited","layer","layers","toGeoJSON","geoJSONDATA","JSON","stringify","_onCreated","layerType","_onFeatureGroupReady","ref","_editableFG","i","length","leafletGeoJSON","GeoJSON","onEachFeature","feature","popup_string","bindPopup","on","openPopup","closePopup","style","fillColor","opacity","leafletFG","leafletElement","eachLayer","addLayer","savedLeafletGeoJSON","savedLeafletFG","remove","markers","bind","render","styles","backgroundColor","zIndex","position","height","width","nested","paddingLeft","savePlan","top","btnStyles","fontWeight","Object","keys","map","s","mapDefaults","lng","zoom","location","Icon","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","reactFGref","_onDeleted","_onMounted","_onEditStart","_onEditStop","_onDeleteStart","_onDeleteStop","rectangle","circle","circlemarker","propTypes","func","isRequired","object","mapStateToProps","initMap"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { mapRenderDefaults } from \"../../../redux/Maps/actions\";\r\nimport PropTypes from \"prop-types\";\r\nimport constants from \"../../../config/constants.js\";\r\n\r\nimport {\r\n  Map,\r\n  FeatureGroup,\r\n  LayerGroup,\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n} from \"react-leaflet\";\r\nimport { EditControl } from \"react-leaflet-draw\";\r\nimport axios from \"axios\";\r\nimport L, { marker } from \"leaflet\";\r\nimport { ElementClass } from \"enzyme\";\r\nimport FullscreenControl from \"react-leaflet-fullscreen\";\r\nimport \"react-leaflet-fullscreen/dist/styles.css\";\r\n// import MapMenu from \"./MapMenu\";\r\n// From locate MAP\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { CardActions, Divider } from \"@material-ui/core\";\r\nimport Card from \"../Card/Card.js\";\r\nimport CardBody from \"../Card/CardBody.js\";\r\n//--End--\r\n\r\n// From Locate Save\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport UpdateIcon from \"@material-ui/icons/Update\";\r\n\r\n// -- End --\r\n\r\nlet geoJsonPolygon;\r\n\r\nclass Maps extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      api_data: {},\r\n      polygons: [],\r\n      markers: [[0.32, 32.598]],\r\n      // gets the shapefile format to save (polygon drawn within the planning space)\r\n      plan: {},\r\n      // State: locate form\r\n      numberOfDevices: 0,\r\n      mustHaveCoord: \"\",\r\n      // activates/deactivates locate submit button accordingly\r\n      btnSubmit: false,\r\n      //newly added - passed to the model endpoint\r\n      geoJSONDATA: \"\",\r\n      // added from locateSave -- helps with saving data and dialog boxes\r\n      open: false,\r\n      openSave: false,\r\n      confirmDialog: false,\r\n      savedPlan: [], // stores previously saved data\r\n      space_name: \"\",\r\n\r\n      // states for opening and updating previously saved data\r\n      selected_name: \"\",\r\n      selected_plan: {},\r\n      isPlanSelected: false,\r\n      isUpdateCancel: false,\r\n      isAlreadyOpened: 0, // prevents the map from loading more than once on every state change\r\n\r\n      // handle all the popup msg\r\n      confirmDialogMsg: \"\",\r\n    };\r\n\r\n    //from locate save\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n    this.submitHandler = this.submitHandler.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.onSaveClicked = this.onSaveClicked.bind(this);\r\n    this.onOpenClicked = this.onOpenClicked.bind(this);\r\n    this.handleSaveClose = this.handleSaveClose.bind(this);\r\n    this.handleConfirmClose = this.handleConfirmClose.bind(this);\r\n\r\n    // select previously saved data, update, delete\r\n    this.onSelectPrevSpace = this.onSelectPrevSpace.bind(this);\r\n    this.onUpdatePlanSpace = this.onUpdatePlanSpace.bind(this);\r\n    this.onDeletePlanSpace = this.onDeletePlanSpace.bind(this);\r\n    this.onCancelUpdatePlanSpace = this.onCancelUpdatePlanSpace.bind(this);\r\n  }\r\n  // Retrieve previously saved planning space by this current user\r\n  // added from locateSave\r\n  onOpenClicked = () => {\r\n    axios\r\n      .get(constants.GET_LOCATE_MAP + this.props.auth.user._id)\r\n      .then((res) => {\r\n        this.setState({ savedPlan: res.data });\r\n        console.log(res.data);\r\n        //console.log(this.state, \"current user: \", this.props.auth.user._id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  // save planning space\r\n  savePlanningSpace = () => {\r\n    // open the save planning space dialog\r\n    this.setState((prevState) => ({ openSave: !prevState.openSave }));\r\n    // make api call\r\n    // console.log(\"plan: \", this.state.plan);\r\n    axios\r\n      .post(\r\n        constants.SAVE_LOCATE_MAP,\r\n        {\r\n          user_id: this.props.auth.user._id,\r\n          space_name: this.state.space_name,\r\n          plan: this.state.plan,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.setState({ confirmDialogMsg: res.data.message });\r\n        this.setState((prevState) => ({\r\n          confirmDialog: !prevState.confirmDialog,\r\n        })); //\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  // This deals with save planing space dialog box\r\n  onSaveClicked = () => {\r\n    this.setState((prevState) => ({ openSave: !prevState.openSave }));\r\n  };\r\n  handleSaveClose = () => {\r\n    this.setState((prevState) => ({ openSave: !prevState.openSave }));\r\n    //console.log(this.state, this.props.plan, this.props.user_id);\r\n  };\r\n  // hooks the planning space textfield input\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Handles saved space confirmation feedback\r\n  handleConfirmClose = () => {\r\n    this.setState((prevState) => ({ confirmDialog: !prevState.confirmDialog }));\r\n  };\r\n\r\n  // load previously saved space\r\n  handleClick = () => {\r\n    this.setState((prevState) => ({ open: !prevState.open }));\r\n  };\r\n  //--End-----------------------------------------------------------\r\n\r\n  // ---------selected previously saved space\r\n  onSelectPrevSpace = (name, shape) => {\r\n    // we update some states\r\n    this.setState({ isPlanSelected: true });\r\n    this.setState({ isUpdateCancel: false });\r\n    this.setState({ selected_name: name });\r\n    this.setState({ selected_plan: shape });\r\n  };\r\n  // update saved space\r\n  onUpdatePlanSpace = () => {\r\n    console.log(\"onUpdate: \", this.state.selected_name);\r\n    axios\r\n      .post(\r\n        constants.UPDATE_LOCATE_MAP + this.state.selected_name,\r\n        {\r\n          plan: this.state.selected_plan,\r\n        },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        this.setState({ confirmDialogMsg: res.data.message });\r\n        this.setState((prevState) => ({\r\n          confirmDialog: !prevState.confirmDialog,\r\n        })); //\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n\r\n  onCancelUpdatePlanSpace = () => {\r\n    // monitor cancel button:\r\n    this.setState({ isUpdateCancel: true });\r\n    this.setState({ isPlanSelected: false });\r\n    this.setState({ isAlreadyOpened: 0 });\r\n    // this.setState({ selected_name: \"\" });\r\n    // this.setState({ selected_plan: {} });\r\n  };\r\n\r\n  // Delete previously saved space\r\n  onDeletePlanSpace = (name) => {\r\n    console.log(\"onDelete :\", name);\r\n    axios\r\n      .delete(constants.DELETE_LOCATE_MAP + name)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        this.setState({ confirmDialogMsg: res.data.message });\r\n        this.setState((prevState) => ({\r\n          confirmDialog: !prevState.confirmDialog,\r\n        })); //\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //----end-----------------------\r\n\r\n  // From LocateForm\r\n  changeHandler = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n    // toggle submit button ON and OFF\r\n    if (e.target.name == \"numberOfDevices\") {\r\n      if (e.target.value != 0 && /^\\d+$/.test(e.target.value)) {\r\n        this.setState({ btnSubmit: true });\r\n      } else {\r\n        this.setState({ btnSubmit: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    e.preventDefault();\r\n    let api_data = {\r\n      sensor_number: this.state.numberOfDevices,\r\n      must_have_coordinates: this.state.mustHaveCoord,\r\n      // checking if the user selected a previously saved plan\r\n      // if true, use its geoGjson data, otherwise use the selected plan\r\n      polygon:\r\n        this.state.isPlanSelected == true\r\n          ? this.state.selected_plan\r\n          : this.state.plan,\r\n    };\r\n    console.log(api_data);\r\n    axios\r\n      .post(constants.RUN_LOCATE_MODEL, api_data, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      })\r\n      .then((res) => {\r\n        const myData = res.data;\r\n        console.log(myData);\r\n\r\n        let myPolygons = [];\r\n\r\n        try {\r\n          myData.forEach((element) => {\r\n            if (element[\"properties.district\"]) {\r\n              myPolygons.push({\r\n                type: \"Feature\",\r\n                properties: {\r\n                  district: element[\"properties.district\"],\r\n                  subcounty: element[\"properties.subcounty\"],\r\n                  parish: element[\"properties.parish\"],\r\n                  lat: element[\"properties.lat\"],\r\n                  long: element[\"properties.long\"],\r\n                  color: element[\"color\"],\r\n                  fill_color: element[\"fill_color\"],\r\n                  type: element.type,\r\n                },\r\n                geometry: {\r\n                  type: \"Polygon\",\r\n                  coordinates: element[\"geometry.coordinates\"],\r\n                },\r\n              });\r\n            } else {\r\n              myPolygons.push({\r\n                type: \"Feature\",\r\n                properties: {\r\n                  district: element.properties.district,\r\n                  subcounty: element.properties.subcounty,\r\n                  parish: element.properties.parish,\r\n                  lat: element.properties.lat,\r\n                  long: element.properties.long,\r\n                  color: element.color,\r\n                  fill_color: element.fill_color,\r\n                  type: element.type,\r\n                },\r\n                geometry: {\r\n                  type: \"Polygon\",\r\n                  coordinates: element.geometry.coordinates,\r\n                },\r\n              });\r\n            }\r\n          });\r\n\r\n          this.setState({\r\n            polygons: myPolygons,\r\n          });\r\n        } catch (error) {\r\n          console.log(\"An error occured. Please try again\");\r\n        }\r\n      });\r\n  };\r\n  //--End----------------------------------------------------------\r\n\r\n  _onEdited = (e) => {\r\n    //let type = e.layerType;\r\n    let layer = e.layers;\r\n\r\n    if (this.state.isPlanSelected == true) {\r\n      // when we are working with previously saved plan\r\n      this.setState({ plan: layer.toGeoJSON() });\r\n      this.setState({ selected_plan: layer.toGeoJSON() });\r\n      this.setState({ geoJSONDATA: JSON.stringify(layer.toGeoJSON()) });\r\n      console.log(\"edit saved plan: \", JSON.stringify(layer.toGeoJSON()));\r\n    } else {\r\n      // otherwise\r\n      this.setState({ plan: layer.toGeoJSON() });\r\n      this.setState({ geoJSONDATA: JSON.stringify(layer.toGeoJSON()) });\r\n      console.log(\"edit new plan: \", JSON.stringify(layer.toGeoJSON()));\r\n    }\r\n\r\n    //console.log(\"_onEdited\", type, JSON.stringify(layer.toGeoJSON()));\r\n  };\r\n\r\n  _onCreated = (e) => {\r\n    let type = e.layerType;\r\n    let layer = e.layer;\r\n    if (type === \"marker\") {\r\n      // Do marker specific actions\r\n      console.log(\"_onCreated: marker created\", e);\r\n    }\r\n    if (type === \"polygon\") {\r\n      // here you got the polygon points\r\n      ///const points = layer._latlngs;\r\n      console.log(JSON.stringify(layer.toGeoJSON()));\r\n      //console.log(JSON.stringify(layer.toGeoJSON()));\r\n      this.setState({ plan: layer.toGeoJSON() });\r\n\r\n      //newly added\r\n      this.setState({ geoJSONDATA: JSON.stringify(layer.toGeoJSON()) });\r\n\r\n      //the code here has been moved to submitHandler\r\n    }\r\n  };\r\n\r\n  render() {\r\n    //from locate form\r\n    const { numberOfDevices, mustHaveCoord } = this.state;\r\n\r\n    const styles = {\r\n      backgroundColor: \"#FFF\",\r\n      zIndex: 999,\r\n      position: \"absolute\",\r\n      height: \"auto\",\r\n      width: 250,\r\n      opacity: 0.8,\r\n      //marginTop: \"7em\"\r\n    };\r\n\r\n    // Save planning styles\r\n    const nested = {\r\n      paddingLeft: \"2em\",\r\n    };\r\n    // styling the save planning space menu\r\n    const savePlan = {\r\n      backgroundColor: \"#FFF\",\r\n      zIndex: 999,\r\n      position: \"absolute\",\r\n      height: \"auto\",\r\n      width: 250,\r\n      opacity: 0.8,\r\n      top: \"21em\",\r\n    };\r\n    // styling the delete planning space buttons\r\n    const btnStyles = {\r\n      color: \"red\",\r\n      fontWeight: \".3em\",\r\n    };\r\n    return (\r\n      <div>\r\n        {/* Adding MapMenu */}\r\n        {/* <MapMenu geojson={this.state.plan} /> */}\r\n        {/* Adding Locate Form */}\r\n        <div style={styles}>\r\n          <form noValidate autoComplete=\"off\" onSubmit={this.submitHandler}>\r\n            <Divider />\r\n            <TextField\r\n              type=\"number\"\r\n              name=\"numberOfDevices\"\r\n              label=\"Number of Devices\"\r\n              keyboardType=\"numeric\"\r\n              placeholder=\"No. of devices\"\r\n              required\r\n              value={numberOfDevices}\r\n              onChange={this.changeHandler}\r\n              fullWidth\r\n              margin=\"normal\"\r\n            />\r\n            <TextField\r\n              name=\"mustHaveCoord\"\r\n              label=\"'Must Have' Locations\"\r\n              placeholder=\"[[Lng, Lat],...,[Lng, Lat]]\"\r\n              onChange={this.changeHandler}\r\n              value={mustHaveCoord}\r\n              fullWidth\r\n              margin=\"normal\"\r\n            />\r\n            <CardActions>\r\n              <Button\r\n                type=\"submit\"\r\n                name=\"submit\"\r\n                disabled={this.state.btnSubmit === false ? \"true\" : \"\"}\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </CardActions>\r\n          </form>\r\n        </div>\r\n        {/* End of Locate Form Menu - Number of Devices and 'Must have locations */}\r\n\r\n        {/* Locate Save Menu */}\r\n        <div>\r\n          {/* Update planning space controls */}\r\n          {this.state.isPlanSelected == true ? (\r\n            <List\r\n              component=\"nav\"\r\n              aria-labelledby=\"nested-list-subheader\"\r\n              style={savePlan}\r\n            >\r\n              <ListItem button>\r\n                <ListItemIcon>\r\n                  <UpdateIcon />\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary=\"Update\"\r\n                  onClick={this.onUpdatePlanSpace}\r\n                />\r\n              </ListItem>\r\n              <ListItem button>\r\n                <ListItemIcon>\r\n                  <CloseIcon style={btnStyles} />\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary=\"Cancel\"\r\n                  onClick={this.onCancelUpdatePlanSpace}\r\n                />\r\n              </ListItem>\r\n            </List>\r\n          ) : (\r\n            //save new placing space , list saved planning space\r\n            <List\r\n              component=\"nav\"\r\n              aria-labelledby=\"nested-list-subheader\"\r\n              style={savePlan}\r\n            >\r\n              <ListItem\r\n                button\r\n                disabled={\r\n                  Object.keys(this.state.plan).length === 0 ? \"true\" : \"\"\r\n                }\r\n              >\r\n                <ListItemIcon>\r\n                  <SaveIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Save\" onClick={this.onSaveClicked} />\r\n              </ListItem>\r\n              <ListItem button onClick={this.handleClick}>\r\n                <ListItemIcon>\r\n                  <InboxIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Open\" onClick={this.onOpenClicked} />\r\n                {this.state.open ? <ExpandLess /> : <ExpandMore />}\r\n              </ListItem>\r\n              <Collapse in={this.state.open} timeout=\"auto\" unmountOnExit>\r\n                <List component=\"div\" disablePadding>\r\n                  {/* check of previously saved plan was successfully returned from the db */}\r\n                  {this.state.savedPlan != null\r\n                    ? this.state.savedPlan.map((s) => (\r\n                        <ListItem key={s._id} button style={nested}>\r\n                          <ListItemText\r\n                            primary={s.space_name}\r\n                            onClick={this.onSelectPrevSpace.bind(\r\n                              this,\r\n                              s.space_name,\r\n                              s.plan\r\n                            )}\r\n                          />\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            onClick={this.onDeletePlanSpace.bind(\r\n                              this,\r\n                              s.space_name\r\n                            )}\r\n                          >\r\n                            <CloseIcon style={btnStyles} />\r\n                          </Button>\r\n                        </ListItem>\r\n                      ))\r\n                    : \"\"}\r\n                </List>\r\n              </Collapse>\r\n            </List>\r\n          )}\r\n\r\n          {/* Dialog for save locate data */}\r\n          <Dialog\r\n            open={this.state.openSave}\r\n            onClose={this.handleSaveClose}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            {/* <DialogTitle id=\"form-dialog-title\">Save Planning Space</DialogTitle> */}\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                To save this planning space, please enter the name in the text\r\n                field below. Thank you for using AirQo Locate service.\r\n              </DialogContentText>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                name=\"space_name\"\r\n                value={this.state.space_name}\r\n                onChange={this.changeHandler}\r\n                label=\"Save As\"\r\n                type=\"text\"\r\n                placeholder=\"airqo_locate_plan_001\"\r\n                fullWidth\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.handleSaveClose} color=\"primary\">\r\n                Cancel\r\n              </Button>\r\n              <Button onClick={this.savePlanningSpace} color=\"primary\">\r\n                Save\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          {/* Dialog for confirming saved location data  */}\r\n          <Dialog\r\n            open={this.state.confirmDialog}\r\n            onClose={this.handleConfirmClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n          >\r\n            {/* <DialogTitle id=\"alert-dialog-title\">\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle> */}\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-description\">\r\n                {this.state.confirmDialogMsg}\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={this.handleConfirmClose} color=\"primary\">\r\n                OK\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </div>\r\n        {/* End of Locate Save Menu */}\r\n\r\n        {/* Map component starts here */}\r\n        <Map\r\n          center={[this.props.mapDefaults.lat, this.props.mapDefaults.lng]}\r\n          zoom={this.props.mapDefaults.zoom}\r\n        >\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n          />\r\n\r\n          <FullscreenControl position=\"topright\" />\r\n\r\n          <LayerGroup>\r\n            }\r\n            {this.state.polygons.map((location) => (\r\n              <Marker\r\n                key={location.parish}\r\n                position={{\r\n                  lat: location.properties.lat,\r\n                  lng: location.properties.long,\r\n                }}\r\n                icon={\r\n                  new L.Icon({\r\n                    iconUrl:\r\n                      \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-\" +\r\n                      location.properties.color +\r\n                      \".png\",\r\n                    shadowUrl:\r\n                      \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\r\n                    iconSize: [25, 41],\r\n                    iconAnchor: [12, 41],\r\n                    popupAnchor: [1, -34],\r\n                    shadowSize: [41, 41],\r\n                  })\r\n                }\r\n                onMouseOver={(e) => {\r\n                  e.target.openPopup();\r\n                }}\r\n                onMouseOut={(e) => {\r\n                  e.target.closePopup();\r\n                }}\r\n              >\r\n                <Popup>\r\n                  <span>\r\n                    <span>\r\n                      <b>DISTRICT: </b>\r\n                      {location.properties.district}, <br />\r\n                      <b>SUBCOUNTY: </b>\r\n                      {location.properties.subcounty}, <br />\r\n                      <b>PARISH: </b>\r\n                      {location.properties.parish}, <br />\r\n                      <b>TYPE: </b>\r\n                      {location.properties.type}\r\n                    </span>\r\n                  </span>\r\n                </Popup>\r\n              </Marker>\r\n            ))}\r\n          </LayerGroup>\r\n\r\n          <FeatureGroup\r\n            ref={(reactFGref) => {\r\n              this._onFeatureGroupReady(reactFGref);\r\n            }}\r\n          >\r\n            <EditControl\r\n              position=\"topright\"\r\n              onEdited={this._onEdited}\r\n              onCreated={this._onCreated}\r\n              onDeleted={this._onDeleted}\r\n              onMounted={this._onMounted}\r\n              onEditStart={this._onEditStart}\r\n              onEditStop={this._onEditStop}\r\n              onDeleteStart={this._onDeleteStart}\r\n              onDeleteStop={this._onDeleteStop}\r\n              draw={{\r\n                rectangle: false,\r\n                circle: false,\r\n                circlemarker: false,\r\n              }}\r\n            />\r\n          </FeatureGroup>\r\n        </Map>\r\n      </div>\r\n    );\r\n    // --- End of render function ---\r\n  }\r\n\r\n  _onFeatureGroupReady = (ref) => {\r\n    if (ref === null) {\r\n      return;\r\n    }\r\n    this._editableFG = ref;\r\n    if (this.state.polygons) {\r\n      for (var i = 0; i < this.state.polygons.length; i++) {\r\n        //let leafletGeoJSON = new L.GeoJSON(this.state.polygons[i]);console.log(leafletGeoJSON);\r\n\r\n        try {\r\n          let leafletGeoJSON = new L.GeoJSON(this.state.polygons[i], {\r\n            onEachFeature: function (feature, layer) {\r\n              let popup_string =\r\n                \"<b>DISTRICT: </b>\" +\r\n                feature[\"properties\"][\"district\"] +\r\n                \"<br/><b>SUBCOUNTY: </b>\" +\r\n                feature[\"properties\"][\"subcounty\"] +\r\n                \"<br/><b>PARISH: </b>\" +\r\n                feature[\"properties\"][\"parish\"] +\r\n                \"<br/><b>TYPE: </b>\" +\r\n                feature[\"properties\"][\"type\"];\r\n              layer.bindPopup(popup_string);\r\n              layer.on(\"mouseover\", function (e) {\r\n                this.openPopup();\r\n              });\r\n              layer.on(\"mouseout\", function (e) {\r\n                this.closePopup();\r\n              });\r\n            },\r\n            style: {\r\n              fillColor: this.state.polygons[i][\"properties\"][\"fill_color\"],\r\n              color: this.state.polygons[i][\"properties\"][\"color\"],\r\n              opacity: 100,\r\n            },\r\n          });\r\n          let leafletFG = this._editableFG.leafletElement;\r\n          leafletGeoJSON.eachLayer((layer) => leafletFG.addLayer(layer));\r\n        } catch (error) {\r\n          console.log(\r\n            \"An error occured and some polygons may not have been shown!\"\r\n          );\r\n        }\r\n      }\r\n      //console.log(toString(count)+' invalid polygons in results')\r\n    } else {\r\n      console.log(\"No polygons\");\r\n    }\r\n    //Opening previously saved data\r\n    if (this.state.isPlanSelected && this.state.isAlreadyOpened == 0) {\r\n      // populate the leaflet FeatureGroup with the geoJson layers\r\n\r\n      var savedLeafletGeoJSON = new L.GeoJSON(this.state.selected_plan);\r\n      var savedLeafletFG = ref.leafletElement;\r\n      savedLeafletGeoJSON.eachLayer((layer) => {\r\n        savedLeafletFG.addLayer(layer);\r\n      });\r\n      // prevent the map from opening twice on every state change\r\n      this.setState({ isAlreadyOpened: 1 });\r\n    }\r\n\r\n    if (this.state.isUpdateCancel) {\r\n      var savedLeafletFG = ref.leafletElement;\r\n      savedLeafletFG.eachLayer(function (layer) {\r\n        layer.remove();\r\n        //marker.remove();\r\n      });\r\n      // L.Map.eachLayer((layer) => {\r\n      //   savedLeafletFG.removeLayer(layer);\r\n      // });\r\n      //draw.deleteAll().getAll();\r\n      this.setState({ isPlanSelected: false });\r\n      this.setState({ selected_name: \"\" });\r\n      this.setState({ selected_plan: {} });\r\n      this.setState({ isUpdateCancel: false });\r\n    }\r\n  };\r\n}\r\n\r\nMaps.propTypes = {\r\n  mapRenderDefaults: PropTypes.func.isRequired,\r\n  mapDefaults: PropTypes.object.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  mapDefaults: state.mapDefaults.initMap,\r\n  auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { mapRenderDefaults })(Maps);\r\n"]},"metadata":{},"sourceType":"module"}