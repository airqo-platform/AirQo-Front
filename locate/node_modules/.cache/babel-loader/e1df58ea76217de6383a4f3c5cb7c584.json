{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\AirQo-frontend\\\\locate\\\\src\\\\views\\\\components\\\\DataDisplay\\\\Map\\\\Map.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Map as LeafletMap, TileLayer, Popup, Marker } from 'react-leaflet';\nimport { Link } from 'react-router-dom';\nimport { Card, CardContent, CardHeader, Divider } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport FullscreenControl from 'react-leaflet-fullscreen';\nimport 'react-leaflet-fullscreen/dist/styles.css'; // import L from 'leaflet';\n// import Filter from './Filter';\n// import axios from \"axios\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%',\n    padding: '0',\n    margin: 0,\n    border: 0\n  },\n  content: {\n    alignItems: 'center',\n    display: 'flex'\n  },\n  title: {\n    fontWeight: 700\n  },\n  avatar: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText,\n    height: 56,\n    width: 56\n  },\n  icon: {\n    height: 32,\n    width: 32\n  },\n  progress: {\n    marginTop: theme.spacing(3)\n  }\n})); // const Map = props => {\n//   const { className, ...rest } = props;\n//   const classes = useStyles();\n//   const [magnitude,setMagnitude ] = useState('All');\n//   const [contacts,setContacts ] = useState([]);\n//   useEffect(() => {\n//    fetch('http://127.0.0.1:5000/api/v1/dashboard/monitoringsites?organisation_name=KCCA&pm25_category='+magnitude)\n//     //fetch('http://127.0.0.1:5000/api/v1/dashboard/monitoringsites?organisation_name=KCCA')\n//       .then(res => res.json())\n//       .then((contactData) => {\n//         setContacts(contactData.airquality_monitoring_sites)\n//       })\n//       .catch(console.log)\n//   },[]);\n//   let getPm25CategoryColorClass = (aqi) =>{\n//     return aqi > 250.4  ? 'pm25Harzadous' :\n//       aqi > 150.4  ? 'pm25VeryUnHealthy' :\n//         aqi > 55.4   ? 'pm25UnHealthy' :\n//           aqi > 35.4   ? 'pm25UH4SG' :\n//             aqi > 12   ? 'pm25Moderate' :\n//               aqi > 0   ? 'pm25Good' :\n//                 'pm25UnCategorised';\n//   }\n//   let fetchFilteredData = (magnitude) => {\n//     //this.setState({ isLoaded: false }, () => {\n//     fetch('http://127.0.0.1:5000/api/v1/dashboard/monitoringsites?organisation_name=KCCA&pm25_category='+magnitude)\n//       .then(res => res.json())\n//       .then((contactData) => {\n//         setContacts(contactData.airquality_monitoring_sites)\n//       });\n//   };\n// return (\n\nReact.createElement(Card, Object.assign({}, rest, {\n  className: clsx(classes.root, className),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81\n  },\n  __self: this\n}), React.createElement(CardHeader, {\n  title: \"Mean PM2.5 by Location for Past 60 Minutes\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 85\n  },\n  __self: this\n}), React.createElement(Divider, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 88\n  },\n  __self: this\n}), React.createElement(CardContent, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90\n  },\n  __self: this\n}, React.createElement(LeafletMap, {\n  animate: true,\n  attributionControl: true,\n  center: [0.3341424, 32.5600613],\n  doubleClickZoom: true,\n  dragging: true,\n  easeLinearity: 0.35,\n  scrollWheelZoom: true,\n  zoom: 12,\n  zoomControl: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91\n  },\n  __self: this\n}, React.createElement(TileLayer, {\n  url: \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 105\n  },\n  __self: this\n}), React.createElement(FullscreenControl, {\n  position: \"topright\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 139\n  },\n  __self: this\n})))); //   );\n// };\n\nMap.propTypes = {\n  className: PropTypes.string\n};\nexport default Map;","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/AirQo-frontend/locate/src/views/components/DataDisplay/Map/Map.js"],"names":["React","clsx","PropTypes","makeStyles","Map","LeafletMap","TileLayer","Popup","Marker","Link","Card","CardContent","CardHeader","Divider","useEffect","useState","FullscreenControl","useStyles","theme","root","height","padding","margin","border","content","alignItems","display","title","fontWeight","avatar","backgroundColor","palette","primary","main","color","contrastText","width","icon","progress","marginTop","spacing","rest","classes","className","propTypes","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,GAAG,IAAIC,UAAhB,EAA4BC,SAA5B,EAAuCC,KAAvC,EAA8CC,MAA9C,QAA2D,eAA3D;AACA,SAAQC,IAAR,QAAoB,kBAApB;AACA,SAAQC,IAAR,EAAcC,WAAd,EAA2BC,UAA3B,EAAuCC,OAAvC,QAAqD,mBAArD;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,OAAO,0CAAP,C,CACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGd,UAAU,CAACe,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,MADJ;AAEJC,IAAAA,OAAO,EAAE,GAFL;AAGLC,IAAAA,MAAM,EAAE,CAHH;AAILC,IAAAA,MAAM,EAAE;AAJH,GAD+B;AAOrCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE,QADL;AAEPC,IAAAA,OAAO,EAAE;AAFF,GAP4B;AAWrCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAE;AADP,GAX8B;AAcrCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,eAAe,EAAEZ,KAAK,CAACa,OAAN,CAAcC,OAAd,CAAsBC,IADjC;AAENC,IAAAA,KAAK,EAAEhB,KAAK,CAACa,OAAN,CAAcC,OAAd,CAAsBG,YAFvB;AAGNf,IAAAA,MAAM,EAAE,EAHF;AAINgB,IAAAA,KAAK,EAAE;AAJD,GAd6B;AAoBrCC,EAAAA,IAAI,EAAE;AACJjB,IAAAA,MAAM,EAAE,EADJ;AAEJgB,IAAAA,KAAK,EAAE;AAFH,GApB+B;AAwBrCE,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAErB,KAAK,CAACsB,OAAN,CAAc,CAAd;AADH;AAxB2B,CAAL,CAAN,CAA5B,C,CA6BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;;AACE,oBAAC,IAAD,oBACMC,IADN;AAEE,EAAA,SAAS,EAAExC,IAAI,CAACyC,OAAO,CAACvB,IAAT,EAAewB,SAAf,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAIE,oBAAC,UAAD;AACE,EAAA,KAAK,EAAC,4CADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJF,EAOE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAPF,EASE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,UAAD;AACE,EAAA,OAAO,MADT;AAEE,EAAA,kBAAkB,MAFpB;AAGE,EAAA,MAAM,EAAE,CAAC,SAAD,EAAW,UAAX,CAHV;AAIE,EAAA,eAAe,MAJjB;AAKE,EAAA,QAAQ,MALV;AAME,EAAA,aAAa,EAAE,IANjB;AAOE,EAAA,eAAe,MAPjB;AAQE,EAAA,IAAI,EAAE,EARR;AAWE,EAAA,WAAW,MAXb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAcE,oBAAC,SAAD;AACE,EAAA,GAAG,EAAC,yCADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAdF,EAgDE,oBAAC,iBAAD;AAAmB,EAAA,QAAQ,EAAC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAhDF,CADF,CATF,E,CAqEJ;AACA;;AAGAvC,GAAG,CAACwC,SAAJ,GAAgB;AACdD,EAAAA,SAAS,EAAEzC,SAAS,CAAC2C;AADP,CAAhB;AAIA,eAAezC,GAAf","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Map as LeafletMap, TileLayer, Popup, Marker} from 'react-leaflet';\r\nimport {Link } from 'react-router-dom';\r\nimport {Card, CardContent, CardHeader, Divider} from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport FullscreenControl from 'react-leaflet-fullscreen';\r\nimport 'react-leaflet-fullscreen/dist/styles.css';\r\n// import L from 'leaflet';\r\n// import Filter from './Filter';\r\n// import axios from \"axios\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    height: '100%',\r\n    padding: '0',\r\n\t  margin: 0,\r\n\t  border: 0,  \r\n  },\r\n  content: {\r\n    alignItems: 'center',\r\n    display: 'flex'\r\n  },\r\n  title: {\r\n    fontWeight: 700\r\n  },\r\n  avatar: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.primary.contrastText,\r\n    height: 56,\r\n    width: 56\r\n  },\r\n  icon: {\r\n    height: 32,\r\n    width: 32\r\n  },\r\n  progress: {\r\n    marginTop: theme.spacing(3)\r\n  }\r\n}));\r\n\r\n// const Map = props => {\r\n//   const { className, ...rest } = props;\r\n\r\n//   const classes = useStyles();\r\n//   const [magnitude,setMagnitude ] = useState('All');\r\n//   const [contacts,setContacts ] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//    fetch('http://127.0.0.1:5000/api/v1/dashboard/monitoringsites?organisation_name=KCCA&pm25_category='+magnitude)\r\n//     //fetch('http://127.0.0.1:5000/api/v1/dashboard/monitoringsites?organisation_name=KCCA')\r\n//       .then(res => res.json())\r\n//       .then((contactData) => {\r\n//         setContacts(contactData.airquality_monitoring_sites)\r\n//       })\r\n//       .catch(console.log)\r\n//   },[]);\r\n\r\n//   let getPm25CategoryColorClass = (aqi) =>{\r\n//     return aqi > 250.4  ? 'pm25Harzadous' :\r\n//       aqi > 150.4  ? 'pm25VeryUnHealthy' :\r\n//         aqi > 55.4   ? 'pm25UnHealthy' :\r\n//           aqi > 35.4   ? 'pm25UH4SG' :\r\n//             aqi > 12   ? 'pm25Moderate' :\r\n//               aqi > 0   ? 'pm25Good' :\r\n//                 'pm25UnCategorised';\r\n//   }\r\n\r\n//   let fetchFilteredData = (magnitude) => {\r\n//     //this.setState({ isLoaded: false }, () => {\r\n//     fetch('http://127.0.0.1:5000/api/v1/dashboard/monitoringsites?organisation_name=KCCA&pm25_category='+magnitude)\r\n//       .then(res => res.json())\r\n//       .then((contactData) => {\r\n//         setContacts(contactData.airquality_monitoring_sites)\r\n//       });\r\n//   };\r\n\r\n  // return (\r\n    <Card\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <CardHeader        \r\n        title=\"Mean PM2.5 by Location for Past 60 Minutes\"\r\n      />\r\n      <Divider />\r\n            \r\n      <CardContent>\r\n        <LeafletMap\r\n          animate\r\n          attributionControl\r\n          center={[0.3341424,32.5600613]}\r\n          doubleClickZoom\r\n          dragging\r\n          easeLinearity={0.35}\r\n          scrollWheelZoom\r\n          zoom={12}\r\n         \r\n          \r\n          zoomControl        \r\n          \r\n        >\r\n          <TileLayer\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n          />           \r\n          {/* {contacts.map((contact) => (\r\n\r\n            <Marker \r\n              position={[contact.Latitude,contact.Longitude]}\r\n              fill=\"true\"\r\n              key={contact._id} \r\n              clickable=\"true\"  \r\n              icon={\r\n                L.divIcon({\r\n                html:`${contact.Last_Hour_PM25_Value == 0?'':contact.Last_Hour_PM25_Value}`,\r\n                iconSize: 35,\r\n                className:`leaflet-marker-icon ${getPm25CategoryColorClass(contact.Last_Hour_PM25_Value)}`\r\n                 })}\r\n              >\r\n              \r\n              <Popup>\r\n                <h2>{contact.Parish} - {contact.Division} Division</h2> \r\n                <h4>{contact.LocationCode}</h4>\r\n\r\n                <h1> {contact.Last_Hour_PM25_Value == 0?'':contact.Last_Hour_PM25_Value}</h1> \r\n                <span>Last Refreshed: {contact.LastHour} (UTC)</span>\r\n                <Divider/>\r\n\r\n                \r\n               \r\n                <Link to={`/location/${contact.Parish}`}>More Details</Link>\r\n                \r\n              </Popup>\r\n            </Marker>   \r\n          ))}     */}\r\n      \r\n          <FullscreenControl position=\"topright\" />\r\n\r\n          {/* <Filter fetchFilteredData={fetchFilteredData} /> */}\r\n\r\n        </LeafletMap>\r\n        \r\n      </CardContent>\r\n  \r\n\r\n    </Card>\r\n\r\n//   );\r\n// };\r\n\r\n\r\nMap.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Map;\r\n"]},"metadata":{},"sourceType":"module"}