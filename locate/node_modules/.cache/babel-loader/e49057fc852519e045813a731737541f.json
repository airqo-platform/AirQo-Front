{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\AirQo-frontend\\\\locate\\\\src\\\\views\\\\components\\\\LocationList\\\\LocationsTable.js\";\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { makeStyles } from '@material-ui/styles';\nimport { Card, CardActions, CardContent, Avatar, Checkbox, Table, TableBody, TableCell, TableHead, TableRow, Typography, TablePagination } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1050\n  },\n  nameContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  avatar: {\n    marginRight: theme.spacing(2)\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  }\n}));\n\nconst LocationsTable = props => {\n  const {\n    className,\n    users,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const [selectedLocations, setSelectedLocations] = useState([]);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [page, setPage] = useState(0);\n\n  const handleSelectAll = event => {\n    const {\n      users\n    } = props;\n    let selectedLocations;\n\n    if (event.target.checked) {\n      selectedLocations = users.map(user => user.id);\n    } else {\n      selectedLocations = [];\n    }\n\n    setSelectedLocations(selectedLocations);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedLocations.indexOf(id);\n    let newSelectedLocations = [];\n\n    if (selectedIndex === -1) {\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations, id);\n    } else if (selectedIndex === 0) {\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations.slice(1));\n    } else if (selectedIndex === selectedLocations.length - 1) {\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations.slice(0, selectedIndex), selectedLocations.slice(selectedIndex + 1));\n    }\n\n    setSelectedLocations(newSelectedLocations);\n  };\n\n  const handlePageChange = (event, page) => {\n    setPage(page);\n  };\n\n  const handleRowsPerPageChange = event => {\n    setRowsPerPage(event.target.value);\n  };\n\n  return React.createElement(Card, Object.assign({}, rest, {\n    className: clsx(classes.root, className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(PerfectScrollbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.inner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Table, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedLocations.length === users.length,\n    color: \"primary\",\n    indeterminate: selectedLocations.length > 0 && selectedLocations.length < users.length,\n    onChange: handleSelectAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Location Ref\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Device Ref\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Channel ID\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Host Name\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Location (country, region, district, subcounty, parish)\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"latitude\"), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"longitude\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, users.slice(0, rowsPerPage).map(user => React.createElement(TableRow, {\n    className: classes.tableRow,\n    hover: true,\n    key: user.id,\n    selected: selectedLocations.indexOf(user.id) !== -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: selectedLocations.indexOf(user.id) !== -1,\n    color: \"primary\",\n    onChange: event => handleSelectOne(event, user.id),\n    value: \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, user.location_ref), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, user.address.device_ref), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, user.address.channel_id), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, user.address.host_name), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, user.address.parish, \", \", user.address.subcounty, \",\", ' ', user.address.district, \", \", user.address.region, \", \", ' ', user.address.country), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, user.address.latitude), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, user.address.longitude)))))))), React.createElement(CardActions, {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(TablePagination, {\n    component: \"div\",\n    count: users.length,\n    onChangePage: handlePageChange,\n    onChangeRowsPerPage: handleRowsPerPageChange,\n    page: page,\n    rowsPerPage: rowsPerPage,\n    rowsPerPageOptions: [5, 10, 25],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  })));\n};\n\nLocationsTable.propTypes = {\n  className: PropTypes.string,\n  users: PropTypes.array.isRequired\n};\nexport default LocationsTable;","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/AirQo-frontend/locate/src/views/components/LocationList/LocationsTable.js"],"names":["React","useState","clsx","PropTypes","PerfectScrollbar","makeStyles","Card","CardActions","CardContent","Avatar","Checkbox","Table","TableBody","TableCell","TableHead","TableRow","Typography","TablePagination","useStyles","theme","root","content","padding","inner","minWidth","nameContainer","display","alignItems","avatar","marginRight","spacing","actions","justifyContent","LocationsTable","props","className","users","rest","classes","selectedLocations","setSelectedLocations","rowsPerPage","setRowsPerPage","page","setPage","handleSelectAll","event","target","checked","map","user","id","handleSelectOne","selectedIndex","indexOf","newSelectedLocations","concat","slice","length","handlePageChange","handleRowsPerPageChange","value","tableRow","location_ref","address","device_ref","channel_id","host_name","parish","subcounty","district","region","country","latitude","longitude","propTypes","string","array","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Avatar,\r\n  Checkbox,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  TablePagination\r\n} from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {},\r\n  content: {\r\n    padding: 0\r\n  },\r\n  inner: {\r\n    minWidth: 1050\r\n  },\r\n  nameContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  avatar: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  actions: {\r\n    justifyContent: 'flex-end'\r\n  }\r\n}));\r\n\r\nconst LocationsTable = props => {\r\n  const { className, users, ...rest } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  const [selectedLocations, setSelectedLocations] = useState([]);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [page, setPage] = useState(0);\r\n\r\n  const handleSelectAll = event => {\r\n    const { users } = props;\r\n\r\n    let selectedLocations;\r\n\r\n    if (event.target.checked) {\r\n      selectedLocations = users.map(user => user.id);\r\n    } else {\r\n      selectedLocations = [];\r\n    }\r\n\r\n    setSelectedLocations(selectedLocations);\r\n  };\r\n\r\n  const handleSelectOne = (event, id) => {\r\n    const selectedIndex = selectedLocations.indexOf(id);\r\n    let newSelectedLocations = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations.slice(1));\r\n    } else if (selectedIndex === selectedLocations.length - 1) {\r\n      newSelectedLocations = newSelectedLocations.concat(selectedLocations.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelectedLocations = newSelectedLocations.concat(\r\n        selectedLocations.slice(0, selectedIndex),\r\n        selectedLocations.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelectedLocations(newSelectedLocations);\r\n  };\r\n\r\n  const handlePageChange = (event, page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const handleRowsPerPageChange = event => {\r\n    setRowsPerPage(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      {...rest}\r\n      className={clsx(classes.root, className)}\r\n    >\r\n      <CardContent className={classes.content}>\r\n        <PerfectScrollbar>\r\n          <div className={classes.inner}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                      checked={selectedLocations.length === users.length}\r\n                      color=\"primary\"\r\n                      indeterminate={\r\n                        selectedLocations.length > 0 &&\r\n                        selectedLocations.length < users.length\r\n                      }\r\n                      onChange={handleSelectAll}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>Location Ref</TableCell>\r\n                  <TableCell>Device Ref</TableCell>\r\n                  <TableCell>Channel ID</TableCell>\r\n                  <TableCell>Host Name</TableCell>\r\n                  <TableCell>Location (country, region, district, subcounty, parish)</TableCell>\r\n                  <TableCell>latitude</TableCell>\r\n                  <TableCell>longitude</TableCell>  \r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {users.slice(0, rowsPerPage).map(user => (\r\n                  <TableRow\r\n                    className={classes.tableRow}\r\n                    hover\r\n                    key={user.id}\r\n                    selected={selectedLocations.indexOf(user.id) !== -1}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={selectedLocations.indexOf(user.id) !== -1}\r\n                        color=\"primary\"\r\n                        onChange={event => handleSelectOne(event, user.id)}\r\n                        value=\"true\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                        {user.location_ref}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {user.address.device_ref}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {user.address.channel_id}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {user.address.host_name}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {user.address.parish}, {user.address.subcounty},{' '}\r\n                      {user.address.district}, {user.address.region}, {' '}\r\n                      {user.address.country}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {user.address.latitude}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {user.address.longitude}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </PerfectScrollbar>\r\n      </CardContent>\r\n      <CardActions className={classes.actions}>\r\n        <TablePagination\r\n          component=\"div\"\r\n          count={users.length}\r\n          onChangePage={handlePageChange}\r\n          onChangeRowsPerPage={handleRowsPerPageChange}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n        />\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nLocationsTable.propTypes = {\r\n  className: PropTypes.string,\r\n  users: PropTypes.array.isRequired\r\n};\r\n\r\nexport default LocationsTable;\r\n"]},"metadata":{},"sourceType":"module"}