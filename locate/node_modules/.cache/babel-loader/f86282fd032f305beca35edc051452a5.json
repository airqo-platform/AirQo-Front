{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\AirQo-frontend\\\\locate\\\\src\\\\views\\\\components\\\\DataDisplay\\\\Map\\\\LayerControl2.js\";\nimport React, { Children, cloneElement, Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Control, DomUtil, DomEvent } from \"leaflet\";\nimport { withLeaflet, MapControl, LeafletProvider } from \"react-leaflet\";\nimport { IconButton } from \"@material-ui/core\";\nimport LayerIcon from \"@material-ui/icons/Layers\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport TerrainIcon from \"@material-ui/icons/Terrain\";\nimport RecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport StopIcon from \"@material-ui/icons/Stop\";\nconst icons = {\n  BaseLayers: React.createElement(TerrainIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }),\n  Rectangles: React.createElement(StopIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }),\n  Circles: React.createElement(RecordIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })\n};\nexport class ControlledLayer extends Component {\n  componentDidUpdate({\n    checked\n  }) {\n    if (this.props.leaflet.map == null) {\n      return;\n    } // Handle dynamically (un)checking the layer => adding/removing from the map\n\n\n    if (this.props.checked === true && (checked == null || checked === false)) {\n      this.props.leaflet.map.addLayer(this.layer);\n    } else if (checked === true && (this.props.checked == null || this.props.checked === false)) {\n      this.props.leaflet.map.removeLayer(this.layer);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeLayerControl(this.layer);\n  }\n\n  addLayer() {\n    throw new Error(\"Must be implemented in extending class\");\n  }\n\n  removeLayer(layer) {\n    this.props.removeLayer(layer);\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    return children ? React.createElement(LeafletProvider, {\n      value: this.contextValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, children) : null;\n  }\n\n}\nexport class ControlledLayerItem extends ControlledLayer {\n  constructor(props) {\n    super(props);\n\n    this.addLayer = layer => {\n      this.layer = layer; // Keep layer reference to handle dynamic changes of props\n\n      const {\n        addGroupedLayer,\n        checked,\n        name,\n        group\n      } = this.props;\n      addGroupedLayer(layer, name, checked, group);\n    };\n\n    this.contextValue = { ...props.leaflet,\n      layerContainer: {\n        addLayer: this.addLayer.bind(this),\n        removeLayer: this.removeLayer.bind(this)\n      }\n    };\n  }\n\n}\n\nclass LayerControl extends MapControl {\n  constructor(props, context) {\n    super(props);\n\n    this.openMenu = () => {\n      this.setState({\n        menuOpen: true\n      });\n    };\n\n    this.closeMenu = () => {\n      this.setState({\n        menuOpen: false\n      });\n    };\n\n    this.addGroupedLayer = (layer, name, checked, group) => {\n      if (checked && this.props.leaflet.map != null) {\n        this.props.leaflet.map.addLayer(layer);\n      }\n\n      this.setState((prevState, props) => {\n        let currentLayers = { ...prevState.layers\n        };\n        let currentGroup = currentLayers[group];\n        currentGroup = currentGroup ? [...currentGroup.filter(x => x.name !== name), {\n          layer,\n          name,\n          checked,\n          group\n        }] : [{\n          layer,\n          name,\n          checked,\n          group\n        }];\n        currentLayers[group] = currentGroup;\n        return {\n          layers: currentLayers\n        };\n      }); // bad implementation\n\n      let currentGroup = this._layers[group];\n      currentGroup = currentGroup ? [...currentGroup.filter(x => x.name !== name), {\n        layer,\n        name,\n        checked,\n        group\n      }] : [{\n        layer,\n        name,\n        checked,\n        group\n      }];\n      let layers = { ...this._layers\n      };\n      layers[group] = currentGroup;\n      this._layers = layers;\n    };\n\n    this.toggleLayer = layerInput => {\n      const {\n        layer,\n        name,\n        checked,\n        group\n      } = layerInput;\n      console.log(layer, name, checked, group);\n      let layers = { ...this.state.layers\n      };\n      layers[group] = layers[group].map(l => {\n        if (l.name === name) {\n          l.checked = !l.checked;\n        }\n\n        l.checked ? this.props.leaflet.map.addLayer(layer) && console.log(name, \"adding this layer\") : this.removeLayer(layer);\n        return l;\n      });\n      this.setState({\n        layers\n      });\n    };\n\n    this.onCollapseClick = name => {\n      const {\n        menus\n      } = this.state;\n      menus.includes(name) ? this.setState({\n        menus: [...this.state.menus.filter(x => x !== name)]\n      }) : this.setState({\n        menus: [...menus, name]\n      });\n    };\n\n    this.isMenuOpen = name => {\n      let open = this.state.menus.includes(name);\n      return open;\n    };\n\n    this.controlProps = {\n      addGroupedLayer: this.addGroupedLayer.bind(this),\n      removeLayer: this.removeLayer.bind(this),\n      leaflet: props.leaflet\n    };\n    this._layers = {};\n    this.state = {\n      menuOpen: false,\n      layers: {},\n      menus: []\n    };\n  }\n\n  removeLayer(layer) {\n    if (this.props.leaflet.map != null) {\n      this.props.leaflet.map.removeLayer(layer);\n    }\n  } //create and return a leaflet object you want to extend\n\n\n  createLeafletElement(props) {\n    // extend control from leaflet\n    const MyControl = Control.extend({\n      // there are only two options we can have here for extending a control\n      // https://leafletjs.com/reference-1.5.0.html#control\n      // Should return the container DOM element for the control and add listeners on relevant map events\n      onAdd: map => {\n        this.container = DomUtil.create(\"div\");\n        this.map = map;\n        return this.container;\n      },\n      // this one is optional\n      onRemove: map => {}\n    }); // return new instance of our control and pass it all the props\n\n    return new MyControl(props);\n  }\n\n  updateLeafletElement(fromProps, toProps) {\n    super.updateLeafletElement(fromProps, toProps);\n    console.log(fromProps, toProps); // this.forceUpdate();\n  }\n\n  componentDidMount(props) {\n    super.componentDidMount();\n    this.forceUpdate(); // render react component\n  }\n\n  render() {\n    if (!this.leafletElement || !this.leafletElement.getContainer()) {\n      return null;\n    } // console.log(this.state.baseLayers);\n\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, ReactDOM.createPortal(React.createElement(Paper, Object.assign({\n      onMouseEnter: this.openMenu,\n      onMouseLeave: this.closeMenu\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), this.state.menuOpen && React.createElement(\"div\", {\n      style: {\n        padding: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, Object.keys(this.state.layers).map(g => {\n      return React.createElement(React.Fragment, {\n        key: g,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(ListItem, {\n        button: true,\n        onClick: () => this.onCollapseClick(`${g}`),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(ListItemIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, icons[g]), React.createElement(ListItemText, {\n        primary: g,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), this.isMenuOpen(g) ? React.createElement(ExpandLess, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }) : React.createElement(ExpandMore, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      })), React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(Collapse, {\n        in: this.isMenuOpen(g),\n        timeout: \"auto\",\n        unmountOnExit: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, React.createElement(List, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, this.state.layers[g].map(l => {\n        return React.createElement(ListItem, {\n          key: l.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256\n          },\n          __self: this\n        }, React.createElement(ListItemIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          onClick: () => this.toggleLayer(l),\n          edge: \"start\",\n          checked: l.checked,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        })), React.createElement(ListItemText, {\n          primary: l.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }));\n      }))));\n    })), !this.state.menuOpen && React.createElement(IconButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(LayerIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }))), this.leafletElement.getContainer()), Children.map(this.props.children, child => {\n      return child ? cloneElement(child, this.controlProps) : null;\n    }));\n  }\n\n}\n\nexport default withLeaflet(LayerControl);","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/AirQo-frontend/locate/src/views/components/DataDisplay/Map/LayerControl2.js"],"names":["React","Children","cloneElement","Component","ReactDOM","Paper","Typography","ListItemText","List","ListItem","Divider","ListItemIcon","Collapse","Checkbox","Control","DomUtil","DomEvent","withLeaflet","MapControl","LeafletProvider","IconButton","LayerIcon","ExpandLess","ExpandMore","TerrainIcon","RecordIcon","StopIcon","icons","BaseLayers","Rectangles","Circles","ControlledLayer","componentDidUpdate","checked","props","leaflet","map","addLayer","layer","removeLayer","componentWillUnmount","removeLayerControl","Error","render","children","contextValue","ControlledLayerItem","constructor","addGroupedLayer","name","group","layerContainer","bind","LayerControl","context","openMenu","setState","menuOpen","closeMenu","prevState","currentLayers","layers","currentGroup","filter","x","_layers","toggleLayer","layerInput","console","log","state","l","onCollapseClick","menus","includes","isMenuOpen","open","controlProps","createLeafletElement","MyControl","extend","onAdd","container","create","onRemove","updateLeafletElement","fromProps","toProps","componentDidMount","forceUpdate","leafletElement","getContainer","createPortal","padding","Object","keys","g","child"],"mappings":"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","sourcesContent":["import React, { Children, cloneElement, Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { Control, DomUtil, DomEvent } from \"leaflet\";\r\nimport { withLeaflet, MapControl, LeafletProvider } from \"react-leaflet\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport LayerIcon from \"@material-ui/icons/Layers\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\nimport TerrainIcon from \"@material-ui/icons/Terrain\";\r\nimport RecordIcon from \"@material-ui/icons/FiberManualRecord\";\r\nimport StopIcon from \"@material-ui/icons/Stop\";\r\nconst icons = {\r\n  BaseLayers: <TerrainIcon />,\r\n  Rectangles: <StopIcon />,\r\n  Circles: <RecordIcon />\r\n};\r\n\r\nexport class ControlledLayer extends Component {\r\n  componentDidUpdate({ checked }) {\r\n    if (this.props.leaflet.map == null) {\r\n      return;\r\n    }\r\n    // Handle dynamically (un)checking the layer => adding/removing from the map\r\n    if (this.props.checked === true && (checked == null || checked === false)) {\r\n      this.props.leaflet.map.addLayer(this.layer);\r\n    } else if (\r\n      checked === true &&\r\n      (this.props.checked == null || this.props.checked === false)\r\n    ) {\r\n      this.props.leaflet.map.removeLayer(this.layer);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.removeLayerControl(this.layer);\r\n  }\r\n\r\n  addLayer() {\r\n    throw new Error(\"Must be implemented in extending class\");\r\n  }\r\n\r\n  removeLayer(layer) {\r\n    this.props.removeLayer(layer);\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    return children ? (\r\n      <LeafletProvider value={this.contextValue}>{children}</LeafletProvider>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nexport class ControlledLayerItem extends ControlledLayer {\r\n  constructor(props) {\r\n    super(props);\r\n    this.contextValue = {\r\n      ...props.leaflet,\r\n      layerContainer: {\r\n        addLayer: this.addLayer.bind(this),\r\n        removeLayer: this.removeLayer.bind(this)\r\n      }\r\n    };\r\n  }\r\n\r\n  addLayer = layer => {\r\n    this.layer = layer; // Keep layer reference to handle dynamic changes of props\r\n    const { addGroupedLayer, checked, name, group } = this.props;\r\n    addGroupedLayer(layer, name, checked, group);\r\n  };\r\n}\r\n\r\nclass LayerControl extends MapControl {\r\n  constructor(props, context) {\r\n    super(props);\r\n    this.controlProps = {\r\n      addGroupedLayer: this.addGroupedLayer.bind(this),\r\n      removeLayer: this.removeLayer.bind(this),\r\n      leaflet: props.leaflet\r\n    };\r\n    this._layers = {};\r\n\r\n    this.state = {\r\n      menuOpen: false,\r\n      layers: {},\r\n      menus: []\r\n    };\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({ menuOpen: true });\r\n  };\r\n  closeMenu = () => {\r\n    this.setState({ menuOpen: false });\r\n  };\r\n\r\n  addGroupedLayer = (layer, name, checked, group) => {\r\n    if (checked && this.props.leaflet.map != null) {\r\n      this.props.leaflet.map.addLayer(layer);\r\n    }\r\n\r\n    this.setState((prevState, props) => {\r\n      let currentLayers = { ...prevState.layers };\r\n      let currentGroup = currentLayers[group];\r\n\r\n      currentGroup = currentGroup\r\n        ? [\r\n            ...currentGroup.filter(x => x.name !== name),\r\n            { layer, name, checked, group }\r\n          ]\r\n        : [{ layer, name, checked, group }];\r\n      currentLayers[group] = currentGroup;\r\n      return {\r\n        layers: currentLayers\r\n      };\r\n    });\r\n\r\n    // bad implementation\r\n\r\n    let currentGroup = this._layers[group];\r\n\r\n    currentGroup = currentGroup\r\n      ? [\r\n          ...currentGroup.filter(x => x.name !== name),\r\n          { layer, name, checked, group }\r\n        ]\r\n      : [{ layer, name, checked, group }];\r\n\r\n    let layers = { ...this._layers };\r\n    layers[group] = currentGroup;\r\n\r\n    this._layers = layers;\r\n  };\r\n\r\n  removeLayer(layer) {\r\n    if (this.props.leaflet.map != null) {\r\n      this.props.leaflet.map.removeLayer(layer);\r\n    }\r\n  }\r\n  //create and return a leaflet object you want to extend\r\n  createLeafletElement(props) {\r\n    // extend control from leaflet\r\n    const MyControl = Control.extend({\r\n      // there are only two options we can have here for extending a control\r\n      // https://leafletjs.com/reference-1.5.0.html#control\r\n\r\n      // Should return the container DOM element for the control and add listeners on relevant map events\r\n      onAdd: map => {\r\n        this.container = DomUtil.create(\"div\");\r\n        this.map = map;\r\n        return this.container;\r\n      },\r\n      // this one is optional\r\n      onRemove: map => {}\r\n    });\r\n\r\n    // return new instance of our control and pass it all the props\r\n    return new MyControl(props);\r\n  }\r\n\r\n  updateLeafletElement(fromProps, toProps) {\r\n    super.updateLeafletElement(fromProps, toProps);\r\n    console.log(fromProps, toProps);\r\n    // this.forceUpdate();\r\n  }\r\n\r\n  componentDidMount(props) {\r\n    super.componentDidMount();\r\n    this.forceUpdate();\r\n    // render react component\r\n  }\r\n\r\n  toggleLayer = layerInput => {\r\n    const { layer, name, checked, group } = layerInput;\r\n    console.log(layer, name, checked, group);\r\n    let layers = { ...this.state.layers };\r\n    layers[group] = layers[group].map(l => {\r\n      if (l.name === name) {\r\n        l.checked = !l.checked;\r\n      }\r\n      l.checked\r\n        ? this.props.leaflet.map.addLayer(layer) &&\r\n          console.log(name, \"adding this layer\")\r\n        : this.removeLayer(layer);\r\n\r\n      return l;\r\n    });\r\n\r\n    this.setState({\r\n      layers\r\n    });\r\n  };\r\n\r\n  onCollapseClick = name => {\r\n    const { menus } = this.state;\r\n\r\n    menus.includes(name)\r\n      ? this.setState({\r\n          menus: [...this.state.menus.filter(x => x !== name)]\r\n        })\r\n      : this.setState({\r\n          menus: [...menus, name]\r\n        });\r\n  };\r\n\r\n  isMenuOpen = name => {\r\n    let open = this.state.menus.includes(name);\r\n    return open;\r\n  };\r\n\r\n  render() {\r\n    if (!this.leafletElement || !this.leafletElement.getContainer()) {\r\n      return null;\r\n    }\r\n    // console.log(this.state.baseLayers);\r\n    return (\r\n      <React.Fragment>\r\n        {ReactDOM.createPortal(\r\n          <Paper\r\n            onMouseEnter={this.openMenu}\r\n            onMouseLeave={this.closeMenu}\r\n            {...this.props}\r\n          >\r\n            {this.state.menuOpen && (\r\n              <div style={{ padding: 10 }}>\r\n                {Object.keys(this.state.layers).map(g => {\r\n                  return (\r\n                    <React.Fragment key={g}>\r\n                      <ListItem\r\n                        button\r\n                        onClick={() => this.onCollapseClick(`${g}`)}\r\n                      >\r\n                        <ListItemIcon>{icons[g]}</ListItemIcon>\r\n                        <ListItemText primary={g} />\r\n                        {this.isMenuOpen(g) ? <ExpandLess /> : <ExpandMore />}\r\n                      </ListItem>\r\n                      <Typography />\r\n                      <Divider />\r\n                      <Collapse\r\n                        in={this.isMenuOpen(g)}\r\n                        timeout=\"auto\"\r\n                        unmountOnExit\r\n                      >\r\n                        <List>\r\n                          {this.state.layers[g].map(l => {\r\n                            return (\r\n                              <ListItem key={l.name}>\r\n                                <ListItemIcon>\r\n                                  <Checkbox\r\n                                    onClick={() => this.toggleLayer(l)}\r\n                                    edge=\"start\"\r\n                                    checked={l.checked}\r\n                                  />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={l.name} />\r\n                              </ListItem>\r\n                            );\r\n                          })}\r\n                        </List>\r\n                      </Collapse>\r\n                    </React.Fragment>\r\n                  );\r\n                })}\r\n              </div>\r\n            )}\r\n            {!this.state.menuOpen && (\r\n              <IconButton>\r\n                <LayerIcon />\r\n              </IconButton>\r\n            )}\r\n          </Paper>,\r\n          this.leafletElement.getContainer()\r\n        )}\r\n        {Children.map(this.props.children, child => {\r\n          return child ? cloneElement(child, this.controlProps) : null;\r\n        })}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withLeaflet(LayerControl);\r\n"]},"metadata":{},"sourceType":"module"}